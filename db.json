{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/volantis-tweaked/source/css/Readme.md","path":"css/Readme.md","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/css/first.styl","path":"css/first.styl","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/app.js","path":"js/app.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/parallax.js","path":"js/plugins/parallax.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/rightMenu.js","path":"js/plugins/rightMenu.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/rightMenus.js","path":"js/plugins/rightMenus.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/search/hexo.js","path":"js/search/hexo.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/tags/contributors.js","path":"js/plugins/tags/contributors.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/tags/friends.js","path":"js/plugins/tags/friends.js","modified":0,"renderable":1},{"_id":"themes/volantis-tweaked/source/js/plugins/tags/sites.js","path":"js/plugins/tags/sites.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/ArchLinuxInstallGuide.md","hash":"8526a453f11addc630c03caa3955405e8ba020b3","modified":1659582847587},{"_id":"source/about/index.md","hash":"25b2a4c60fc8fae70eb6242aea704609f73907a9","modified":1659496832139},{"_id":"source/categories/index.md","hash":"cbf081b8a6d2f8de9c1daee3d45b76825a5a4b32","modified":1659425900423},{"_id":"source/categories/index.md~","hash":"c6896d51e4fd3af731f3420f4ec537d9ed53fc5e","modified":1659425617724},{"_id":"source/friends/index.md","hash":"3d16fd1552799c01a22e8bc3a41b5c9bb4064664","modified":1659426198847},{"_id":"source/tags/index.md","hash":"8f1dbb54df417ff2b8543b16ace3162016922b11","modified":1659425875967},{"_id":"themes/volantis-tweaked/layout/_partial/_cover/blank.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1659422188802},{"_id":"themes/volantis-tweaked/.gitignore","hash":"3b15373c917e42e63a86b5b06853c582c350f233","modified":1659422188786},{"_id":"themes/volantis-tweaked/.npmignore","hash":"04b4b0d1e72dfb0f80cc763b8d010b5c080def0a","modified":1659422188786},{"_id":"themes/volantis-tweaked/CHANGELOG.md","hash":"4c8fa42f026a75b749532b622bf19278430d0499","modified":1659422188786},{"_id":"themes/volantis-tweaked/LICENSE","hash":"e0cbf6906cab5926a34f17852db6c05187ee1f68","modified":1659422188786},{"_id":"themes/volantis-tweaked/README.md","hash":"6b6b43b65883630f87fa50c8c1aaea00efc374c7","modified":1659422188786},{"_id":"themes/volantis-tweaked/_config.yml","hash":"7521d51279e690cfa5f093704beb094cdac195b0","modified":1659422188786},{"_id":"themes/volantis-tweaked/package.json","hash":"8d98ea7aee4648885ee3294831a04e45dfb510cc","modified":1659422188864},{"_id":"themes/volantis-tweaked/languages/en.yml","hash":"f95a675710e4d803e1ca3cf733456b0943b7df17","modified":1659422188786},{"_id":"themes/volantis-tweaked/languages/zh-CN.yml","hash":"f7c0923eb63b8de5acc4c1372bcb9b359b69fcb5","modified":1659501843107},{"_id":"themes/volantis-tweaked/languages/zh-TW.yml","hash":"bebc38190efd292e78fecc89fd503d5e9d055864","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/404.ejs","hash":"64e4710cac866085ae8a1dff9520253a848ba7ef","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/_pre.ejs","hash":"89a0d5adfaa111a31922bc3fb919ea3388d66726","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/archive.ejs","hash":"5a8469b31996ff6afd88d5e6b64e626453821c37","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/category.ejs","hash":"f85e15253c53ea05df113df7310f065c1cfc3a19","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/docs.ejs","hash":"2ebefc2d265d4ffafbd96108d5e04fe84e2a5a4d","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/friends.ejs","hash":"022496003b447057da2eb3678ee017fd63dbcaa3","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/index.ejs","hash":"570368d44c0011236671f2c043c7b5de76f7d9b9","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/layout.ejs","hash":"1594191f99b6e1c3f68e278290ec99775047a772","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/list.ejs","hash":"4d9f954c92ebd50a875d5474514a78b220b82166","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/page.ejs","hash":"2ebefc2d265d4ffafbd96108d5e04fe84e2a5a4d","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/post.ejs","hash":"2ebefc2d265d4ffafbd96108d5e04fe84e2a5a4d","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/tag.ejs","hash":"8f422a11b651a03c6798a768d8fa5fb4e55dbdd2","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_meta/artalkcount.ejs","hash":"94c9e591e38ac00d6beafa44de4d29e70680c673","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/_meta/author.ejs","hash":"a95a474a0394a4b35b6d5d1604c98532155f6569","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/_meta/category.ejs","hash":"6d6dbb84cce90146b0e6ed130ea1c3581c54a029","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/_meta/counter.ejs","hash":"bdc8864ebc0be684293372c179f01605ef238bd7","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/_meta/date.ejs","hash":"96f55772b90f582616d1adb414172c1bd8a9af2c","modified":1659422188786},{"_id":"themes/volantis-tweaked/layout/_meta/music.ejs","hash":"0608d08b7f1cf6be529193c8b7fea99517b4a0d0","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_meta/share.ejs","hash":"1fb300f5c2dca5d53d748fed8ccc343e69d1d9d5","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_meta/tags.ejs","hash":"ff3b700a971fc3190653e2bf415f6d23a70a8f61","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_meta/thumbnail.ejs","hash":"7aaa1093b8a96706cacba60d9390fbab602f65a4","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_meta/updated.ejs","hash":"988a4486b768dc410541c262fef291b79390e98a","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_meta/walinecount.ejs","hash":"10b243ab927d356e682297b49b23a88c8f5ca653","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_meta/wordcount.ejs","hash":"eebaab3821af95ee64d8d56f33ca6c9c60b9b6f0","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/archive.ejs","hash":"7f97598ba10aa269589dbbde270e80beecf3d10a","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/categories.ejs","hash":"f7d893aee43e708865fa664d50237f9a73b240ed","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/article.ejs","hash":"d14654ba8d980753cccf8d60306eccc8f5be03fd","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/cover.ejs","hash":"7c0ff34dd099bcb24aab39c4872ff60e679c59d1","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/footer.ejs","hash":"07d666b807ece4befbc902ae34b6dcbcc8e59f45","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/head.ejs","hash":"da5e7b8b969001d10cab1a8e6b529a92b3db5ddd","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/meta.ejs","hash":"ebeeb06f6c7aa167d64838f403fba6a307ad47d2","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/header.ejs","hash":"d28f774144ec2aae2a42750e16f25fff16c9e39f","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/post.ejs","hash":"2184887f62ff94661e38aa98fda3b44cb3832283","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/side.ejs","hash":"b6d04940278e3f922f81fffeca1574de4fecf94a","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_widget/_pre.ejs","hash":"af915f88c136595eb695820548adf028470f47b4","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_widget/blogger.ejs","hash":"2733c0abe08b2f34b514717702e1b6974945a73f","modified":1659432996663},{"_id":"themes/volantis-tweaked/layout/_widget/category.ejs","hash":"4149960a047e969d1982d2492a8d0416d3501a69","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_widget/copyright.ejs","hash":"63c5129b1b94ba50b9d5ba0b8656c65a13a14444","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/grid.ejs","hash":"aeafbd9f5c7bf31ad120eda3d054e9bd00666fc8","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/group.ejs","hash":"1b7976d02ce069d7b738a768e6b8665a033c00f3","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/header.ejs","hash":"b54a04af22efd55585af6e76ddbb7e856c5e9601","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/lastupdate.ejs","hash":"c311ba4c8b255c45313dc1ab7ddafd99ec7fe8af","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/list.ejs","hash":"98eb30970421f7cfbc2a8f4f9ffc200eba8fac43","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/load.ejs","hash":"530ddefc167f0a1907f49a35e6b6d3a9f3756f21","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/music.ejs","hash":"0491078df052b1ce7747a1be31c7c8fcf084c25a","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/page.ejs","hash":"e282b46b8ad7fbd95d6b0a2b89f3cad1ecf2b2e9","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/qrcode.ejs","hash":"016322fb85bba433bfa096290325a199fb9ba93f","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/references.ejs","hash":"c4669e92b922516265bb68b1802d759cf0265fbf","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/related_posts.ejs","hash":"27cae9dd94922a4134b48f2c2419fb66a07f1129","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/tagcloud.ejs","hash":"04cbd2ae65faa22540e53ae531bc3ca2893eb0f8","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/text.ejs","hash":"4e978821f385c1c0cceb6aec83262f6e99c6c89e","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/toc.ejs","hash":"38e1f546e04973054c983428539b14287c647c17","modified":1659422188864},{"_id":"themes/volantis-tweaked/layout/_widget/webinfo.ejs","hash":"29b70c3e5882afa3045b1282d03f88d30ccf5e84","modified":1659422188864},{"_id":"themes/volantis-tweaked/scripts/events/index.js","hash":"05e91388f8f0f87dd80caefe00a124c3fe18227b","modified":1659501962192},{"_id":"themes/volantis-tweaked/scripts/filters/content-visibility.js","hash":"67d73133319205bc0cc0872269702c1b0a5e4558","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/filters/img.js","hash":"2536854025b6c105ba27f9ab9e99fda05263d9f0","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/filters/replace.js","hash":"590e94a78490367ec0e111d4f48de5c9e57e256a","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/filters/z-lazyload.js","hash":"2340e56c2c7cdd796cba0d0aca7d4899780fa140","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/custom-files.js","hash":"aee8fc2ddec0f98221cc54d6059cc575c87194a1","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/first-style.js","hash":"63d067b9ae2334d1af35e286f38f04379f37a6cd","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/related-posts.js","hash":"8f5e201ababac080de44243338f62aae61010837","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/revisioned.js","hash":"de52e8f05e653ab376ea16254bca4210383194b9","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/tags/btn.js","hash":"1691e38dc3c7eb0810a4bb3247237661f2282005","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/tags/btns.js","hash":"cb00611b1c60bb96edde8d8c4d508b9e62229115","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/tags/checkbox.js","hash":"7ad06787a2b9ae4e1aeaf397508db357223dce9f","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/tags/contributors.js","hash":"4b88c875b00ccb880b4bc1608450ea15251981b1","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/tags/dropmenu.js","hash":"af00c0b28fdff2048f1287aca794d5ca8ec479be","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/fancybox.js","hash":"3699f69722dca8f1c621ad9bb27ff2aa9882a25b","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/folding.js","hash":"87e8a902420ee31eb8558198a2a6b59e2f22de68","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/frame.js","hash":"45485cab9741943fcb498563c376fae3795d5349","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/friends.js","hash":"3ef111f3db1af6ab5be0a1e8880dee75e8e6d0e0","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/ghcard.js","hash":"95277092799e243e7b3f3347271cd1cdba794a10","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/image.js","hash":"f879b4fee542cf51c233fe436aba2a07c5f01259","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/link.js","hash":"9a488ef5040871d7a5178e86e787ba3f682a6e13","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/md.js","hash":"ab2bf2fd22b171e7556718db0e254f2b8de77b58","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/media.js","hash":"97a19d5d0e3136a411ca130eb4db3f5577c566cf","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/note.js","hash":"eba9d65a2564b91cf85f1a6a4388bcd5e0a3a5ee","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/pandown.js","hash":"d949c2da1b5d749efd53e0f91f8311597766f384","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/site.js","hash":"bc0ad5d47d13a1992f62f74eb41485759b7a71d0","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/span.js","hash":"d73eb17fc8064da31fae2823b9cfb1031ba0d105","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/swiper.js","hash":"f0171f07f494c0b0f3f8af265344add15813a676","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/table.js","hash":"13528b4ba9caffd5ea5c9ded4d048e9b9e8da5b0","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/tabs.js","hash":"7678a578498b4586c022910330250d1725bbfd42","modified":1659422188895},{"_id":"themes/volantis-tweaked/scripts/tags/timeline.js","hash":"0ff2717c342a12d7120bb6de6bf23968e56e4d5a","modified":1659422188895},{"_id":"themes/volantis-tweaked/source/css/Readme.md","hash":"8046a2fb69589fb01b19eec6ba903b93dacc5852","modified":1659422188895},{"_id":"themes/volantis-tweaked/source/css/first.styl","hash":"03d4cb5ecd71014d4d42f0e331b48532d3763b03","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/style.styl","hash":"1c7f0dcf5e01c26de6ebcb91c3e1a14b457135c2","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/app.js","hash":"7b8a1af8c9928a7c4eda23b734a379f171b8cb94","modified":1659539037626},{"_id":"themes/volantis-tweaked/source/js/app.js~","hash":"764ce62e9d54222dd70cf70f51d62f109fe2c4dc","modified":1659519698835},{"_id":"themes/volantis-tweaked/layout/_partial/_cover/dock.ejs","hash":"21d8e3fd3872b0eb69f407c7e567544a90c630aa","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/_cover/featured.ejs","hash":"21d8e3fd3872b0eb69f407c7e567544a90c630aa","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/_cover/focus.ejs","hash":"21d8e3fd3872b0eb69f407c7e567544a90c630aa","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/_cover/layout.ejs","hash":"a965bd46f1d9471458436202ba1fac97c13452db","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/_cover/search.ejs","hash":"1c90d5ebe45d378070513ca9d5034a74ca15e133","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/_ctrl.ejs","hash":"b3ded924f33b145a491fe3a694c82f9f39133943","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/content-visibility-scroll-fix.ejs","hash":"9658f32778f796219378b34512f2d0b9873e5776","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/global.ejs","hash":"249fbaf882bf66309fb54a250eb86d242edf6bd7","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/index.ejs","hash":"4bc2d68155d6208db85eb5a435e1bdbcef6977bb","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/toc.ejs","hash":"91cd3da7fe0888e844f08a4d2bd63e5202794b4e","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/index.ejs","hash":"8566bfbdedcbc07e9dbf68cf37200db86588ad8d","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/analytics/LCCounter.ejs","hash":"d165260a59866e5ee437fb1e08e452b1fb351a52","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/analytics/script.ejs","hash":"09ccc55c52f40f85bfa3c741af8f073b82c756d4","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/aplayer/layout.ejs","hash":"9b64c819cd0301def53d223c2f3bd89e4962fd79","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/aplayer/script.ejs","hash":"8adb7d4ea61beff612c897dbbf11708feb7a09d0","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/chat/index.ejs","hash":"99d149ca778a6b956e18a3d380b36a120bcb98e4","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/index.ejs","hash":"45e60c3f7e12c862dd08ef310689709847ba93c9","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/darkmode/script.ejs","hash":"6c43562b2b404f594ffe5a5f242f697a000846ed","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/end-of-support/script.ejs","hash":"4fccde6d5a94aa6dcecd50b176a1a014acb75667","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/github-api/script.ejs","hash":"5095fa0a33c95d5b1bfcd3f554df5256994bca26","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/highlight/script.ejs","hash":"98a4351c0750e7a9f35e136211f2ea5cc8f2900b","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/lazyload/script.ejs","hash":"4171b54bf116985efd7247a113e0b65b2d9302a1","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/nodewaves/script.ejs","hash":"e3d227b8366f62c65d1f8bbfba7061f43b36c806","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/parallax/script.ejs","hash":"ee56f58a4127c1ce56ee802c964f45134629027b","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/pjax/animate.ejs","hash":"2b6b2fe421f8195766d5fef6fc4d740a4017eb32","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/pjax/index.ejs","hash":"c59b0cc21b9f4a46ae01e91d2fd49a294baf992c","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/pjax/pdata.ejs","hash":"463987b029265f2176eeef2b1fa669a3ff54d3b8","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/preload/script.ejs","hash":"d8904aaf8b1e14086b4ce9de9770a89e0f1c6a2b","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/rightmenu/layout.ejs","hash":"11b5c4f1ca33a3a8fb8ea0243312c55d68f4105b","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/rightmenus/layout.ejs","hash":"31a1787705aa13d3e0eb1aacf76bc4db869cb37a","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/scrollreveal/script.ejs","hash":"eae0c08c5c72745529fc1b7991a329df71ea3c07","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/search/script.ejs","hash":"5e6dd52fe2d82204eb3fe46a3f7c388cd322e93f","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/share/layout.ejs","hash":"aa714ba68918c2b9e74997161811ca35ff57da1c","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/slow-network/script.ejs","hash":"22453b063a7e7099c626f95c68bd96935240963d","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/swiper/script.ejs","hash":"231a53364b50a99a32b43a4ec8360c3891c17557","modified":1659422188848},{"_id":"themes/volantis-tweaked/scripts/events/lib/check-configuration.js","hash":"dd4767e2d59c93fc16fc6fe40453ad0e561d7ed4","modified":1659422188864},{"_id":"themes/volantis-tweaked/scripts/events/lib/check-environment.js","hash":"fb0d697d4874a421c0cc85f93b72efc3a8596c27","modified":1659422188864},{"_id":"themes/volantis-tweaked/scripts/events/lib/config.js","hash":"c7f41acca0889d9fb8e4a19666612ef3891d8689","modified":1659422188864},{"_id":"themes/volantis-tweaked/scripts/events/lib/render-stylus.js","hash":"9f2bce5fe6e951ddc3961c9dec64d448ca3b8c5e","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/events/lib/stellar-tag-utils.js","hash":"e451be9a7b23bf52a0d0b02c3ac4101ca25f7ccd","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/head/autoCanonical.js","hash":"2021e20e02651c7007245c8fd70254a282ddceba","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/head/generate_preload_fontfamily.js","hash":"b4b9f902aa1b43e7814158e1bdb9b723828210d6","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/head/generate_seo.js","hash":"50d940023751baa849ab8635d662ba0348069197","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/head/generate_title__keywords__description.js","hash":"64367f8563b05cf5a721f3d0883fb156c2d69964","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/index.js","hash":"61c9b7577bebb41fb0fb0ddd907f7d89abef30e7","modified":1659422188880},{"_id":"themes/volantis-tweaked/source/css/_defines/Readme.md","hash":"75c2fa01e58095a98d463e6b9bab1f0c04e38692","modified":1659422188895},{"_id":"themes/volantis-tweaked/source/css/_defines/AutoPrefixCSS.styl","hash":"18fe976fb9241ef379ebcccc0b7a9cc599f65c51","modified":1659422188895},{"_id":"themes/volantis-tweaked/source/css/_defines/color.styl","hash":"a79f2df625bcdbf2bb266cca28a763a16e6b25d4","modified":1659531382830},{"_id":"themes/volantis-tweaked/source/css/_defines/color.styl~","hash":"a79f2df625bcdbf2bb266cca28a763a16e6b25d4","modified":1659531381267},{"_id":"themes/volantis-tweaked/source/css/_defines/effect.styl","hash":"96b8e1b97146946469dd965e7d04cf90b22eb497","modified":1659422188895},{"_id":"themes/volantis-tweaked/source/css/_defines/fonts.styl","hash":"9601ac0c9ecfb65288fa64eae67b2a6b6e56d8dd","modified":1659422188895},{"_id":"themes/volantis-tweaked/source/css/_defines/func.styl","hash":"d5b08a9b533c8cde12e34f9f6df1bd4a994c46d2","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_defines/layout.styl","hash":"192d0a3b07f95e01a3952c5c88967068e0682cca","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_first/base_first.styl","hash":"883cc9e68dbb8b71ce20fe3edc479ee6a772106b","modified":1659531699428},{"_id":"themes/volantis-tweaked/source/css/_first/base_first.styl~","hash":"c17bb0d134cc1cb553886ecbc854473ccd5f2527","modified":1659531647822},{"_id":"themes/volantis-tweaked/source/css/_first/cover_first.styl","hash":"881210244593d7125337d4f810d49b9699420b43","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_first/dark_first.styl","hash":"5cfbeee294e1ee2097099b2631acefaf0027e556","modified":1659531186111},{"_id":"themes/volantis-tweaked/source/css/_first/dark_first.styl~","hash":"5cfbeee294e1ee2097099b2631acefaf0027e556","modified":1659531183903},{"_id":"themes/volantis-tweaked/source/css/_first/fontfamily_first.styl","hash":"cce88d81a8e21cce65b7fd586765e8819388d31d","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_first/navbar_first.styl","hash":"cb85492e8ae8878fc99e52b14610a9122336a2be","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_first/search_first.styl","hash":"4eedde6a3806741a450de0aeffa5a100d9c2d408","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/index.styl","hash":"b02f576a0e909e01180e3996c3965e06a681f21b","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/aplayer.js","hash":"caa3621d74f24a00357e4d4ce3c90436c799d4e0","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/parallax.js","hash":"ac6b9b60ff4a739649882723f653896a73a89ec5","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/rightMenu.js","hash":"cb2f17ab10127065f7b9f5f87a49921d25b287e1","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/rightMenus.js","hash":"c45c58ab6597ffd8b5de70032c07dcd37836086f","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/search/hexo.js","hash":"dadfa36cd6c42aa6caf072fac7413fcf4de36cbd","modified":1659422188958},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/_ctrl/cdnCtrl.ejs","hash":"81461c1e29e342c3e16902d50785c987901ebe45","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_partial/scripts/_ctrl/coverCtrl.ejs","hash":"d99909694b96f78c48b3433fb8c6d70cc8f92e6e","modified":1659422188802},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/artitalk/index.ejs","hash":"e1e58a3403edd605231256dbc6dfed2840d3c5c1","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/bbtalk/index.ejs","hash":"0637551061ebfa965304f6bccad02589d36e03ad","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/fcircle/index.ejs","hash":"6b049a631b22be18417b3a9aef3b5881b30f4581","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/gitter/index.ejs","hash":"b6e00d7d8a3201e219456dca6572518baae26dcf","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/indent/index.ejs","hash":"7d112cde9b8d1785d8c541cde94361e0bfc60f30","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/katex/index.ejs","hash":"bda18a99909a011096cc9a21b253eb757603f4f0","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/mathjax/index.ejs","hash":"8532590d2c82b1dfb8a6dcaae57d4465893ac9e6","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/_page_plugins/snackbar/index.ejs","hash":"8d355f4f1552ffbd5099b7dea7954e6cb415a83b","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/chat/gitter/script.ejs","hash":"2a9780cb228944d671f959610aea710e6db6bac0","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/chat/tidio/script.ejs","hash":"36dd36c2a4ade5f873978b554033115908959a29","modified":1659422188817},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/artalk/script.ejs","hash":"9c607d5588537875f9c23ce46b7b031e78b95ff4","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/beaudar/script.ejs","hash":"e41ebffd14a156ece266877f4cc94e4931b3e95e","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/discuss/script.ejs","hash":"a739252d569ee389ec80e706435142f7dbb56cd5","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/disqus/script.ejs","hash":"5bc7f960cd0ec2a72cc150d73b004a8d0836c6ec","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/disqusjs/script.ejs","hash":"0da595e62782e64d6cdf67f285c576ad2d4ed653","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/giscus/script.ejs","hash":"7b845e839a4c03c700b6cf13590218d3e2b533b0","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/gitalk/script.ejs","hash":"ba4922e0f07c4bb5a1c8e233d5f88130dc6f73bc","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/hashover/script.ejs","hash":"4410ff1f7dd6aa48b12ddec49bdeb177e85b1f53","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/isso/script.ejs","hash":"dfbff9b81ce537a7da0ab1cc95480ebc4cb4cffa","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/livere/script.ejs","hash":"ab7aa8ab3b8ca510ef7e2f47fb23a4f9a2701979","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/twikoo/script.ejs","hash":"fa612a479809aa5052344a79c7afc638e8e79211","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/utterances/script.ejs","hash":"844eef0906a67fa8d42a331578e5538e33521aef","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/vssue/script.ejs","hash":"a29b1e96e939f3e8ebd1a25b296d5b27a3384d95","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/waline/script.ejs","hash":"a5df6ebc1eed0b23344eb72a39d4033e4fd3519f","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/comments/z-custom/script.ejs","hash":"9c9c19d0de11ff183ffea60910681d9e91c13f9d","modified":1659422188833},{"_id":"themes/volantis-tweaked/layout/_plugins/highlight/highlightjs/script.ejs","hash":"662e4e3b6c911a6fdffb2c34d012f8b6f70af31f","modified":1659422188848},{"_id":"themes/volantis-tweaked/layout/_plugins/highlight/prismjs/script.ejs","hash":"67e3d498c2d157f6828a1b8165580b542bf8affa","modified":1659422188848},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/blogposting.js","hash":"9d3a9091b97fcea1bde3b61425bdd3c65f5368b7","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/breadcrumblist.js","hash":"5cb20b6b04f018a6b5eab07c4759e743d28e050f","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/config.js","hash":"f76ce54f0a2d1b951491379afebabf3590c47642","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/index.js","hash":"525bbb3e0eeff380ff23a28d81797ef06a53bd08","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/organization.js","hash":"21b509275f7d43b0f95bb122468d6f301ff7b76e","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/person.js","hash":"d19975f00233c9b7625020fdbb6142128098a10e","modified":1659422188880},{"_id":"themes/volantis-tweaked/scripts/helpers/structured-data/lib/website.js","hash":"d1e92abc94eaa7a141744e07b00280078b750d25","modified":1659422188880},{"_id":"themes/volantis-tweaked/source/css/_style/_base/base.styl","hash":"af90d8a3cee62ef41bb141602472362c6ac1ae07","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_base/fontfamily_async.styl","hash":"7b6f2da48a225b3d836d7b2e5dfa90fa18dc3174","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/archive.styl","hash":"93a0846f1d65d66950403aba90ed5a8b5c8a9884","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/article.styl","hash":"babc146cbb87951544dc915b00692956a97d6c1e","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/footer.styl","hash":"5146a149d97dfaa88ae4bf819b60bab2f8d92a53","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/friends-simpleuser.styl","hash":"3d8e963fd1c24668fc1df078c619c4126f6a8a93","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/friends-traditional.styl","hash":"c5a3d30071b3208bd6af2b11df94e729b0537ea2","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/img.styl","hash":"7f733971a7862fc5764a953ae4f8e17c171ff1b6","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/loading.styl","hash":"c6757684fa37ced88e181b91c873644d1bde591d","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/main.styl","hash":"756145b5e4afe9ff6b8bee1e1b909d87a1be6cb6","modified":1659452606546},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/main.styl~","hash":"b37d2cccf2ed0cb85f5fcf590603d9cbd4f59895","modified":1659452446857},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/md.styl","hash":"141ecd997df05b2c1ae9e2f19f78ea31a1c78ff3","modified":1659516403950},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/md.styl~","hash":"7294b93fc491f196bda7b16442108542c8f8d676","modified":1659516175931},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/pagination.styl","hash":"d727004c3bbe16ace26bfcd45dd7b2f1202acec4","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/posts.styl","hash":"df0c63cce7e7e2e7415d6efd0710cac37573389d","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/search.styl","hash":"411e32f7346e7f742b1e0078e641e8b5df875faf","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/sidebar.styl","hash":"810feced0a40373d012f47a04d62ef85cb5cdb63","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/snackbar.styl","hash":"c3137362a2615159565477cab19afb1fc2d22cbf","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/toc.styl","hash":"c22db26a72dff5d7c73171f22a66231550d93e09","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_layout/video.styl","hash":"94bdeb9f28ba503a7a3fbd1148bc349983c17818","modified":1659422188911},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/aplayer.styl","hash":"5babeff5defa56e7d8db229ae4605f19bef9cd61","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/cursor.styl","hash":"ba39aaa74ff3c20a6d13c2856a0ccbd0c111f8e5","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/fontcolor.styl","hash":"de8c4f209c118c4b391223d46c2d662332cadaa1","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/gitalk.styl","hash":"17938fd65f7996c71e382934553af9fdee6a0e18","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/index.styl","hash":"30e8ce417052487f6a08ab8c9f88a6259a958c2f","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/mathjax.styl","hash":"95b0c51b678bc3ecc607bcf52d97b9634931ccba","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/message.styl","hash":"32eaf66de2f82e4c364b9244c5eef6380ec00bb4","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/pjaxanimate.styl","hash":"9664f37f2632e17c2d6bd93eb587d4df9aefa265","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/Readme.md","hash":"4840c72bf8ff1cdf2e16c8bc10a2410246946090","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/btns.styl","hash":"525919d04929c2c849f3aae587ecc6a004b05e86","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/checkbox.styl","hash":"ae7ae8a3377525396a9163d32ca76c11647d877d","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/dropmenu.styl","hash":"469d3458db6531b1283768bbae30f283110d1726","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/fancybox.styl","hash":"671f43ec7ee5b98227ce60e4b564eee5281f92ea","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/folding.styl","hash":"40fe5c009ad79325b1ad8c88b6d146682035348c","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/frame.styl","hash":"0f6230d77f22f0969d15d092b3d973c08d2219cc","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/ghcard.styl","hash":"3a6fd480b244c76ac670b418e461c0f77bd9f4d4","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/friends.styl","hash":"b76cf16571ac2099a39fe35a238e4d735b4115e1","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/image.styl","hash":"842f58a4c464d5ec59038cc923dbce1dd432362b","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/link.styl","hash":"870a0d50082116adffe385d7695e28795542aa23","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/media.styl","hash":"03c9942ed8560b923ac3535e7e80396d4a92df04","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/note.styl","hash":"959a9fe09cf9d0c29de76d05d6123c337a259ab5","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/span.styl","hash":"cdda513cbc9d95e9311a0a52c06ae7d1d250a769","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/sites.styl","hash":"f20f37b20ca803db2981e8931d70f0dd78bca30e","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/swiper.styl","hash":"819385594f1825e26074ade900835a3f4031fe42","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/table.styl","hash":"84abe90bc0b505d35d8e702337fcbe5da6ee1217","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/tabs.styl","hash":"5cb4366b6ed139c952b846357e9d077b5c1b9c66","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/tag.json","hash":"a453d6ed0ed5de78364a8356703d250bb9cf43d6","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/text.styl","hash":"7231d9c0e1e05a3ab7094d6ff4d1c37d97a1e8af","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_tag-plugins/timeline.styl","hash":"14b86f0ad0098e679d66dae7d997802c77a27141","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/tags/contributors.js","hash":"b3350dc951f34477cb1143cf11a53661fd0e551a","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/tags/sites.js","hash":"dff484d3f64681e725868fd62613a3658660992c","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/js/plugins/tags/friends.js","hash":"9643d9d9ef4a11ab690bd7755a92bb56fc392ed0","modified":1659422188942},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_dark/dark_plugins.styl","hash":"0716f7c3af19c8911398526c734580b13f465fd5","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/index.styl","hash":"c62f0c706c08ec7a830f7ede2d04996ccc721e90","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_dark/dark_async.styl","hash":"643453859ba9509ee1bf2487035f08e4dbfb2b48","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_rightmenu/reading.styl","hash":"18cefb0667407e9dd15fde96c5577fc7ba0ecaf3","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_rightmenu/rightmenu.styl","hash":"3c55aa5549e505d87652e418dae345259add247b","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/highlightjs/clipboard.styl","hash":"f2b95f90b15ad610b6f2668316233bb2e4a65cf0","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/highlightjs/color.styl","hash":"7ba7e4aeacc31b12c5fc57317d902b3742aa6c38","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/highlightjs/index.styl","hash":"661f36ee05c75465a046fcdca091f406c96cb37d","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/highlightjs/language.styl","hash":"aa98bc49ba55119529c47175eaa3e87f44eae26c","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/prismjs/clipboard.styl","hash":"6dcea4963642a693869411ad40df703a716790d6","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/prismjs/index.styl","hash":"273196519db0ac4e223458e002e2ad0536213ba5","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_style/_plugins/_highlight/prismjs/language.styl","hash":"7773ed6757f1cc1f4ce4d8c991d721a5d49a8a92","modified":1659422188927},{"_id":"themes/volantis-tweaked/source/css/_first/.base_first.styl.swp","hash":"3918cdc81b3d2da63ccdbf5b59d5d0cf725e1f66","modified":1659531703446},{"_id":"themes/volantis-tweaked/source/js/.app.js.swp","hash":"7636c4f8df49892d126dbc54013cc6da143cdd0a","modified":1659539041652}],"Category":[{"name":"指南与教程","_id":"cl6dfekwq0003egtg84h5b7n9"}],"Data":[],"Page":[{"title":"事件合集","type":"categories","layout":"category","index":true,"_content":"","source":"categories/index.md","raw":"---\ntitle: 事件合集\ntype: categories\nlayout: category\nindex: true\n---\n","date":"2022-08-02T07:38:20.423Z","updated":"2022-08-02T07:38:20.423Z","path":"categories/index.html","comments":1,"_id":"cl6dfekwf0000egtg6q24d22w","content":"\n","site":{"data":{}},"excerpt":"","more":""},{"title":"关于此地","index":true,"comments":0,"_content":"\n## 故事背后的故事\n\n你好，万维网上的旅行者。\n\n或许是幸运或努力的因素，你来到了这里：iAlicornio 小站。\n\n这是一座朴素装修的静态页面，空间很小，交通也不发达，的确是很龌龊的地方，但到处都打扫得还挺干净，没有到处乱飞的 404、运行错误的 JS 或者剥落的 CSS。\n\n小站内空无一人，只是在靠墙的地方放置着几台自动售货机。再向里走是一座小型雕塑，雕刻的是一头公牛，在烛光的影响下，它看上去像是活了一般。雕塑旁边的一小块木牌吸引了你的注意：\n\n> 谨以此献给 Richard Stallman、Linus Torvalds、Zoë Kooyman 和无数为解放所有软件而奋斗的人们。这片大地并不美好，但你我一起，或许能让它没那么坏。\n\n另有一块大号的石板，上面刻着：\n\n> iAlicornio 建站于 2022/08/02，系 Alicorn Union MC 办事处。\n> \n> 我们创作有质量的文章和软件，我们将为之不懈奋斗。\n> \n> 本站点由 Hexo 完成建造，Volantis Tweaked 进行装修，Cloudflare 与 jsDelivr 铺设道路，GitHub 长期维护。我们要感谢这些公司、组织或项目的强力驱动。同时亦要感谢在文章编撰过程中提供建议的合作伙伴。\n\n## 联系本站\n\n- 交流学习：[Discord 群组](https://discord.gg/csGgQgXhZk)\n\n- 私人访问：[邮箱](mailto:Twilight_Princess_Sparkle@outlook.com)\n\n- 侵权投诉：[由此直达](https://github.com/Andy-K-Sparklight/iAlicornio/issues)\n\n## 著作权声明\n\n我们支持原创，我们希望你永远都不会需要用到以下内容。不过，以防万一，我们仍然在此进行著作权的声明。我们知道没有人喜欢长长的声明文字，所以让我们快速完成这个过程。\n\n如果想知道本站任何内容的许可，按以下流程：\n\n- 对于文本内容：\n  \n  1. 如果已经注明为转载，请前往原文地址查看许可。\n  \n  2. 否则，如果页面任何位置以任何形式标明了许可，则适用此许可。   \n  \n  3. 否则，它们使用 [CC0 1.0 通用 公共领域贡献](https://creativecommons.org/publicdomain/zero/1.0/) 进行许可。\n\n- 对于图像内容：\n  \n  1. 若注明图片来源，请前往来源地址查看许可。\n  \n  2. 否则，它们使用 [CC0 1.0 通用 公共领域贡献](https://creativecommons.org/publicdomain/zero/1.0/) 进行许可。\n\n- 对于本站自身代码：\n  \n  1. 本站源代码中包含其它来源的文件，它们适用各自声明的许可。\n  \n  2. 本站构建产物中的文件，若有额外注明，适用注明的许可。\n  \n  3. 否则，它们使用 [GNU 通用公共许可证 第三版](https://www.gnu.org/licenses/gpl-3.0.html) 或者其以后的版本许可。\n\n- 对于文章所述内容，包括但不限于软件、代码片段等：\n  \n  1. 若注明许可，则适用注明的许可。\n  \n  2. 否则，请前往它们的来源查看许可。\n\n- 若发现站内存在侵权内容，请联系我们，我们将尽快删除。\n\n以上内容仅为方便访客了解著作权规则而编写，并非任何形式的保证。凡存在争议的部分，最终解释权均归本站所有。有关法律方面的问题，建议您咨询律师或其他专业人士。\n","source":"about/index.md","raw":"---\ntitle: 关于此地\nindex: true\ncomments: false\n---\n\n## 故事背后的故事\n\n你好，万维网上的旅行者。\n\n或许是幸运或努力的因素，你来到了这里：iAlicornio 小站。\n\n这是一座朴素装修的静态页面，空间很小，交通也不发达，的确是很龌龊的地方，但到处都打扫得还挺干净，没有到处乱飞的 404、运行错误的 JS 或者剥落的 CSS。\n\n小站内空无一人，只是在靠墙的地方放置着几台自动售货机。再向里走是一座小型雕塑，雕刻的是一头公牛，在烛光的影响下，它看上去像是活了一般。雕塑旁边的一小块木牌吸引了你的注意：\n\n> 谨以此献给 Richard Stallman、Linus Torvalds、Zoë Kooyman 和无数为解放所有软件而奋斗的人们。这片大地并不美好，但你我一起，或许能让它没那么坏。\n\n另有一块大号的石板，上面刻着：\n\n> iAlicornio 建站于 2022/08/02，系 Alicorn Union MC 办事处。\n> \n> 我们创作有质量的文章和软件，我们将为之不懈奋斗。\n> \n> 本站点由 Hexo 完成建造，Volantis Tweaked 进行装修，Cloudflare 与 jsDelivr 铺设道路，GitHub 长期维护。我们要感谢这些公司、组织或项目的强力驱动。同时亦要感谢在文章编撰过程中提供建议的合作伙伴。\n\n## 联系本站\n\n- 交流学习：[Discord 群组](https://discord.gg/csGgQgXhZk)\n\n- 私人访问：[邮箱](mailto:Twilight_Princess_Sparkle@outlook.com)\n\n- 侵权投诉：[由此直达](https://github.com/Andy-K-Sparklight/iAlicornio/issues)\n\n## 著作权声明\n\n我们支持原创，我们希望你永远都不会需要用到以下内容。不过，以防万一，我们仍然在此进行著作权的声明。我们知道没有人喜欢长长的声明文字，所以让我们快速完成这个过程。\n\n如果想知道本站任何内容的许可，按以下流程：\n\n- 对于文本内容：\n  \n  1. 如果已经注明为转载，请前往原文地址查看许可。\n  \n  2. 否则，如果页面任何位置以任何形式标明了许可，则适用此许可。   \n  \n  3. 否则，它们使用 [CC0 1.0 通用 公共领域贡献](https://creativecommons.org/publicdomain/zero/1.0/) 进行许可。\n\n- 对于图像内容：\n  \n  1. 若注明图片来源，请前往来源地址查看许可。\n  \n  2. 否则，它们使用 [CC0 1.0 通用 公共领域贡献](https://creativecommons.org/publicdomain/zero/1.0/) 进行许可。\n\n- 对于本站自身代码：\n  \n  1. 本站源代码中包含其它来源的文件，它们适用各自声明的许可。\n  \n  2. 本站构建产物中的文件，若有额外注明，适用注明的许可。\n  \n  3. 否则，它们使用 [GNU 通用公共许可证 第三版](https://www.gnu.org/licenses/gpl-3.0.html) 或者其以后的版本许可。\n\n- 对于文章所述内容，包括但不限于软件、代码片段等：\n  \n  1. 若注明许可，则适用注明的许可。\n  \n  2. 否则，请前往它们的来源查看许可。\n\n- 若发现站内存在侵权内容，请联系我们，我们将尽快删除。\n\n以上内容仅为方便访客了解著作权规则而编写，并非任何形式的保证。凡存在争议的部分，最终解释权均归本站所有。有关法律方面的问题，建议您咨询律师或其他专业人士。\n","date":"2022-08-03T03:20:32.139Z","updated":"2022-08-03T03:20:32.139Z","path":"about/index.html","layout":"page","_id":"cl6dfekwp0002egtg4ehkbrzh","content":"<div class=\"story post-story\"><h2 id=\"故事背后的故事\"><a href=\"#故事背后的故事\" class=\"headerlink\" title=\"故事背后的故事\"></a>故事背后的故事</h2><p>你好，万维网上的旅行者。</p>\n<p>或许是幸运或努力的因素，你来到了这里：iAlicornio 小站。</p>\n<p>这是一座朴素装修的静态页面，空间很小，交通也不发达，的确是很龌龊的地方，但到处都打扫得还挺干净，没有到处乱飞的 404、运行错误的 JS 或者剥落的 CSS。</p>\n<p>小站内空无一人，只是在靠墙的地方放置着几台自动售货机。再向里走是一座小型雕塑，雕刻的是一头公牛，在烛光的影响下，它看上去像是活了一般。雕塑旁边的一小块木牌吸引了你的注意：</p>\n<blockquote>\n<p>谨以此献给 Richard Stallman、Linus Torvalds、Zoë Kooyman 和无数为解放所有软件而奋斗的人们。这片大地并不美好，但你我一起，或许能让它没那么坏。</p>\n</blockquote>\n<p>另有一块大号的石板，上面刻着：</p>\n<blockquote>\n<p>iAlicornio 建站于 2022&#x2F;08&#x2F;02，系 Alicorn Union MC 办事处。</p>\n<p>我们创作有质量的文章和软件，我们将为之不懈奋斗。</p>\n<p>本站点由 Hexo 完成建造，Volantis Tweaked 进行装修，Cloudflare 与 jsDelivr 铺设道路，GitHub 长期维护。我们要感谢这些公司、组织或项目的强力驱动。同时亦要感谢在文章编撰过程中提供建议的合作伙伴。</p>\n</blockquote>\n</div><div class=\"story post-story\"><h2 id=\"联系本站\"><a href=\"#联系本站\" class=\"headerlink\" title=\"联系本站\"></a>联系本站</h2><ul>\n<li><p>交流学习：<a href=\"https://discord.gg/csGgQgXhZk\">Discord 群组</a></p>\n</li>\n<li><p>私人访问：<a href=\"mailto:Twilight_Princess_Sparkle@outlook.com\">邮箱</a></p>\n</li>\n<li><p>侵权投诉：<a href=\"https://github.com/Andy-K-Sparklight/iAlicornio/issues\">由此直达</a></p>\n</li>\n</ul>\n</div><div class=\"story post-story\"><h2 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h2><p>我们支持原创，我们希望你永远都不会需要用到以下内容。不过，以防万一，我们仍然在此进行著作权的声明。我们知道没有人喜欢长长的声明文字，所以让我们快速完成这个过程。</p>\n<p>如果想知道本站任何内容的许可，按以下流程：</p>\n<ul>\n<li><p>对于文本内容：</p>\n<ol>\n<li><p>如果已经注明为转载，请前往原文地址查看许可。</p>\n</li>\n<li><p>否则，如果页面任何位置以任何形式标明了许可，则适用此许可。   </p>\n</li>\n<li><p>否则，它们使用 <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0 1.0 通用 公共领域贡献</a> 进行许可。</p>\n</li>\n</ol>\n</li>\n<li><p>对于图像内容：</p>\n<ol>\n<li><p>若注明图片来源，请前往来源地址查看许可。</p>\n</li>\n<li><p>否则，它们使用 <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0 1.0 通用 公共领域贡献</a> 进行许可。</p>\n</li>\n</ol>\n</li>\n<li><p>对于本站自身代码：</p>\n<ol>\n<li><p>本站源代码中包含其它来源的文件，它们适用各自声明的许可。</p>\n</li>\n<li><p>本站构建产物中的文件，若有额外注明，适用注明的许可。</p>\n</li>\n<li><p>否则，它们使用 <a href=\"https://www.gnu.org/licenses/gpl-3.0.html\">GNU 通用公共许可证 第三版</a> 或者其以后的版本许可。</p>\n</li>\n</ol>\n</li>\n<li><p>对于文章所述内容，包括但不限于软件、代码片段等：</p>\n<ol>\n<li><p>若注明许可，则适用注明的许可。</p>\n</li>\n<li><p>否则，请前往它们的来源查看许可。</p>\n</li>\n</ol>\n</li>\n<li><p>若发现站内存在侵权内容，请联系我们，我们将尽快删除。</p>\n</li>\n</ul>\n<p>以上内容仅为方便访客了解著作权规则而编写，并非任何形式的保证。凡存在争议的部分，最终解释权均归本站所有。有关法律方面的问题，建议您咨询律师或其他专业人士。</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"故事背后的故事\"><a href=\"#故事背后的故事\" class=\"headerlink\" title=\"故事背后的故事\"></a>故事背后的故事</h2><p>你好，万维网上的旅行者。</p>\n<p>或许是幸运或努力的因素，你来到了这里：iAlicornio 小站。</p>\n<p>这是一座朴素装修的静态页面，空间很小，交通也不发达，的确是很龌龊的地方，但到处都打扫得还挺干净，没有到处乱飞的 404、运行错误的 JS 或者剥落的 CSS。</p>\n<p>小站内空无一人，只是在靠墙的地方放置着几台自动售货机。再向里走是一座小型雕塑，雕刻的是一头公牛，在烛光的影响下，它看上去像是活了一般。雕塑旁边的一小块木牌吸引了你的注意：</p>\n<blockquote>\n<p>谨以此献给 Richard Stallman、Linus Torvalds、Zoë Kooyman 和无数为解放所有软件而奋斗的人们。这片大地并不美好，但你我一起，或许能让它没那么坏。</p>\n</blockquote>\n<p>另有一块大号的石板，上面刻着：</p>\n<blockquote>\n<p>iAlicornio 建站于 2022&#x2F;08&#x2F;02，系 Alicorn Union MC 办事处。</p>\n<p>我们创作有质量的文章和软件，我们将为之不懈奋斗。</p>\n<p>本站点由 Hexo 完成建造，Volantis Tweaked 进行装修，Cloudflare 与 jsDelivr 铺设道路，GitHub 长期维护。我们要感谢这些公司、组织或项目的强力驱动。同时亦要感谢在文章编撰过程中提供建议的合作伙伴。</p>\n</blockquote>\n<h2 id=\"联系本站\"><a href=\"#联系本站\" class=\"headerlink\" title=\"联系本站\"></a>联系本站</h2><ul>\n<li><p>交流学习：<a href=\"https://discord.gg/csGgQgXhZk\">Discord 群组</a></p>\n</li>\n<li><p>私人访问：<a href=\"mailto:Twilight_Princess_Sparkle@outlook.com\">邮箱</a></p>\n</li>\n<li><p>侵权投诉：<a href=\"https://github.com/Andy-K-Sparklight/iAlicornio/issues\">由此直达</a></p>\n</li>\n</ul>\n<h2 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h2><p>我们支持原创，我们希望你永远都不会需要用到以下内容。不过，以防万一，我们仍然在此进行著作权的声明。我们知道没有人喜欢长长的声明文字，所以让我们快速完成这个过程。</p>\n<p>如果想知道本站任何内容的许可，按以下流程：</p>\n<ul>\n<li><p>对于文本内容：</p>\n<ol>\n<li><p>如果已经注明为转载，请前往原文地址查看许可。</p>\n</li>\n<li><p>否则，如果页面任何位置以任何形式标明了许可，则适用此许可。   </p>\n</li>\n<li><p>否则，它们使用 <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0 1.0 通用 公共领域贡献</a> 进行许可。</p>\n</li>\n</ol>\n</li>\n<li><p>对于图像内容：</p>\n<ol>\n<li><p>若注明图片来源，请前往来源地址查看许可。</p>\n</li>\n<li><p>否则，它们使用 <a href=\"https://creativecommons.org/publicdomain/zero/1.0/\">CC0 1.0 通用 公共领域贡献</a> 进行许可。</p>\n</li>\n</ol>\n</li>\n<li><p>对于本站自身代码：</p>\n<ol>\n<li><p>本站源代码中包含其它来源的文件，它们适用各自声明的许可。</p>\n</li>\n<li><p>本站构建产物中的文件，若有额外注明，适用注明的许可。</p>\n</li>\n<li><p>否则，它们使用 <a href=\"https://www.gnu.org/licenses/gpl-3.0.html\">GNU 通用公共许可证 第三版</a> 或者其以后的版本许可。</p>\n</li>\n</ol>\n</li>\n<li><p>对于文章所述内容，包括但不限于软件、代码片段等：</p>\n<ol>\n<li><p>若注明许可，则适用注明的许可。</p>\n</li>\n<li><p>否则，请前往它们的来源查看许可。</p>\n</li>\n</ol>\n</li>\n<li><p>若发现站内存在侵权内容，请联系我们，我们将尽快删除。</p>\n</li>\n</ul>\n<p>以上内容仅为方便访客了解著作权规则而编写，并非任何形式的保证。凡存在争议的部分，最终解释权均归本站所有。有关法律方面的问题，建议您咨询律师或其他专业人士。</p>\n"},{"title":"相关事件","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: 相关事件\nlayout: friends\n---\n","date":"2022-08-02T09:23:46.488Z","updated":"2022-08-02T07:43:18.847Z","path":"friends/index.html","comments":1,"_id":"cl6dfekws0004egtg9schfc6x","content":"\n","site":{"data":{}},"excerpt":"","more":""},{"title":"事件标记","type":"tags","layout":"tag","index":true,"_content":"","source":"tags/index.md","raw":"---\ntitle: 事件标记\ntype: tags\nlayout: tag\nindex: true\n---\n","date":"2022-08-02T07:37:55.967Z","updated":"2022-08-02T07:37:55.967Z","path":"tags/index.html","comments":1,"_id":"cl6dfekwt0005egtg8yah9avc","content":"\n","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Arch Linux 安装初级指南","date":"2022-08-02T16:00:00.000Z","description":"这是属于你的世界，我很荣幸为你敲开它的大门。","_content":"\n## 欢迎\n\n既然你已经来到这里，说明你想要获得一份纯净的 GNU/Linux，并且在万千选择中，挑中了你中意的那一个。这就是 Arch Linux，一个「注重简洁的发行版」。\n\n### 我们从一个问题开始\n\n> Arch Linux 这么难用，为什么还要用它？\n\nArch Linux 难用吗？**当然难**，我并不想骗你。\n\n如果按易用性来看，Debian，LinuxMint，CentOS，Ubuntu 都更好用，几个按钮就能解决的问题，多简单。\n\n可是似乎有一点不对……\n\n- 我为小巧精悍而来，我如何接受 Flatpak？\n\n- 我为软件自由而来，我如何同意 SnapCraft？\n\n- 我为安全可控而来，我如何理解自动更新？\n\n- 我为隐私秘密而来，我如何认可数据收集？\n\n如果所谓的易用性要以这些更为重要的东西为代价，那么这样得来的「好用」到底有什么价值？！\n\n……\n\n几乎所有的 GNU/Linux 发行版都或多或少包含着「预装」和「产品」的成分，而 Arch Linux 是为数不多拒绝这样做的发行版之一。\n\n我选择 Arch Linux，不是因为其看上去专业，也并非因为它更加完美，事实上，它比大多数发行版都要简单，甚至是简陋。\n\n**而我看重的，正是这份简陋背后的单纯。我们相信你也是如此。**\n\n### 开始之前\n\n欢迎来到 Arch Linux 的世界！你一定已经对 Arch 有所耳闻，作为被称为「邪」的 Linux 发行版，Arch 和其它的发行版很不一样，它没有好看的 GUI，没有方便的安装程序，但这并不能掩饰它独特的魅力：\n\n- 滚动式发行，一次安装即可。\n\n- 你能获得一套真正「纯净」的 GNU/Linux 操作系统。\n\n- 运行很快。\n\n- 无需配置即免疫大多数病毒。\n\n- 几乎不需要清理垃圾。\n\n- 自由且开放，虽然 AUR 中存在部分专有软件，但我们可以选择。\n\n- 非常好玩且有趣！（真的是这样！）\n\n- 由于只支持一种架构，反而避免了很多问题。\n\n- 拥有世界上最好的文档之一：[ArchWiki](https://wiki.archlinux.org/)。\n\n- 会真正显得你很酷。\n\n……诸如此类。\n\n### 注意事项\n\n在你能够开始你的旅途前，我们有一些需要说明的内容：\n\n- 本指南**不是面向新手的**。\n  \n  - Arch Linux 本身也不是面向新手的。\n  \n  - 你需要计算机基础知识，包括但不限于终端的基础概念和使用方法。你还得知道分区、UEFI、引导、BIOS 设置之类的是什么意思。\n  \n  - 你需要对 GNU/Linux 有最基本的了解，至少要知道有显示管理器，桌面环境这些概念（弄不清楚也没关系，但要知道有这么个东西）。\n  \n  - 需要不错的英语，或者不错的翻译姬（例如 [Google 翻译](https://translate.google.com) 以及它的 [国内版](https://translate.google.cn)），因为你会需要 ArchWiki 的帮助，而有些条目是没有翻译的。\n  \n  从头开始讲解以上内容会消耗大量的篇幅，在本站的其它地方你可以学习到上述内容的一部分。\n\n- 请合理使用本指南。\n  \n  - 本指南所述的方法不是唯一的安装方法，也并不一定适用所有机器，**请不要照抄命令**。对你机器造成的损害，我们爱莫能助。\n  \n  - 本指南所述介绍内容不是专业知识，出于便于理解的目的或表述的的需要，有些可能也并不准确。如有疑问，请参考权威资料获得更准确的解释。\n  \n  - 确保你已经获得计算机的使用权限，**不要在你朋友的电脑上做这些**（除非他们也很感兴趣）！当然，也不要在任何不属于你的电脑上这样做。\n  \n  - 确保你没有什么紧急任务需要使用电脑。安装过程耗时较长，且一旦开始就不能中断。\n\n### 有关双系统的建议\n\n首先要说明的一点是，我们建议**一台计算机只安装一套操作系统**。原因主要有：\n\n- 兼容性问题。例如 Microsoft 要求必须启用安全启动，而 Arch Linux 默认并不支持。如果不启用，Windows 11 的部分功能将无法使用，如果要启用，就需要对 Arch Linux 进行相当麻烦的配置。\n\n- 使用习惯问题。\n\n- 配置的时间成本远高于再买一台计算机的成本。\n\n- 当你会合理使用 VirtualBox 之类的软件后，你会发现一个硬盘上的 Windows 很多余。\n\n……等等。\n\n当然，更多 Windows 用户逐渐开始了解 GNU/Linux 和自由软件毕竟是件好事，如果我们不在这里提供安装方法，他们（或许还有你）可能就会放弃本可以获得的自由。基于这一点，本指南中也增补了双系统安装的一些说明。\n\n如果你的另一个系统根本不是 Windows……那就不会有这些顾虑，你可以按照单独安装的步骤进行安装。不过如果是 Hackintosh，小心不要更改硬件或者破坏启动区。\n\n### 约定\n\n本指南对一些文字有特殊的表示方法，我们在此先行约定。\n\n- 占位符 `<>`\n  \n  当你注意到这样的文字时：\n  \n  ```bash\n  echo <YourName>\n  ```\n  \n  你应当知道需要替换 `<YourName>` 为合适的值。注意，不是替换 `YourName`，而是 `<YourName>`。\n  \n  举个例子，假设你的名字是 `Annie`，那么：\n  \n  - 这样是正确的：`echo Annie`，而\n  \n  - 这样是错误的：~~`echo <Annie>`~~（没有替换 `<>`）\n  \n  - 这样是极其错误的：~~`echo <YourName>`~~（直接照抄）\n  \n  你还需要知道我们所说的东西的英文。例如，如果我们提到「选择的设备是 XXX」，你应该知道我们要替换的东西是 `<Device>`（而不是 `<Snake>` 或者 `<Monkey>` 之类的）。\n\n- 组合键\n  \n  我们使用 `K1 + K2` 来表示组合键，例如 `Ctrl + C`、`F12` 以及 `Shift + Alt + 5`。按数字键时，请确保按的是主键盘上的键（1~9 和 0 是排成一排的）。\n\n## 目标与材料\n\n### 目标\n\n虽然服务器使用 Arch Linux（以后简称 Arch）的例子并不少，但我们的目标是桌面操作系统，因此我们可以略微降低对性能的需求，转而寻求更好的体验，同时可以使用并不那么稳定的新技术。\n\n本指南会将这台 Arch 配置到「出厂」状态，不带任何个性化但至少能看得过去，并且能够完成后续的优化步骤。\n\n### 材料\n\n下述的是安装所需的设备。\n\n- 一台计算机，Arch 将安装在其上，它应当具有以下特性：\n  \n  - UEFI 引导启动。\n    \n    如果你希望安装双系统，原先的操作系统也应当由 UEFI 引导。\n    \n    Windows 11 及之后的版本不再支持 Legacy BIOS，所以以后 Legacy BIOS 会很快被淘汰。截至本文写作时，已经有相当多的机型不再支持 Legacy BIOS。\n  \n  - 至少 2 GiB 的 RAM，但建议有 4 GiB 以上。\n    \n    尽管 Arch 的运行只需极少的内存，但内存越大，缓存/缓冲运行得就越好，系统会越快。\n  \n  - 至少 25 GiB 的磁盘**未分配空间**，但建议有 50 GiB 以上。\n    \n    建议使用 SSD，会拥有更好的表现。\n    \n    请通过压缩或删除分区等方法来腾出这些空间，而不只是删除文件。\n    \n    确保这些空间是连续的，否则可能会引发极大的麻烦，如果你坚持，你需要在后面的分区部分自己处理这些问题。\n    \n    如果只安装 Arch，那么稍后可以在安装过程中直接清除磁盘，无需此步骤。\n  \n  - 较新的 x86 处理器，使用 Intel 或 AMD 皆可。\n    \n    **不要用其它的处理器**（除非你很了解它的技术细节），可能不支持或者发生崩溃。\n  \n  - 较新的图形卡，如果太老，Arch 仓库里可能没有对应的驱动。\n  \n  - 网络连接，可以使用无线网络，但有线网络更好。\n    \n    不要求是「流畅的」，因为 Arch 提供了足够多的镜像。\n  \n  - 已接通电源，或者至少足够几个小时的电量。\n    \n    操作系统安装完成前，电源管理系统不可用，电量消耗可能会变高。\n  \n  - 使用的是标准键盘布局（PC 键盘），对于其它键盘布局，请至 ArchWiki 寻找配置方法。\n  \n  - 如果要安装双系统（另一个是 Windows），请关闭 BitLocker。\n    \n    若不这样做，你将无法直接通过 GRUB 启动 Windows（需要特殊的配置）。\n\n- 另一台计算机（是的！），这用来浏览资料和处理一些应急情况：\n  \n  - 最好是另一台 Arch，但这种情况不常见。\n  \n  - 其次是另一台 GNU/Linux，有些软件包是可以直接复制的，它们也更容易解决安装时遇到的问题。\n  \n  - 网络连接，依然不需要是「流畅的」，因为 ArchWiki 在全球的速度都很快。\n  \n  - 如果没有计算机，请试着借一台，对配置并没有要求，但**不要使用移动设备**（它们不能完成诸如创建启动 USB 之类的操作）。\n\n- 至少 1 GiB 的移动存储设备，但是建议至少 4 GiB，这会给你更多的选择（稍后会说到）。\n  \n  最好使用通用串行总线设备（USB），不要用一些奇怪的存储设备，否则你可能会遇到大麻烦。（我知道没人用光量子存储仪，这里主要指的是有一些智能功能的存储设备）\n  \n  不建议通过硬盘直接安装，虽然这的确可以，但是 USB 会方便得多。\n  \n  Arch 对于 USB 的速度要求并不高，因为安装过程实质上是下载而非复制。\n  \n  设备中所有数据都将丢失，故应先备份。\n\n- 如果目标计算机**只有**特殊的输入装置（触摸屏，触摸板），则需要备用的鼠标（和键盘）。\n  \n  Arch 支持绝大多数的触摸板（希望你的也是如此），但如果不能，你会需要一个临时的鼠标。\n  \n  确保它们是有线的，无线可能存在驱动问题。\n\n## 安装过程\n\n下面要正式开始动手安装了。为防止你无意中做出些不该做的事，请仔细阅读以下内容。\n\n### 操作须知\n\n- 确保你充分理解指南的内容，并且知晓命令每个部分的作用。当你发现 无法读懂指南的内容时，请去补充一下基础知识。\n\n- 准确地键入命令，一个操作失误就可能摧毁整套系统。\n\n- 不要钻牛角尖或者照搬指南，要阅读系统给出的提示。尤其是如果系统显示 `Run command blahblah to do this` 之类的信息，你不应当忽略它。\n\n- 善用搜索引擎查找，遇事不决先 [Google](https://google.com/ncr)。（不要以无法访问作为理由，搜索引擎还有很多）\n\n- 当遇到意外时，除了使用搜索引擎，还要参考 [ArchWiki](https://wiki.archlinux.org/)。**无论如何都不要慌张**，先停止操作，然后想想哪里出了问题。记住：只要你还能控制系统，你就有挽回的机会。\n\n- 可以到各种社区提问，但是要记得遵守社区规则。本页面的最下方也有评论区，可以在那里寻求帮助。\n\n- 不要一边做安装系统这种事，一边听音乐或者玩游戏。否则当你迷失在指南中时，你会有很强的挫败感。\n\n请记住：\n\n<div style=\"font-size:2.5rem;text-align:center;width:100%;\">数据无价 谨慎操作</div>\n\n### 下载和验证镜像\n\n一切的一切，都要从这个 ISO 文件说起。\n\n你已经知道，空的磁盘不可能自己运行起来，必须要插入启动盘来启动。实际上启动盘也就是一个迷你版操作系统，Arch 也不例外。唯一比较特别的是，大多数安装程序都是从自己当中复制文件到磁盘，而 Arch 却不是，它是下载软件包并安装到指定的磁盘上。\n\n所有 GNU/Linux 操作系统的安装环境都可称作 LiveCD，后面我们还会见到这个名字。\n\n无论如何，现在我们需要 Arch 的安装程序。你可以从 Arch 官方的 [下载](https://archlinux.org/download/) 页面获得它的下载链接。\n\nArch 提供了 BT 和 HTTP 两种方式（NetBoot 基本上不能用），至于使用哪一个完全是个人喜好的问题。BT 种子在页面最上面，而 HTTP 下载在比较下面的位置，并且提供了一堆镜像。\n\n你需要下载的文件应当是 `archlinux-x86_64.iso`，中间可能会多出一个日期，但不会有多余的前后缀。把下载的文件重命名为这个名字，以便后面的命令处理。\n\n---\n\n获得镜像后请**务必进行完整性校验**，这是操作系统级的东西，不能容许哪怕一点出错。\n\n```bash\n# GNU/Linux\nsha1sum archlinux-x86_64.iso\nmd5sum archlinux-x86_64.iso\n# Windows\ncertutil -hashfile archlinux-x86_64.iso SHA1\ncertutil -hashfile archlinux-x86_64.iso MD5\n```\n\n如果不会使用终端，请试着学习一下，这并不困难。你不需要记住那些命令，只需要知道如何照着指南键入它们。你也可以使用一些具有图形界面的工具完成校验。\n\n确保输出的结果与 Arch 官网（一定要是官网啊）上的完全一致（在 HTTP 镜像列表之前，请仔细找一下）。使用两种校验方式，只是以防万一。\n\n如果校验结果不一致，尝试重新下载，如果文件看上去依然有问题，可换一个镜像，并将错误的镜像报告给 Arch 的维护者，以便他们排查问题。\n\n### 制作可启动介质\n\n#### GNU/Linux\n\n把 USB 插入电脑，执行：\n\n```bash\nsudo fdisk -l\nsudo dd if=archlinux-x86_64.iso of=/dev/<YourUSBDevice>\nsync\n```\n\n`fdisk` 的目的是找出你的 USB 对应的标识，通常是 `/dev/sdb` 或者 `/dev/sdc`（可以根据容量判断）。**请在确认这是你的 USB 之后再执行写入**，写入错误的磁盘会造成数据损毁。\n\n写入完成后，拔出 USB 插入目标计算机。\n\n#### Windows\n\n在 Windows 上，你可以使用 [Etcher](https://www.balena.io/etcher/) 完成这个过程，[Rufus](https://rufus.ie) 也可以，但**不可以使用 UltraISO**，可能导致启动错误。\n\n如果程序询问你引导和分区表类型，记得选择 UEFI 引导和 GPT 格式分区表。如果还询问你写入模式，选择 DD 模式。\n\n写入后 USB 将从系统中消失，但我们确信我们已经成功写入了镜像，这是正常的（Windows 还不能识别这种结构）。确认写入完成后，就可以拔出 USB 并插入目标计算机了。\n\n### 启动设置\n\n关闭你的目标机器（确保是充分的关闭，不是休眠或者挂起之类的），稍等片刻后启动，并设法进入 UEFI 设置：\n\n- 对于大多数笔记本电脑，按住或连续按下 `Esc` 按钮，并选择类似 `UEFI/BIOS Settings` 的选项（如果有）。\n\n- 对于大多数台式机，按住或连续按下 `Del` 按钮或 `F8` 按钮，如果不行，再试试 `Enter` 按钮，直到有办法进入 UEFI 设置。或者，如果知道主板型号，可以查询如何进入其 UEFI 设置。\n\n> 尽管这个程序的正确名称应该是 UEFI 选项，但一些地方并不区分它和 BIOS，所以查找资料时，请也试试 BIOS 这个名字。\n\n---\n\n对 UEFI 选项做如下调整：（标注「必须」的是一定要完成的，其它是可选的）\n\n- 关闭快速启动（Fast Boot）和**安全启动**（Secure Boot），后者尤其重要。（必须）\n  \n  *如果你使用了诸如 Windows Hello 的功能，请务必先完成安装，进行安全启动配置，并且能够正常启动 Arch 之后，重新打开安全启动，再启动 Windows。否则，你可能会吃苦头。*\n\n- 如果进行过超频，现在暂时将处理器电压和内存频率等调回原来的数值，以免影响后续步骤。\n\n- 启用 UEFI 引导，并将其设置为默认或优先。（必须）\n\n- 关闭 CSM 支持模块。\n  \n  *启用 CSM 当然也可以正常启动，然而 Linux 内核很容易被错误的模式加载，解决这个问题的根本方法就是彻底禁用 CSM。*\n\n- 将 USB 设备设置为第一启动项。（必须）\n\n- 校准时间。\n\n保存设置并重启，随后计算机会从 USB 启动。\n\n### 接入网络\n\nArch LiveCD 启动后会弹出一个菜单供你选择（启动哪一个），应当选择有 `archiso` 或者 `Arch Linux` 字样的（通常在菜单第一项），使用上下键选定，按回车确认。\n\n要经过几秒的加载（较慢的 USB 或处理器会需要十几秒），你才能看见 Arch LiveCD 环境的终端：\n\n```\nroot@archiso ~ #\n```\n\n要做的第一件事情是确认终端可以正常运行，键入以下内容并回车：\n\n```bash\nwhoami\n```\n\n应当输出 `root`。\n\n> 如果你从没使用过 GNU/Linux 终端，你可能不习惯，这里没有鼠标，也没有好看的图像，只有苍白的提示符，所有的操作需要键盘完成。不过事实上终端是很人性化的，你只需要正确输入命令。请坚持一下，我们最后的结果可不会是这样！\n\n---\n\n现在，如果你的设备可以连接有线网络， 那么将电缆插入网口，网络连接即自动完成。\n\n如果没有办法使用有线连接，运行：\n\n```bash\nrfkill unblock all\niwctl\n```\n\n你将会进入无线连接控制面板，这里同样没有好看的图像，只有一个提示符等待你的输入，但我们相信它完全可以满足我们的要求。现在输入：\n\n```bash\ndevice list\n```\n\n找到你的无线设备，通常应当包含 `wlan` 字样（而且通常是 `wlan0`），记下它的名字。\n\n*如果你好奇，那么我可以告诉你 `lo` 表示本机（本地环回接口），`eth`、`ens`、`eno`、`enp` 是不同类型的以太网卡（通常是有线）。*\n\n如果找到了不止一个无线网卡，请在下一步中都试试。\n\n---\n\n现在搜索网络：\n\n```bash\nstation <Adaptor> get-networks\n```\n\n将 `<Adaptor>` 替换成网卡的名字，例如 `wlan0`。请确保输入的命令正确。如果你输入了错误的命令，计算机会显示错误消息以示嘲讽。\n\n输出中会出现网卡所发现的周边网络，选择你认为合适的一个，记下名字，然后执行：\n\n```bash\nstation <Adaptor> connect <NetworkSSID>\n```\n\n类似的，把 `<NetworkSSID>` 替换为网络名即可。\n\n遗憾的是，`iwctl` 无法显示或使用非 ASCII 字符的 WLAN SSID（网络名）。如果你在使用个人热点，这可能是一个需要考虑的问题。\n\n*这并不是 `iwctl` 本身的缺陷，而是因为你现在的环境下还没有其它语言的输入法，也没有其它语言的字体及显示支持。*\n\n连接完毕后返回 Arch 终端：\n\n```bash\nexit\n```\n\n---\n\n测试连接是否正常：\n\n```bash\nping archlinux.org\n```\n\n希望你能得到 `64 bytes from xxx` 这样的输出，那么你的网络连接完全正常。\n\n如果看到 `Timeout`，请尝试 `ping` 另一个主机（例如 `ping 1.2.4.8`），如果依然超时，请检查一下路由器和网关，或者试着换一个网络。\n\n*有些主机无法进行 Ping 检测，这是正常的，因为 Ping 也可以作为攻击手段，部分主机为防御攻击而禁止了 Ping。*\n\n如果连接通畅，按 `Ctrl + C` 组合键中断 `ping` 进程，键入：\n\n```bash\nclear\n```\n\n以将屏幕清空。此后我们不会单独执行这条命令，但你可以在认为屏幕太乱的时候执行它。\n\n### 调整时间\n\n执行：\n\n```bash\nhwclock --systohc --utc\ntimedatectl set-ntp true\n```\n\n它们的执行需要几秒钟（联网对时），完成后运行：\n\n```bash\ntimedatectl status\n```\n\n确保输出时间是正确的。\n\n*如果时间相差几个小时也是没问题的，因为这是 UTC 时间，要考虑时区偏移的问题。*\n\n### 分区\n\n检查计算机上的磁盘：\n\n```bash\nfdisk -l\n```\n\n输出像是：\n\n```\nDisk /dev/sdb: 415.411 GiB, ...\n```\n\n而且可能不止一个。\n\n---\n\n如果上面的输出太乱，你也可以选择使用：\n\n```bash\nlsblk\n```\n\n它的输出更简单：\n\n```\nsdb                     disk\n|-- sdb1    888.88 G    part\n```\n\n`disk` 表示磁盘，`part` 表示磁盘下的分区。\n\n---\n\n你需要选择正确的用于安装的**磁盘**（不是分区），可以通过看容量来辨别。\n\n记住 `Disk` 后面的设备标识（`fdisk`）或者 `disk` 对应的磁盘（`lsblk`）。**不要看走眼**。如果在安装多个操作系统，这一点更加重要。\n\n通常要安装到 SSD 上（类似 `/dev/sda`），如果是机械硬盘，则可能是 `/dev/hda`，NVMe 闪存则是 `/dev/nvme0n1`，最后的那个字符可能会变化，但大体上看起来差不多。\n\n---\n\n确定你的磁盘后，执行以下命令开始分区：\n\n```bash\nfdisk /dev/<YourDisk>\n```\n\n`<YourDisk>` 自然应该换成磁盘名字，以后这类替换我们不再赘述。\n\n`fdisk` 随后会进入交互模式（就像 `iwctl`），现在来创建以下几个分区：\n\n- 512 MB 的 EFI 启动分区\n\n- 大约 4 GB 的交换分区\n\n- 其余所有空间的主要分区\n\n*实际上交换分区的大小可以自定，但不建议完全不设置（会增大内存压力），通常设置为内存大小和 4 GiB 中较小的那一个。此外，增大交换空间虽然不会拖累性能但毕竟会占用空间，如果拿不定注意，可以暂时不分配，稍后可以创建交换文件来解决这个问题。*\n\nEFI 启动区的分配则需要考虑更多：\n\n- 如果你只安装一套操作系统，则必须分配。\n\n- 如果先前计算机上已经存在 GNU/Linux 或类似操作系统，不必重新分配（如果你知道这个分区在哪里），可以直接使用。\n\n- 如果先前计算机上安装着 Windows，则应当重新分配，因为 Windows 默认 EFI 分区可能不足以存储启动信息。\n\n*高级用户可能会为 `/home` 或者 `/etc` 等创建单独的分区，这样以后当系统重新安装时，可以保留个人文件和设置，如果有兴趣可以尝试。*\n\n---\n\n确定目标后开始行动：\n\n1. 如果你要**清除整个磁盘并安装**，则首先完成这个过程，否则请跳过这一步：\n   \n   1. 键入 `d`，删除分区。\n   \n   2. 如果有多个分区，`fdisk` 会询问要删除哪一个，键入 `1`。\n   \n   3. 重复以上过程，直到所有分区被删除。\n   \n   4. 键入 `g`，创建新的 GPT 分区表。\n\n2. 键入 `n` 新建分区。\n\n3. 询问分区号的时候，按回车默认，但要记住它。（空磁盘会是 `1`，已有分区的磁盘会更大）\n\n4. 询问第一个扇区的时候，按回车默认。\n\n5. 询问最后一个扇区的时候，键入 `+512M`，按回车确认。`fdisk` 就会为你创建一个 512 MB 大小的分区。\n\n6. 键入 `t` 变更分区类型，通常会自动选择刚刚创建的分区，如果没有，键入刚刚记下的分区号。（现在也不要忘掉，等会会用到）\n\n7. 键入 `1`，设定为「EFI 启动分区」（EFI System）。\n\n8. 重复 2~7，再建立一个 4 GB（或者其它你喜欢的大小）的交换分区（`+4GB`），不过这次要键入 `19` 设定为「交换分区」（Linux Swap，这个数字可以通过键入 `t` 再键入 `L` 来获得）。\n\n9. 重复 2~7，再建立最后一个分区，输入大小时直接按回车，即默认选择剩余的全部空间。不需要更改分区类型（默认是 Linux 文件系统）。\n\n10. **检查**，这很重要。键入 `l` 并仔细查看输出，检查分区是否正确。如果需要帮助，可以键入 `m`。\n\n11. 确认无误后，键入 `w`，修改被写入磁盘。如果你觉得做错了，键入 `q` 放弃修改，然后再试一次。\n\n*如果你真的很怕麻烦，不妨试试 `cfdisk`，它更加友好。不过对于有经验的用户，命令行会更快。*\n\n### 挂载\n\n> **挂载点**\n> \n> 稍微介绍一下挂载点，这是 Linux 的一大特色机制。\n> \n> 通常在 Windows 上，**磁盘是固定的，文件被存储在磁盘上**。这很符合我们的直观感受，没错吧？\n> \n> 现在在 Linux 中，我们必须改变这一想法，也就是，**文件是固定的，磁盘为文件提供空间**。\n> \n> 请花几分钟理解一下这个概念。\n> \n> 在 Linux 中，所有的文件路径都从 `/` 开始，这也就是所说的根目录，`/` 下设有 `etc`、`bin`、`usr`、`home` 等多个文件夹，这些文件夹可以被（物理上）放在一个分区上，也可以每个拥有自己的分区，应用程序无需关心这些，只需要提供路径即可访问文件，而具体的组织方式是由 `fstab` 等组件完成的。\n> \n> 举个简单的例子，如果将磁盘 A 挂载到 `/`，将磁盘 B 挂载到 `/home`，那么：\n> \n> - 文件 `/usr/bin/bash` 将被存储在磁盘 A 的某个位置\n> \n> - 文件 `/home/rarity/a.out` 将被存储在磁盘 B 的某个位置\n> \n> - 如果移除（卸载）磁盘 B，`/home` 仍然存在，但会变为空文件夹（或者它原先的内容），此时如果向其中写入文件，数据将被存储至磁盘 A。\n> \n> - 如果现在将磁盘 B 重新挂载到 `/home/ddd`，那么 `a.out` 的路径会变为：`/home/ddd/rarity/a.out`。\n> \n> - 从磁盘 B 的角度来看就很明白：文件实质上始终是 `/rarity/a.out`，之所以路径发生了变化，是因为挂载点不同，路径的计算起点不一样。\n> \n> 很快你就会发现这种方式比盘符简单灵活多了，因为很多命令可以无脑执行而根本不需要考虑盘符。\n\n下面挂载磁盘，一个磁盘只有在被挂载后才能通过文件系统进行访问。\n\n执行：\n\n```bash\nlsblk\n```\n\n找到你的磁盘（刚刚 `fdisk` 完成的），如果这么快就忘记了，可以根据容量判断。\n\n接下来找到你的分区（EFI 启动区，交换分区，主分区），可以根据容量判断，也可以根据分区号识别。例如，`/dev/sdb` 上分区号为 `3` 的分区被记录为 `/dev/sdb3`。\n\n*如果是 NVMe，则中间会多一个字母 `p`，例如 `nvme0n1p3` 而不是 `nvme0n13`，后者看上去就不对，请想想为什么。*\n\n然后创建挂载点，因为挂载点本质上是目录，所以这样做：\n\n```bash\nmkdir -p /mnt/home\nmkdir /mnt/boot\n```\n\n这两步创建了挂载点 `/mnt`，`/mnt/home`，`/mnt/boot`（`-p` 表示同时创建父目录）。\n\n*也许你会问，为什么需要这样一个 `/mnt` 呢？这其实就是很巧妙的地方：*\n\n> **`/mnt` 是什么？**\n> \n> 首先考虑我们现在在哪里，这是 Linux 中很重要的一个概念。\n> \n> 现在我们位于 Arch 的安装盘中，也就是说，现在的 `/` 是你的 **USB** 磁盘，而并非日后操作系统将要运行的，计算机里面的那个磁盘。\n> \n> 现在要做的是将几个分区挂载到 `/mnt` 和它的子目录，这样二者得到「对齐」，此后对 `/mnt` 内目录结构的修改，将被写入到计算机上的磁盘。\n> \n> 下一次从硬盘启动的时候，Arch 会将**计算机上磁盘的根目录作为 `/`**，这样原来的 `/mnt/home` 现在就变为 `/home`。（想想上面刚刚介绍的原理，磁盘实际上只存储了 `/mnt` 里面的东西）\n> \n> 看看，这就是 Linux 解决这种问题的巧妙方法。如果在 Windows 上想这样做，那是要费不少劲的。\n> \n> 我们只需要把一个系统安装到 `/mnt` 里面，然后切换根磁盘，就可以使用这个系统！这个方式有点像把树的一根枝条剪下来插在土里又长成一棵新的树一样。只要理解了，就会发现十分方便，而且由于不涉及写入当前正在运行系统的磁盘，所以不会产生半路崩溃之类的问题。\n> \n> 至于叫作 `/mnt` 并不是硬性要求，只是习惯上的命名。\n\n---\n\n挂载的分区是「生的」，为了使用它，必须格式化分区：\n\n```bash\nmkfs.f2fs /dev/<MainPart>\n```\n\n这里的占位符请替换为**主分区**（除了 EFI 和交换的那一个）。此命令用于格式化分区为 F2FS 格式，如果你听说过 EXT4，并且想用，只需要换成 `mkfs.ext4` 就行了。当然，你还可以选择 `btrfs`、`xfs` 等，具体区别这里就不介绍了。\n\n挂载：\n\n```bash\nmount /dev/<MainPart> /mnt\n```\n\n这样此分区就和 `/mnt` 绑定。\n\n使用类似的方法挂载 EFI 分区（512 MB 大小的那个）：\n\n```bash\nmkfs.vfat -F32 /dev/<EFIPart>\nmount /dev/<EFIPart> /mnt/boot\n```\n\n注意到这里实际上创建了 FAT32 文件系统，这是出于兼容性的考虑。\n\n交换分区的创建有些不一样：\n\n```bash\nmkswap /dev/<SwapPart>\nswapon /dev/<SwapPart>\n```\n\n整个过程一气呵成，但依然要注意不要输入错误的分区，否则当数据损毁后，你会十分沮丧。\n\n现在来看看我们已经做了什么：\n\n```bash\nlsblk\n```\n\n观察输出，现在应该像是：\n\n```\nsdb                   disk\n|-- sdb1    512.0M    part    /mnt/boot\n|-- sdb2      4.0G    part    [SWAP]\n|-- sdb3    114.5G    part    /mnt\n```\n\n分区的右边多出了挂载点标记。\n\n如果一切都正确，那么我们可以继续，如果看上去不对，那就深吸一口气，然后检查哪里出了问题。\n\n### 安装基本软件包\n\n一个操作系统总是由很多软件构成的，因此并没有所谓的「操作系统安装过程」，本质上，就是要安装和配置一堆软件包而已（当然有点太多了）。\n\n现在我们已经为新的 Arch 准备了空间，然而 `/mnt` 事实上还是空的，里面什么都没有，就此启动系统，肯定不成功。这也就是你手里的安装盘的作用之二（之一是启动系统）。所以，我们来安装 Arch 的基本软件包。\n\n执行以下命令：\n\n```bash\nreflector --country <Country> --latest 5 --sort rate --save /etc/pacman.d/mirrorlist \n```\n\n这个命令获取位于指定国家的五个最近更新的软件源服务器，且对它们进行按速率排序。至于什么是软件源，我们马上介绍。\n\n`<Country>` 设置为你所在的国家就行了（只是举例，中国大陆为 `China`，法国为 `France`，当然要是你坚持写 `Antarctica`，也没有人拦着你）。存在空格的名字，须在两边加上引号，例如 `\"United Kingdom\"`，否则会引发错误。\n\n这个命令的执行需要一分钟左右，所以请耐心等一下。\n\n---\n\n上一条命令完成后运行：\n\n```bash\npacman -Syy\n```\n\n此命令更新软件源列表。\n\n你可以把软件源想象成应用市场，但有一点点区别，因为应用市场是在需要时通过网络取得软件列表的，软件源则相反，软件列表被下载到电脑上，要用时直接查找就行了，所以在安装新的软件前，必须更新软件源以知道现在仓库中都提供哪些版本的软件。\n\n更新密钥环：\n\n```bash\npacman -Sy archlinux-keyring\n```\n\n这条命令更新 Arch 仓库维护者的密钥。\n\n每个软件包在 Arch 上传时均经过签名确认完整性，`pacman` 会在下载软件后验证签名，确保文件没有被篡改（不是怕镜像站坑你，是为了避免在传输过程中出现的随机错误）。\n\n更新这些密钥后，`pacman` 才能处理新的软件包。\n\n> **包管理器与 `pacman`**\n> \n> 你或许对包管理器不陌生，`npm`、`apt`、`nuget`、`pip`、`gem`、`yum`、`dnf`、`cargo`、`mvn` 等等都是各种各样的包管理器，这些里面几乎肯定有几个是你见过的。包管理器负责下载、安装、配置、卸载软件，解决依赖关系这样的工作。\n> \n> 在 Windows 上你或许没有这样的感受，这是因为大多数软件都把它自己的依赖打包了起来，随软件一起附上，带来的唯一问题就是庞大的体积。\n> \n> 在 GNU/Linux 上的软件都很小，而且你可以依赖仓库里任何你想要的软件包，包管理器确保你的软件在用户机器上具有合适的环境。\n> \n> 这种机制不仅方便软件的更新，也节约了不少空间。想想你电脑里的数百个乃至数千个 `vcruntime114514.dll`，真是好可怕——当然，举个例子。\n> \n> `pacman`~~（怕充满）~~是 Arch 的包管理器，负责从 Arch 官方仓库下载和安装软件包。你当然可以为你的 Arch 选配 `apt` 或者 `yum`，只要处理得当都没问题。但 `pacman` 是 Arch 官方使用的，出了问题虽然不包退换，却更容易得到帮助。\n\n---\n\n现在安装基本的软件包：\n\n```bash\npacstrap /mnt base base-devel linux linux-firmware nano\n```\n\n`base` 是 Arch 的核心部分，`base-devel` 是基本软件包组，`linux` 是内核，`linux-firmware` 是固件支持程序，`nano` 是文本编辑器，仅此而已。\n\n如果主分区选择了 EXT4 文件系统，此处还必须安装 `e2fsprogs` 以支持它，简单将其添加在命令的最后面就行了。\n\n`pacstrap` 能做一系列工作配置这些软件包（组），自然，使用 `pacman` 一个个来也是可以的，不过是会多一个损坏的键盘和一些折断的手指。\n\n这个过程需要几分钟，你可以去玩一会你喜欢的游戏。\n\n### 生成分区挂载表\n\n还记得刚刚我们执行了一些 `mount` 命令吗？Arch 是不知道要如何挂载那几个分区的，因此，即使现在它们还处于挂载状态，但下一次启动时，它们并不会自动挂载，也就没办法进行读写。\n\n我们必须对 `fstab` 进行设定，它位于 `/etc/fstab`，这个表告诉 Arch 如何挂载各分区。以往这个设定是很麻烦的，要查询各个分区的 UUID，然后设定合适的模式，不仅繁琐，还很容易出错。现在随着自动化的进展，这个过程可以自动完成：\n\n```bash\ngenfstab -U -p /mnt >> /mnt/etc/fstab\n```\n\n它检测一些环境参数，然后生成合适的 `fstab`，要记住现在我们还是在 USB 中，并不是在真正的系统中（它在 `/mnt` 下），因此磁盘上的 `/etc/fstab` 对应着现在环境中的 `/mnt/etc/fstab`。\n\n由于这个文件实在太重要了，因此我们确认一下它真的生成了：\n\n```bash\ncat /mnt/etc/fstab\n```\n\n虽然 ArchWiki 建议你检查其中的错误，但是其实如果真的有漏洞也很难看出来，你只需要注意 `swap`、`/`、`/boot` 等字样，如果它们出现了，那么基本上就没有问题。\n\n`cat` 用于输出一个或多个文件内容。至于为什么不叫 `dog` 已经超出了我们的讨论范围，如果感兴趣可以自行搜索。\n\n### 进入系统\n\n接下来的所有操作都需要在实际的系统上完成，因为大多数软件希望系统位于 `/`，这样它们才能正常运行，但我们知道它现在位于 `/mnt`。如果现在从硬盘重启，系统确实就会位于 `/`，但是会有以下问题：\n\n- 环境没有配置好，USB 提供的很多工具并不包含在刚刚安装的系统中（还记得吗，我们只是安装了 `base linux linux-firmware`）。\n\n- 更要命的是，GRUB 引导文件没有生成，根本就无法启动。\n\n所以我们需要有一个工具来模拟一个环境，使系统好像就位于 `/` 而不是 `/mnt`，这就是 `arch-chroot`：\n\n```bash\narch-chroot /mnt\n```\n\n此命令一旦完成执行，终端就会发生变化，从此开始，`/mnt` 被映射到 `/`，你就「进入」了新安装的系统。当然这只是把根目录切换了一下，实际在运行的还是 USB 里面的那个 LiveCD 安装程序。\n\n### 更新软件源和密钥环\n\n为了避免一会儿忘记，我们现在更新 `pacman` 的软件源和密钥环：\n\n```bash\npacman -Syy\npacman -Sy archlinux-keyring\n```\n\n之所以还要更新一次，是因为之前那一次更新只更新了 LiveCD 的软件源和密钥环，这一次是更新实际操作系统中的那一份。\n\n*`reflector` 不需要重新执行，因为安装时已经自动为你复制好了。*\n\n### 校正时间\n\n使用 `ln` 命令设定时区：\n\n```bash\nln -sf /usr/share/zoneinfo/<Region>/<City> /etc/localtime\n```\n\n如果你在中国大陆，`<Region>` 就是 `Asia`，`<City>` 就是 `Shanghai`。\n\n*`ln` 的实际作用其实是创建文件链接（不是 URL，那是超链接），有点像快捷方式，在这里它把 `/etc/localtime` 指向 `/usr/share/zoneinfo/<Region>/<City>`，从应用程序层面而言，这两个文件的内容（看上去）会始终保持一致。不能简单复制文件，因为时间信息是每时每刻都在变的。*\n\n---\n\n如果你想要知道所有可能的时区，可以这样做：\n\n```bash\nls /usr/share/zoneinfo/<Region>\n```\n\n这会列出所有可能的地区（大洲）。\n\n```bash\nls /usr/share/zoneinfo/Asia\n```\n\n这会列出亚洲所有可能的时区设置。只需要选择和自己在同一时区的城市即可，因为它只用来设置时间。\n\n`ls` 用于列出某个目录下的所有子目录（子文件夹）。\n\n---\n\n调整时间：\n\n```bash\nhwclock --systohc --utc\ntimedatectl set-ntp true\n```\n\n### 本地化\n\n为了能够设置操作系统的语言，我们需要进行本地化过程。\n\n编辑文件：\n\n```bash\nnano /etc/locale.gen\n```\n\n你将进入 `nano` 的文件编辑界面，使用上下键移动视图，找到这样两行（并不是挨在一起的）：\n\n```\n#en_US.UTF-8 UTF-8\n#zh_CN.UTF-8 UTF-8\n```\n\n删除它们之前的 `#` 符号，然后按 `Ctrl + X`，`nano` 会询问是否要保存，键入 `y` 并回车确认。\n\n如果你打开时文件为空，那么一定是哪里弄错了。退出 `nano`（不要保存），重新输入正确的命令。\n\n---\n\n现在运行：\n\n```bash\nlocale-gen\n```\n\n这个程序会生成必要的本地化文件。\n\n运行完成后，编辑文件：\n\n```bash\nnano /etc/locale.conf\n```\n\n和之前那一条很像，但并不相同，请注意准确地拼写。这个文件不存在，所以打开时应当为空。\n\n向其中写入以下内容，然后保存：\n\n```\nLANG=en_US.UTF-8\n```\n\n设置为英文是有道理的，因为这是用于系统级的本地化，考虑到控制台（TTY）其实很难处理非 ASCII 字符。如果将来系统出了问题，我们还得回到控制台，这时如果输出全是乱码，你会有被蟒蛇缠住的感觉。\n\n### 网络设置\n\n现在来设置主机名：\n\n```bash\necho \"<ComputerName>\" >> /etc/hostname\n```\n\n`echo` 和 `>>` 配合使用用于直接将 `echo` 后面的内容写入文件，而不需要去打开编辑器，很快你会发现这很实用。\n\n引号 `\"\"` 有时是可选的，但是为了不出现意外，还是加上吧。\n\n`>>` 是重定向标识，`echo` 的默认输出是 `stdout`（标准输出），为了将其写入文件需要将输出流「接到」文件上。\n\n计算机名不应当包含空格。此外，虽然没有严格限制，但出于兼容性的考虑，请还是尽量只使用 ASCII 字符。\n\n---\n\n接下来绑定本地回环端口，如果不知道这是什么也不要紧，因为对于大多数情况，这个设置都是固定的。\n\n```bash\nnano /etc/hosts\n```\n\n这个文件可能已经存在，也可能为空。不管怎样，向其中填写以下内容并保存：\n\n```\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 <ComputerName>.localdomain <ComputerName>\n```\n\n`<ComputerName>` 应该替换为上一步所选择的计算机名。因为这是在编辑文件，我们怕你忘记了。\n\n*注意最后一行开头是 `127.0.1.1`（不是 `127.0.0.1`）。虽然它并没有任何特殊的地方，但不知为何，很多人把这个数字填错。就像「管理员」和「管埋员」一样。*\n\n### 创建帐户\n\n操作系统必须有帐户才能访问。历史上的一台电脑都是好多人公用的（即使现在也是），由于 PC 的普及，很多计算机上只有一个帐户，但不管怎么样，现在我们的系统什么也没有，所以需要创建帐户。\n\n首先运行以下命令：\n\n```bash\npasswd\n```\n\n这用于设置 `root` 的密码。`root` 是绝大多数 GNU/Linux 上的最高权限帐户，拥有控制系统一切的权力，因此该密码请勿设置得太简单（但是也不要胡乱输入，如果忘记会很麻烦）。\n\n输入密码没有回显，确保输入正确后回车即可。（退格键依然可以使用）\n\n---\n\n现在来创建和设定个人帐户。（不能什么事都以 `root` 身份完成，否则如果你运行了一个恶意软件，它将可以删除计算机上的所有内容，还能任意解码你的密码，这太可怕了！）\n\n```bash\nuseradd -m -G wheel -s /bin/bash <UserName>\n```\n\n用户名可以自选，但是依然要使用 ASCII 字符，并且不能有空格。此外如果使用字母，只有小写字母可以被接受。\n\n设定密码：\n\n```bash\npasswd <UserName>\n```\n\n这和设定 `root` 的方法是一样的，不过由于需要经常使用，建议设置得简单好记（但不可以少于 6 个字符）。\n\n---\n\n个人帐户是没有控制系统目录的权限的，当然可以通过登录到 `root` 来做这些操作，但是这样会带来两个问题：\n\n- `root` 的密码太长，登录很麻烦。\n\n- 这让问题又回到原点。\n\n所以我们要使用 `sudo`，它允许被授权的普通用户使用 `sudo` 命令来临时获取管理员权限。刚刚所创建的新用户并不在这里，所以我们需要告诉 `sudo`。\n\n```bash\nnano /etc/sudoers\n```\n\n找到如下一行（或者类似的）：\n\n```bash\n# %wheel ALL=(ALL:ALL) ALL\n```\n\n*类似这样的行在此文件中共有三行，它们靠得比较近，请确保你选择的是第一个（第四个 `ALL` 后不应当再有任何后缀）。*\n\n去掉最前面的 `#` 和空格，然后保存并退出。\n\n### 安装微码\n\n微码控制处理器的指令解释，有时也用来修正硬件错误。既然是 CPU 级别的，那么怎么想也都应该安装上。\n\n运行下面两条命令中合适的一条：\n\n```bash\npacman -S amd-ucode # AMD\npacman -S intel-ucode # Intel\n```\n\n`#` 后面的是注释，是给你看的，不用输入终端。\n\n两条命令只需执行一条，根据你机器搭载的 CPU 选择即可。\n\n### 安装网络组件\n\n新的操作系统什么也没有，而且稍后重启时我们还要继续在终端操作，所以现在安装网络组件：\n\n```bash\npacman -S networkmanager\nsystemctl enable networkmanager\n```\n\n### 启动引导\n\n在继续之前我们要说明一点额外的东西，当然，这对于后续步骤暂时没有影响，如果着急，可以先跳过。\n\n> **还需要启动引导程序吗？**\n> \n> 你可能听说过 GRUB 这个名字，它是大多数 GNU/Linux 发行版的默认启动引导程序，GRUB 异常的强大，可以引导几乎所有的操作系统内核。\n> \n> 但是，进入 UEFI 时代后，我们其实多了一种选择：**直接生成 Linux 内核的 EFI 启动文件并交由 EFI 引导**（不应当称之为 BIOS，因为 EFI 和 BIOS 并不一样）。这会使得启动略快一些。不过这是相当麻烦的，因为要手动（或者设置自动程序）生成内核的引导文件。如果启用了安全启动，还要进行内核签名。\n> \n> 以上问题当然是有解决方案的，但这已经超出了本指南的范围，我们会在其它文章中再行介绍。另外，使用 EFI 直接引导时不方便选择启动系统（需要进入 EFI 菜单），所以只建议单系统用户使用。\n> \n> 不管怎样，让我们先安装 GRUB 吧，因为下一次重启就需要引导。除非你打算在这里完成 EFI 的配置，但如果你真的做了，你会有后脑勺被拳头砸过的感觉。\n\n如果在安装双系统，请先执行以下命令：\n\n```bash\npacman -S os-prober\n```\n\n这个程序可以识别其它的操作系统。\n\n现在下载 GRUB 软件包：\n\n```bash\npacman -S grub\n```\n\n然后安装 GRUB 到指定的 EFI 分区：\n\n```bash\ngrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck\n```\n\n命令很长，但依然要准确地输入。如果哪里不正确，GRUB 会提醒你。\n\n---\n\n现在配置 `os-prober`：\n\n```bash\necho \"GRUB_DISABLE_OS_PROBER=false\" >> /etc/default/grub\n```\n\n看看，我们再次使用 `echo` 和 `>>` 完成了文件写入。\n\n> **巧妙的命令组合**\n> \n> 为什么没有类似 `write-file a.txt \"hello, world\"` 这样的命令？\n> \n> 这是因为使用已有的命令组合（在这里是 `echo` 和重定向）足以简单地完成这些任务，而且还可以提供极高的自定义过程。\n> \n> 想想下面这两个问题：如果我想同时写入两个甚至八个文件怎么办？如果同时还想做些筛选怎么办？这就得设计很多很多的命令！\n> \n> 这样做会带来两个问题：\n> \n> - 系统执行命令的速度会变慢（因为要查找命令）。\n> \n> - `write-8-files-and-search` 这样的命令会让人不禁担忧设计这种命令的人是否已经疯了。\n> \n> 你可以试着搜索一下 `tee` 和 `grep`，看看如何使用它们的组合解决这些问题。\n> \n> GNU 所编写的程序（当然还有很多其它程序）都遵循「单一功能原则」：一个程序只负责一个任务，例如 `cat` 只负责读文件，而 `grep` 只负责查找——虽然它的查找功能十分强大，但也只是查找。\n> \n> 通常我们称这种程序为「工具」（Tools），而称那些有很多功能的程序（例如 GIMP）为「应用」（Applications）。\n\n---\n\n现在运行以下命令：\n\n```bash\ngrub-mkconfig -o /boot/grub/grub.cfg\n```\n\n此命令生成供 GRUB 读取的配置文件，用于启动。\n\n在输出中你应当看到 `vmlinuz-linux`、`initramfs-linux` 等字样，并且要确保最后 GRUB 输出了 `done`。\n\n如果缺少了哪一个，或者看上去有问题，那么请再试一试，如果依然不行，那么……如果你愿意，可以键入 `exit` 返回 LiveCD，再键入 `reboot` 重启，之后你可以从头再来（当然，不必重新分区了）。\n\n### 重启\n\n我们很想一鼓作气，但处理器看上去已经受不了了。正好借此机会，我们来确认一下 GRUB 能否正常运行，同时看看我们已经做了多少。\n\n执行：\n\n```bash\nexit\n```\n\n退出当前系统（还记得 `arch-chroot` 吗）。\n\n再执行：\n\n```bash\nshutdown now\n```\n\n来关闭计算机。\n\n等指示灯熄灭，所有的部件都冷却下来后，拔下 USB，然后再接通电源开机。\n\n---\n\n开机时依然要设法进入 UEFI 设置，然后调整启动顺序，将 Arch Linux 或者 GRUB 作为第一启动项。\n\n有时它可能不叫这个名字，没有关系，只要确保将「Windows Boot Manager」放在最后，一般 Arch 也就相应地放在最前面了。\n\n现在等待系统启动（通常几秒钟），随后你会看到 Arch 的登录界面：\n\n```\n<ComputerName> Login:\n```\n\n是的，依然没有好看的图像，但是我们现在有相当的信心，因为我们已经知道如何驾驭终端，既然如此，好看的图像还会远吗？\n\n在后面键入你的用户名并回车，随后 Arch 会向你询问密码：\n\n```\nPassword:\n```\n\n输入你的密码。密码仍然没有回显，确认输入正确后回车即可。\n\n随后你就可以回到熟悉的终端：\n\n```\n<UserName>@<ComputerName> ~ $\n```\n\n注意到 `@` 的前面已经变成了你的用户名，这也意味着此后我们的身份不再是 `root`，因此，执行一部分命令时，需要在最前面添加 `sudo`（如果你还记得它的作用）。\n\n### 安装桌面\n\n> **使用桌面环境还是窗口管理器？**\n> \n> 要回答这个问题，首先必须明确二者的区别。\n> \n> 桌面环境（DE）是窗口管理器（WM）的超集。DE 提供菜单栏，托盘，标题栏，小工具等多种组件集合，用上去很像其它操作系统的「桌面」。而 WM 通常只提供简单的窗口管理（包括层叠），操作主要依赖键盘。因为由于不涉及图形系统，很多 BUG 就不会产生。\n> \n> 本指南使用 DE，因为我们要创建的是桌面操作系统，所以应当尽可能给它「桌面」的感受，同时也不会给人太高的学习成本。但如果喜欢 WM，我们的其它文章中也会提到如何配置和安装。\n> \n> 如何在二者中做出选择本来就是一个比较的问题，但是有的时候或许我们并不需要选择，既然你已走上 Arch 这条路，或许有一天你能找出一个不错的解决方案。\n> \n> 谁知道呢？\n\n为 GNU/Linux 添加桌面本身就是安装几个应用程序的工作，所以这件事情并不困难。不过从这里开始是一个分界点，从此之后的很多软件并不是只有一种选择，我会尽可能列出多的可能，试图阐明它们的区别，不过最终的选择权依然在你的手中。\n\n#### 图形系统\n\n下面来面对这样一个问题：图形系统。它用于和桌面环境商定显示图像的方法。\n\n*我们希望尽可能将问题简单化，因此并未区分显示协议、窗口系统、显示协议实现等概念，而是统称图形系统。*\n\n目前，主流的选择有两个：\n\n- X Window System（X11），这个系统比较古老，这既是优势也是缺陷：\n  \n  - 支持面非常广泛（几乎所有）。\n  \n  - 运行稳定，BUG 较少。\n  \n  - 系统占用相当高（如果在玩 Minecraft 时运行 `top`，`Xorg` 经常紧挨在 `java` 的下面），运行比较慢。\n    \n    *在一些比较早期的文章中，X 被评价为「较慢」，但一段时间以来，各种实例都表明，X 的性能消耗已经远远不再是「较高」。在渲染程序越来越复杂的今天，X 的性能问题明显地暴露出来。*\n  \n  - 不太安全（类似 AutoHotKey 之类的东西是有可能存在的）。\n  \n  - 完全不兼容 Wayland，Wayland 程序不能在 X 上运行（除非使用 `weston` 混成器，但这样有为了使用 X 而使用 X 的嫌疑）。\n  \n  - 可供参考的资料比较多。\n\n- Wayland，这个系统比较新，虽然设计上是为了取代 X，但事实上它却和 X 形成了类似互补的关系——它的优势正是 X 的缺陷，反之亦然：\n  \n  - 支持面比较窄（虽然仍然在快速增加）。\n  \n  - 运行不太稳定，BUG 较多。\n  \n  - 系统占用较低（我们很难指望这么频繁使用的组件拥有极低的占用），运行很快。\n  \n  - 比较安全（如果未经许可，屏幕录制是不可能的）。\n  \n  - 大多数 X 应用程序可以在 Wayland 上运行（如果合理使用 `xwayland` 等兼容程序）。\n  \n  - 可供参考的资料比较少。\n\n*过去的很多文章中认为 Wayland 缺乏驱动程序，在当时的确如此，但这一现象现在已有所改善：NVIDIA 495 驱动已经提供了相应的支持，而 Nouveau 也基本上到位了（至少已经有成功的例子）。*\n\n---\n\n你可能在想「我全都要」。噢不，你不能。即使你设法安装了两套图形系统，你也只能使用一个。所以……\n\n> 做出你的选择，并承担相应的后果。\n\n现在我们回来，希望你已经做出了自己满意的回答。\n\n*不必为选择 X 而担心更新问题。影响如此巨大的图形系统更新时，一定会有成熟的解决方案。而且，并没有人规定你必须升级，这可不是 Windows Update！另外，即使 X 的性能的确不好，但还是比 Windows 强多了，你大可不必担心。*\n\n*也不必为选择 Wayland 而担心 BUG。尽管漏洞随时都存在，但是它们通常有合适的修复方案。即使不兼容，大多数情况下也可以通过将应用程序切换到 XWayland 上完成运行，而要是兼容，那就是赚了！*\n\n---\n\n如果决定使用 X：\n\n```bash\nsudo pacman -S xorg\n```\n\n如果决定使用 Wayland：\n\n```bash\nsudo pacman -S wayland wayland-protocols xorg-xwayland\n```\n\n#### 桌面环境\n\n现在你可以选择一个喜欢的桌面环境。\n\nKDE 还是 GNOME？噢不，这个看法也太狭隘了，来看看 ArchWiki 给出的一些选择（部分没有列出）：\n\n- Cinnamon\n\n- Cutefish\n\n- Enlightenment\n\n- GNOME\n\n- KDE\n\n- LXDE\n\n- Sugar\n\n- Xfce\n\n- Trinity\n\n……这只是一小部分。\n\n到这里的选择就很多了，我们不太可能在这里一一介绍。不过你可以前往 ArchWiki 并搜索名字（当然是英文）来进入其页面，并找到相应的安装方法和配置方法。\n\n同时你还需要为桌面环境选配一个显示管理器（Display Manager），常用的选择有很多，例如 GDM、LightDM、SDDM 等。\n\n在选择时要遵循一个原则：**先成套后搭配**，也就是说，如果桌面环境为你提供 DM（例如 GNOME 提供 GDM），就使用它提供的，否则再自行搭配（例如 Cinnamon 搭配 LightDM）。你同样可以在 ArchWiki 上找到一些建议。\n\n*当然如果你认为你的水平足够高，那么这些限制都可以随便打破，只要你知道遇到错误怎么处理。*\n\n---\n\n**但是**，我们所编写的是**指南**，一份指南怎能只告诉它的读者「去查 Wiki，然后自己试试」？负起指南的责任远远高于保持中立。所以，我们将介绍 GNOME 的安装方法，不过同时读者应当知道，这**只是万千选择中的一个**，请不要局限自己的视角，否则就失去了 Arch 宝贵的 DIY 特点。\n\n```bash\nsudo pacman -S gnome gdm\nsudo systemctl enable gdm\n```\n\n就这么简单。\n\n当然无论选配哪一个 DE、哪一个 DM，都要记得运行 `systemctl enable <DMName>` 来启动此 DM 的服务，否则将无法进入登录界面。\n\n顺便提一句，GNOME 已经正式支持 Wayland，所以若要让 GNOME 在 X 上运行，需要额外的配置，这里叙述从简，就不提及了。\n\n---\n\n### 驱动程序\n\n现在我们已经来到最后一步，也就是驱动程序的安装。\n\n大多数驱动程序已经内置在操作系统中，包括 `nouveau`、`mesa`、`amdgpu` 等。对于我们所使用的机器，并不需要安装任何额外的驱动，所有的组件都可以正常运行。由于我们还没有回到桌面环境，因此尚无法预知可能出现的问题，不过以下提供针对硬件的一些建议：\n\n- NVIDIA GPU（问题最多）：\n  \n  - 如果是唯一的图形卡，并且你的屏幕分辨率高（4K 及以上），那么 `nouveau`（内置的自由驱动程序）最高只能支持 30 Hz 的刷新率。\n    \n    我们不建议使用非自由软件，所以根据你自己的意愿，如果的确问题影响到正常使用，你可以使用 `nvidia` 这一专有驱动程序……但希望不需要。\n    \n    `nouveau` 已经内置，但如果你不得不使用专有驱动，可以运行以下命令：\n    \n    ```bash\n    sudo pacman -S nvidia\n    ```\n  \n  - 较新的图形卡使用 `nouveau` 就可以正常支持 Wayland，如果不能，那么和上面的解决方法一样。\n  \n  - 如果是加速用图形卡（例如双图形卡笔记本电脑中的独立图形卡），则通常无需单独安装驱动程序。\n  \n  - 太老的图形卡可能不被支持，并且无法正常运行 Wayland。\n\n- AMD GPU：\n  \n  - `mesa` 和 `amdgpu` 已经内置，它们应当可以驱动绝大多数现在流行的 AMD 图形卡。\n  \n  - 更老的图形卡需要 ATI 驱动程序，可参考 ArchWiki 完成安装。\n\n- Intel GPU：\n  \n  - 无需单独驱动，系统已经内置一套完美的（而且自由的）Intel 图形卡驱动程序。\n\n- 蓝牙：\n  \n  - 通常安装 `bluez` 和 `bluez-utils` 可以解决蓝牙驱动问题：\n    \n    ```bash\n    sudo pacman -S bluez bluez-utils\n    ```\n    \n    如果蓝牙没有自动激活，运行以下命令：\n    \n    ```bash\n    sudo systemctl enable bluetooth\n    sudo systemctl start bluetooth\n    ```\n  \n  - 有些桌面环境集成了蓝牙控制器，如果这样则无需单独安装。\n    \n    如果没有，那么可以使用 `bluetoothctl` 这样一个小巧的命令行控制器。\n\n- 触摸板\n  \n  - 无需单独驱动，`libinput` 足以处理大多数情况。\n\n- 声卡\n  \n  - 声卡这一装置已经如此流行，以至于甚至没有人注意到它还有驱动程序。从未有哪个外部设备如声卡一般如此统一和协调：无需驱动程序，它几乎肯定能用。\n\n- 鼠标和键盘\n  \n  - 作为 PIC 上的设备（PIC 1 和 PIC 12），鼠标和键盘通常无需驱动。\n\n- 打印机\n  \n  - 这有点复杂，基本上是要取决于打印机制造商对 OpenPrinting 的支持程度，不过下述几个步骤通常适用于大多数打印机。\n  \n  - 如果制造商提供了 GNU/Linux 的驱动程序，建议使用它。\n  \n  - 否则，试试 `cups` 与 `gutenprint`。\n  \n  - 如果这还不行，试着找到与你的机器最接近的驱动程序并使用。\n  \n  - 如果以上方法都不行，那么很遗憾，这台设备或许无法被驱动。\n\n- 摄像头\n  \n  - 通常无需单独安装驱动程序。如果它无法正常运转，请查阅 Wiki 上是否有对应机型的解决方案，或者联系其制造商。\n\n### 完成\n\n重启计算机，如果一切正常，GRUB 将可以引导 Arch Linux。如果在安装双系统，你会发现 Windows 也应该出现在 GRUB 选项中。（当然，要是没准备好安全启动，还是先不要动它）\n\n## 接下来做什么\n\n### 美化\n\n系统启动后一定会令你大吃一惊，因为默认的 GNOME 其实一点都不简陋，即使不安装主题，它也相当的优雅。\n\n当然，即使你没有使用 GNOME，其它的 DE 一定也为你提供了不错的体验，如果没有，请告诉他们，我相信大多数开发者会对于改善用户体验很有兴趣。\n\n如果你不喜欢默认的主题，那也没有关系，你可以在网络上搜索一些适合你的 DE 的主题，然后安装它，这些纯粹是个性化的东西，因此就不展开了。\n\n此外，GRUB 也是可以设定主题的，所以你知道要做什么了不？（大多数人都同意黑底白字绝对不是最好的设计）\n\nDM 也是可以设置主题的，不过相比桌面本身而言，可选的略微少了一些。当然，你可以设置自动登录来直接跳过登录过程，权限系统会保证操作系统的重要文件不受破坏。但是如果需要绝对的安全，还是不要这样做。\n\n声音什么的也是可调的，如果你之前不知道的话。\n\n### 安全启动\n\n**这并不是只有双系统才应当考虑的问题。**\n\nUEFI 新增的功能之一是安全启动，它保证所引导的内核已经过签名，这样可避免恶意软件侵入内核破坏操作系统。虽然大多数主板上内置 Microsoft 的 CA 证书，但其实这是可以修改的。\n\n绝大多数情况下，GNU/Linux 自身的安全已经足够，但是安全启动仍然应当被启用，如果没有安装 Windows，那么只需要一些不很复杂的配置，就可以在 `pacman` 每次升级内核时自动签名，而同时这也能保证你的安全。\n\n而如果要和 Windows 并存，问题也并不复杂，不过详细的操作方法已经超出我们的范围，所以只好以后有机会再说了。\n\n虽然说得挺吓人，但也不必太过慌张，你认为有多少恶意软件可以完美地注入到一个常常更新的内核中呢？所以你大可以直接删除 Windows，然后完全无视这个功能。以前没有安全启动的时候，我们碰到过这些问题吗？所以说，很多这样的问题，其实都是被「制造」出来的。\n\n> 如果用自己数年糟糕的使用体验去换一次防御病毒入侵的机会，那这种防御到底有什么意义？\n\n### 安装输入法\n\n如果要使用其它语言输入，应当安装输入法。对于中文（以及一些其它的语言），`fcitx-im` 和 `ibus` 等等都是不错的选择。注意在 Windows 上很流行的输入法通常在 GNU/Linux 上并不一定工作得很完美。\n\n### AUR\n\nAUR 是由社区维护的软件仓库，其中包含一些 `pacman` 不提供的。\n\n若要使用 AUR，请参考 [AUR 主页](https://aur.archlinux.org/) 的指南。\n\n### 更新系统\n\n也就是俗称的「滚」，它是指这条命令：\n\n```bash\npacman -Syu\n```\n\n它更新系统中的所有软件包，确保它们处于最新。\n\n这条命令需要频繁执行（几乎每天），因此你可能会希望给它安排一个系统服务来自动化这个过程。\n\n如果执行过程中出了错误也不要惊慌，因为世界上所有的 Arch 用户也会面临和你一样的问题。同理，开发者一定会在自己的电脑上测试后再发布，而测试环境绝大多数情况下和你的环境应该是几乎一样的。\n\n*这也是我们不建议使用 ArchLinuxCN 这样的扩展源的原因之一。使用统一的标准和规范，在出问题时更容易得到更多的帮助。当然这只是建议，请按自己的需求做最后决定。*\n\n### Wine\n\n[Wine](https://www.winehq.org/) 是一个可以在 GNU/Linux 上执行一些 Windows 应用程序的组件，它通过翻译 API 来完成这个过程。由于 Microsoft 并未公开一些方法的规范，因此 Wine 只能依靠猜测，所以会使得它不太稳定。但是，相当多的软件其实已经可以使用 Wine 来运行（.NET 3.5 和 4.6.1 可以「完美」运行，想想基于它创建的应用程序有多少）。\n\n如果你已经下定决心删除了 Windows，却又对 Windows 的一些应用程序念念不忘，或许 Wine 能够帮你渡过一段难关。\n\n你可能会认为我把一个 Windows 相关的问题放在这里不太合适，但是其实并不是如此。如果 Wine 是一个自由软件，而 GNU/Linux 也是，那么为什么这个组合就不能使用呢？至少这为更多使用 Arch 的人带来了希望啊。\n\n### 游戏\n\nGNU/Linux 的游戏环境比我以前预想的要**好太多了**。\n\nUnreal Engine 和 Unity 都支持 GNU/Linux，类似这样的通用游戏引擎还有很多。游戏公司如果愿意，可以提供针对 GNU/Linux 的发行版本（有些的确也是这么做的，例如 Dota 2 和 Minecraft）。\n\nSteam 上也有相当多的游戏可以在 GNU/Linux 上运行（约 70%），它们中有相当一部分虽然不原生支持，但可以通过转译等操作来运行，例如 Apex Legends、Warframe 和 Grand Theft Auto V。\n\n现在你还觉得 GNU/Linux 不适合游戏吗？其实一开始就不是这样。在 GNU/Linux 上，Minecraft 平均比 Windows 运行时帧率高约 50%，如果不信可以自己试试。\n\n对于移动设备上的游戏那就更加简单，因为模拟器实在是太多了。当然，不使用模拟器的方法也是有的，这里就不展开介绍了。\n\n另外，还有多少人不知道 Android 经过修改也可以直接安装在电脑上？\n\n### 开始你的创造\n\n> 一切到此结束，一切又由此而始……\n\n至此，我们的这份指南的主体部分就结束了，但这只是开始，现在你拥有了一套 Arch。也许它不完美，也许它不成熟，都不要紧。尽管整个过程费时费力，但是如果现在让你说说你的 Arch 上面有些什么，你是不是该了如指掌了？\n\n更重要的是，这一切是由你来指挥的，**计算机已经在你的掌控之中**！再想想捆绑安装的各种电脑管家，最多只能推迟 35 天的强制更新，没来由的各种弹窗，预装的成组软件……这样自己组装而来的系统，是不是有一种舒畅感？\n\n## 结语\n\n> 我本可以忍受黑暗，如果我不曾见过光明。\n\n再一次回头看我们最初的目标，一路走来并不容易，现在你坐在新拆封的桌面环境之前，想想之前的终端，是不是有一种冲出黑暗的感觉？如果是的，那么恭喜，欢迎你通过入职考核，正式成为 Arch 的一员！\n\n最后，让我们用一条有趣的命令结束这份指南……\n\n打开虚拟终端，它现在应该在应用列表里（如果 DE 已经集成）。不过要是没有，你可以按 `Ctrl + Alt + F1` 进入（熟悉的）TTY 终端，如果不行，再同时按下 `Fn`。\n\n键入（不要忘了切换到英文输入法）：\n\n```bash\ns='s=\\47%s\\47;printf \"$s\" \"$s\"';printf \"$s\" \"$s\"\n```\n\n（你可以多试试几次，没有危险！）\n\n它输出了些什么？你能再写出一个类似的程序吗？\n\n（要回到图形界面，按下 `Ctrl + Alt + F7`，如果不行，再同时按下 `Fn`）\n\nGNU/Linux 的世界远远比想象得要广阔和奇妙得多，一切皆有可能。\n\n> 这是属于你的世界，我很荣幸为你敲开它的大门。\n\n现在该说再见了！哦，如果你想要说些什么，评论区在下面。\n","source":"_posts/ArchLinuxInstallGuide.md","raw":"---\ntitle: Arch Linux 安装初级指南\ndate: 2022-08-03 00:00:00\ncategories:\n  - 指南与教程\ndescription: 这是属于你的世界，我很荣幸为你敲开它的大门。\n---\n\n## 欢迎\n\n既然你已经来到这里，说明你想要获得一份纯净的 GNU/Linux，并且在万千选择中，挑中了你中意的那一个。这就是 Arch Linux，一个「注重简洁的发行版」。\n\n### 我们从一个问题开始\n\n> Arch Linux 这么难用，为什么还要用它？\n\nArch Linux 难用吗？**当然难**，我并不想骗你。\n\n如果按易用性来看，Debian，LinuxMint，CentOS，Ubuntu 都更好用，几个按钮就能解决的问题，多简单。\n\n可是似乎有一点不对……\n\n- 我为小巧精悍而来，我如何接受 Flatpak？\n\n- 我为软件自由而来，我如何同意 SnapCraft？\n\n- 我为安全可控而来，我如何理解自动更新？\n\n- 我为隐私秘密而来，我如何认可数据收集？\n\n如果所谓的易用性要以这些更为重要的东西为代价，那么这样得来的「好用」到底有什么价值？！\n\n……\n\n几乎所有的 GNU/Linux 发行版都或多或少包含着「预装」和「产品」的成分，而 Arch Linux 是为数不多拒绝这样做的发行版之一。\n\n我选择 Arch Linux，不是因为其看上去专业，也并非因为它更加完美，事实上，它比大多数发行版都要简单，甚至是简陋。\n\n**而我看重的，正是这份简陋背后的单纯。我们相信你也是如此。**\n\n### 开始之前\n\n欢迎来到 Arch Linux 的世界！你一定已经对 Arch 有所耳闻，作为被称为「邪」的 Linux 发行版，Arch 和其它的发行版很不一样，它没有好看的 GUI，没有方便的安装程序，但这并不能掩饰它独特的魅力：\n\n- 滚动式发行，一次安装即可。\n\n- 你能获得一套真正「纯净」的 GNU/Linux 操作系统。\n\n- 运行很快。\n\n- 无需配置即免疫大多数病毒。\n\n- 几乎不需要清理垃圾。\n\n- 自由且开放，虽然 AUR 中存在部分专有软件，但我们可以选择。\n\n- 非常好玩且有趣！（真的是这样！）\n\n- 由于只支持一种架构，反而避免了很多问题。\n\n- 拥有世界上最好的文档之一：[ArchWiki](https://wiki.archlinux.org/)。\n\n- 会真正显得你很酷。\n\n……诸如此类。\n\n### 注意事项\n\n在你能够开始你的旅途前，我们有一些需要说明的内容：\n\n- 本指南**不是面向新手的**。\n  \n  - Arch Linux 本身也不是面向新手的。\n  \n  - 你需要计算机基础知识，包括但不限于终端的基础概念和使用方法。你还得知道分区、UEFI、引导、BIOS 设置之类的是什么意思。\n  \n  - 你需要对 GNU/Linux 有最基本的了解，至少要知道有显示管理器，桌面环境这些概念（弄不清楚也没关系，但要知道有这么个东西）。\n  \n  - 需要不错的英语，或者不错的翻译姬（例如 [Google 翻译](https://translate.google.com) 以及它的 [国内版](https://translate.google.cn)），因为你会需要 ArchWiki 的帮助，而有些条目是没有翻译的。\n  \n  从头开始讲解以上内容会消耗大量的篇幅，在本站的其它地方你可以学习到上述内容的一部分。\n\n- 请合理使用本指南。\n  \n  - 本指南所述的方法不是唯一的安装方法，也并不一定适用所有机器，**请不要照抄命令**。对你机器造成的损害，我们爱莫能助。\n  \n  - 本指南所述介绍内容不是专业知识，出于便于理解的目的或表述的的需要，有些可能也并不准确。如有疑问，请参考权威资料获得更准确的解释。\n  \n  - 确保你已经获得计算机的使用权限，**不要在你朋友的电脑上做这些**（除非他们也很感兴趣）！当然，也不要在任何不属于你的电脑上这样做。\n  \n  - 确保你没有什么紧急任务需要使用电脑。安装过程耗时较长，且一旦开始就不能中断。\n\n### 有关双系统的建议\n\n首先要说明的一点是，我们建议**一台计算机只安装一套操作系统**。原因主要有：\n\n- 兼容性问题。例如 Microsoft 要求必须启用安全启动，而 Arch Linux 默认并不支持。如果不启用，Windows 11 的部分功能将无法使用，如果要启用，就需要对 Arch Linux 进行相当麻烦的配置。\n\n- 使用习惯问题。\n\n- 配置的时间成本远高于再买一台计算机的成本。\n\n- 当你会合理使用 VirtualBox 之类的软件后，你会发现一个硬盘上的 Windows 很多余。\n\n……等等。\n\n当然，更多 Windows 用户逐渐开始了解 GNU/Linux 和自由软件毕竟是件好事，如果我们不在这里提供安装方法，他们（或许还有你）可能就会放弃本可以获得的自由。基于这一点，本指南中也增补了双系统安装的一些说明。\n\n如果你的另一个系统根本不是 Windows……那就不会有这些顾虑，你可以按照单独安装的步骤进行安装。不过如果是 Hackintosh，小心不要更改硬件或者破坏启动区。\n\n### 约定\n\n本指南对一些文字有特殊的表示方法，我们在此先行约定。\n\n- 占位符 `<>`\n  \n  当你注意到这样的文字时：\n  \n  ```bash\n  echo <YourName>\n  ```\n  \n  你应当知道需要替换 `<YourName>` 为合适的值。注意，不是替换 `YourName`，而是 `<YourName>`。\n  \n  举个例子，假设你的名字是 `Annie`，那么：\n  \n  - 这样是正确的：`echo Annie`，而\n  \n  - 这样是错误的：~~`echo <Annie>`~~（没有替换 `<>`）\n  \n  - 这样是极其错误的：~~`echo <YourName>`~~（直接照抄）\n  \n  你还需要知道我们所说的东西的英文。例如，如果我们提到「选择的设备是 XXX」，你应该知道我们要替换的东西是 `<Device>`（而不是 `<Snake>` 或者 `<Monkey>` 之类的）。\n\n- 组合键\n  \n  我们使用 `K1 + K2` 来表示组合键，例如 `Ctrl + C`、`F12` 以及 `Shift + Alt + 5`。按数字键时，请确保按的是主键盘上的键（1~9 和 0 是排成一排的）。\n\n## 目标与材料\n\n### 目标\n\n虽然服务器使用 Arch Linux（以后简称 Arch）的例子并不少，但我们的目标是桌面操作系统，因此我们可以略微降低对性能的需求，转而寻求更好的体验，同时可以使用并不那么稳定的新技术。\n\n本指南会将这台 Arch 配置到「出厂」状态，不带任何个性化但至少能看得过去，并且能够完成后续的优化步骤。\n\n### 材料\n\n下述的是安装所需的设备。\n\n- 一台计算机，Arch 将安装在其上，它应当具有以下特性：\n  \n  - UEFI 引导启动。\n    \n    如果你希望安装双系统，原先的操作系统也应当由 UEFI 引导。\n    \n    Windows 11 及之后的版本不再支持 Legacy BIOS，所以以后 Legacy BIOS 会很快被淘汰。截至本文写作时，已经有相当多的机型不再支持 Legacy BIOS。\n  \n  - 至少 2 GiB 的 RAM，但建议有 4 GiB 以上。\n    \n    尽管 Arch 的运行只需极少的内存，但内存越大，缓存/缓冲运行得就越好，系统会越快。\n  \n  - 至少 25 GiB 的磁盘**未分配空间**，但建议有 50 GiB 以上。\n    \n    建议使用 SSD，会拥有更好的表现。\n    \n    请通过压缩或删除分区等方法来腾出这些空间，而不只是删除文件。\n    \n    确保这些空间是连续的，否则可能会引发极大的麻烦，如果你坚持，你需要在后面的分区部分自己处理这些问题。\n    \n    如果只安装 Arch，那么稍后可以在安装过程中直接清除磁盘，无需此步骤。\n  \n  - 较新的 x86 处理器，使用 Intel 或 AMD 皆可。\n    \n    **不要用其它的处理器**（除非你很了解它的技术细节），可能不支持或者发生崩溃。\n  \n  - 较新的图形卡，如果太老，Arch 仓库里可能没有对应的驱动。\n  \n  - 网络连接，可以使用无线网络，但有线网络更好。\n    \n    不要求是「流畅的」，因为 Arch 提供了足够多的镜像。\n  \n  - 已接通电源，或者至少足够几个小时的电量。\n    \n    操作系统安装完成前，电源管理系统不可用，电量消耗可能会变高。\n  \n  - 使用的是标准键盘布局（PC 键盘），对于其它键盘布局，请至 ArchWiki 寻找配置方法。\n  \n  - 如果要安装双系统（另一个是 Windows），请关闭 BitLocker。\n    \n    若不这样做，你将无法直接通过 GRUB 启动 Windows（需要特殊的配置）。\n\n- 另一台计算机（是的！），这用来浏览资料和处理一些应急情况：\n  \n  - 最好是另一台 Arch，但这种情况不常见。\n  \n  - 其次是另一台 GNU/Linux，有些软件包是可以直接复制的，它们也更容易解决安装时遇到的问题。\n  \n  - 网络连接，依然不需要是「流畅的」，因为 ArchWiki 在全球的速度都很快。\n  \n  - 如果没有计算机，请试着借一台，对配置并没有要求，但**不要使用移动设备**（它们不能完成诸如创建启动 USB 之类的操作）。\n\n- 至少 1 GiB 的移动存储设备，但是建议至少 4 GiB，这会给你更多的选择（稍后会说到）。\n  \n  最好使用通用串行总线设备（USB），不要用一些奇怪的存储设备，否则你可能会遇到大麻烦。（我知道没人用光量子存储仪，这里主要指的是有一些智能功能的存储设备）\n  \n  不建议通过硬盘直接安装，虽然这的确可以，但是 USB 会方便得多。\n  \n  Arch 对于 USB 的速度要求并不高，因为安装过程实质上是下载而非复制。\n  \n  设备中所有数据都将丢失，故应先备份。\n\n- 如果目标计算机**只有**特殊的输入装置（触摸屏，触摸板），则需要备用的鼠标（和键盘）。\n  \n  Arch 支持绝大多数的触摸板（希望你的也是如此），但如果不能，你会需要一个临时的鼠标。\n  \n  确保它们是有线的，无线可能存在驱动问题。\n\n## 安装过程\n\n下面要正式开始动手安装了。为防止你无意中做出些不该做的事，请仔细阅读以下内容。\n\n### 操作须知\n\n- 确保你充分理解指南的内容，并且知晓命令每个部分的作用。当你发现 无法读懂指南的内容时，请去补充一下基础知识。\n\n- 准确地键入命令，一个操作失误就可能摧毁整套系统。\n\n- 不要钻牛角尖或者照搬指南，要阅读系统给出的提示。尤其是如果系统显示 `Run command blahblah to do this` 之类的信息，你不应当忽略它。\n\n- 善用搜索引擎查找，遇事不决先 [Google](https://google.com/ncr)。（不要以无法访问作为理由，搜索引擎还有很多）\n\n- 当遇到意外时，除了使用搜索引擎，还要参考 [ArchWiki](https://wiki.archlinux.org/)。**无论如何都不要慌张**，先停止操作，然后想想哪里出了问题。记住：只要你还能控制系统，你就有挽回的机会。\n\n- 可以到各种社区提问，但是要记得遵守社区规则。本页面的最下方也有评论区，可以在那里寻求帮助。\n\n- 不要一边做安装系统这种事，一边听音乐或者玩游戏。否则当你迷失在指南中时，你会有很强的挫败感。\n\n请记住：\n\n<div style=\"font-size:2.5rem;text-align:center;width:100%;\">数据无价 谨慎操作</div>\n\n### 下载和验证镜像\n\n一切的一切，都要从这个 ISO 文件说起。\n\n你已经知道，空的磁盘不可能自己运行起来，必须要插入启动盘来启动。实际上启动盘也就是一个迷你版操作系统，Arch 也不例外。唯一比较特别的是，大多数安装程序都是从自己当中复制文件到磁盘，而 Arch 却不是，它是下载软件包并安装到指定的磁盘上。\n\n所有 GNU/Linux 操作系统的安装环境都可称作 LiveCD，后面我们还会见到这个名字。\n\n无论如何，现在我们需要 Arch 的安装程序。你可以从 Arch 官方的 [下载](https://archlinux.org/download/) 页面获得它的下载链接。\n\nArch 提供了 BT 和 HTTP 两种方式（NetBoot 基本上不能用），至于使用哪一个完全是个人喜好的问题。BT 种子在页面最上面，而 HTTP 下载在比较下面的位置，并且提供了一堆镜像。\n\n你需要下载的文件应当是 `archlinux-x86_64.iso`，中间可能会多出一个日期，但不会有多余的前后缀。把下载的文件重命名为这个名字，以便后面的命令处理。\n\n---\n\n获得镜像后请**务必进行完整性校验**，这是操作系统级的东西，不能容许哪怕一点出错。\n\n```bash\n# GNU/Linux\nsha1sum archlinux-x86_64.iso\nmd5sum archlinux-x86_64.iso\n# Windows\ncertutil -hashfile archlinux-x86_64.iso SHA1\ncertutil -hashfile archlinux-x86_64.iso MD5\n```\n\n如果不会使用终端，请试着学习一下，这并不困难。你不需要记住那些命令，只需要知道如何照着指南键入它们。你也可以使用一些具有图形界面的工具完成校验。\n\n确保输出的结果与 Arch 官网（一定要是官网啊）上的完全一致（在 HTTP 镜像列表之前，请仔细找一下）。使用两种校验方式，只是以防万一。\n\n如果校验结果不一致，尝试重新下载，如果文件看上去依然有问题，可换一个镜像，并将错误的镜像报告给 Arch 的维护者，以便他们排查问题。\n\n### 制作可启动介质\n\n#### GNU/Linux\n\n把 USB 插入电脑，执行：\n\n```bash\nsudo fdisk -l\nsudo dd if=archlinux-x86_64.iso of=/dev/<YourUSBDevice>\nsync\n```\n\n`fdisk` 的目的是找出你的 USB 对应的标识，通常是 `/dev/sdb` 或者 `/dev/sdc`（可以根据容量判断）。**请在确认这是你的 USB 之后再执行写入**，写入错误的磁盘会造成数据损毁。\n\n写入完成后，拔出 USB 插入目标计算机。\n\n#### Windows\n\n在 Windows 上，你可以使用 [Etcher](https://www.balena.io/etcher/) 完成这个过程，[Rufus](https://rufus.ie) 也可以，但**不可以使用 UltraISO**，可能导致启动错误。\n\n如果程序询问你引导和分区表类型，记得选择 UEFI 引导和 GPT 格式分区表。如果还询问你写入模式，选择 DD 模式。\n\n写入后 USB 将从系统中消失，但我们确信我们已经成功写入了镜像，这是正常的（Windows 还不能识别这种结构）。确认写入完成后，就可以拔出 USB 并插入目标计算机了。\n\n### 启动设置\n\n关闭你的目标机器（确保是充分的关闭，不是休眠或者挂起之类的），稍等片刻后启动，并设法进入 UEFI 设置：\n\n- 对于大多数笔记本电脑，按住或连续按下 `Esc` 按钮，并选择类似 `UEFI/BIOS Settings` 的选项（如果有）。\n\n- 对于大多数台式机，按住或连续按下 `Del` 按钮或 `F8` 按钮，如果不行，再试试 `Enter` 按钮，直到有办法进入 UEFI 设置。或者，如果知道主板型号，可以查询如何进入其 UEFI 设置。\n\n> 尽管这个程序的正确名称应该是 UEFI 选项，但一些地方并不区分它和 BIOS，所以查找资料时，请也试试 BIOS 这个名字。\n\n---\n\n对 UEFI 选项做如下调整：（标注「必须」的是一定要完成的，其它是可选的）\n\n- 关闭快速启动（Fast Boot）和**安全启动**（Secure Boot），后者尤其重要。（必须）\n  \n  *如果你使用了诸如 Windows Hello 的功能，请务必先完成安装，进行安全启动配置，并且能够正常启动 Arch 之后，重新打开安全启动，再启动 Windows。否则，你可能会吃苦头。*\n\n- 如果进行过超频，现在暂时将处理器电压和内存频率等调回原来的数值，以免影响后续步骤。\n\n- 启用 UEFI 引导，并将其设置为默认或优先。（必须）\n\n- 关闭 CSM 支持模块。\n  \n  *启用 CSM 当然也可以正常启动，然而 Linux 内核很容易被错误的模式加载，解决这个问题的根本方法就是彻底禁用 CSM。*\n\n- 将 USB 设备设置为第一启动项。（必须）\n\n- 校准时间。\n\n保存设置并重启，随后计算机会从 USB 启动。\n\n### 接入网络\n\nArch LiveCD 启动后会弹出一个菜单供你选择（启动哪一个），应当选择有 `archiso` 或者 `Arch Linux` 字样的（通常在菜单第一项），使用上下键选定，按回车确认。\n\n要经过几秒的加载（较慢的 USB 或处理器会需要十几秒），你才能看见 Arch LiveCD 环境的终端：\n\n```\nroot@archiso ~ #\n```\n\n要做的第一件事情是确认终端可以正常运行，键入以下内容并回车：\n\n```bash\nwhoami\n```\n\n应当输出 `root`。\n\n> 如果你从没使用过 GNU/Linux 终端，你可能不习惯，这里没有鼠标，也没有好看的图像，只有苍白的提示符，所有的操作需要键盘完成。不过事实上终端是很人性化的，你只需要正确输入命令。请坚持一下，我们最后的结果可不会是这样！\n\n---\n\n现在，如果你的设备可以连接有线网络， 那么将电缆插入网口，网络连接即自动完成。\n\n如果没有办法使用有线连接，运行：\n\n```bash\nrfkill unblock all\niwctl\n```\n\n你将会进入无线连接控制面板，这里同样没有好看的图像，只有一个提示符等待你的输入，但我们相信它完全可以满足我们的要求。现在输入：\n\n```bash\ndevice list\n```\n\n找到你的无线设备，通常应当包含 `wlan` 字样（而且通常是 `wlan0`），记下它的名字。\n\n*如果你好奇，那么我可以告诉你 `lo` 表示本机（本地环回接口），`eth`、`ens`、`eno`、`enp` 是不同类型的以太网卡（通常是有线）。*\n\n如果找到了不止一个无线网卡，请在下一步中都试试。\n\n---\n\n现在搜索网络：\n\n```bash\nstation <Adaptor> get-networks\n```\n\n将 `<Adaptor>` 替换成网卡的名字，例如 `wlan0`。请确保输入的命令正确。如果你输入了错误的命令，计算机会显示错误消息以示嘲讽。\n\n输出中会出现网卡所发现的周边网络，选择你认为合适的一个，记下名字，然后执行：\n\n```bash\nstation <Adaptor> connect <NetworkSSID>\n```\n\n类似的，把 `<NetworkSSID>` 替换为网络名即可。\n\n遗憾的是，`iwctl` 无法显示或使用非 ASCII 字符的 WLAN SSID（网络名）。如果你在使用个人热点，这可能是一个需要考虑的问题。\n\n*这并不是 `iwctl` 本身的缺陷，而是因为你现在的环境下还没有其它语言的输入法，也没有其它语言的字体及显示支持。*\n\n连接完毕后返回 Arch 终端：\n\n```bash\nexit\n```\n\n---\n\n测试连接是否正常：\n\n```bash\nping archlinux.org\n```\n\n希望你能得到 `64 bytes from xxx` 这样的输出，那么你的网络连接完全正常。\n\n如果看到 `Timeout`，请尝试 `ping` 另一个主机（例如 `ping 1.2.4.8`），如果依然超时，请检查一下路由器和网关，或者试着换一个网络。\n\n*有些主机无法进行 Ping 检测，这是正常的，因为 Ping 也可以作为攻击手段，部分主机为防御攻击而禁止了 Ping。*\n\n如果连接通畅，按 `Ctrl + C` 组合键中断 `ping` 进程，键入：\n\n```bash\nclear\n```\n\n以将屏幕清空。此后我们不会单独执行这条命令，但你可以在认为屏幕太乱的时候执行它。\n\n### 调整时间\n\n执行：\n\n```bash\nhwclock --systohc --utc\ntimedatectl set-ntp true\n```\n\n它们的执行需要几秒钟（联网对时），完成后运行：\n\n```bash\ntimedatectl status\n```\n\n确保输出时间是正确的。\n\n*如果时间相差几个小时也是没问题的，因为这是 UTC 时间，要考虑时区偏移的问题。*\n\n### 分区\n\n检查计算机上的磁盘：\n\n```bash\nfdisk -l\n```\n\n输出像是：\n\n```\nDisk /dev/sdb: 415.411 GiB, ...\n```\n\n而且可能不止一个。\n\n---\n\n如果上面的输出太乱，你也可以选择使用：\n\n```bash\nlsblk\n```\n\n它的输出更简单：\n\n```\nsdb                     disk\n|-- sdb1    888.88 G    part\n```\n\n`disk` 表示磁盘，`part` 表示磁盘下的分区。\n\n---\n\n你需要选择正确的用于安装的**磁盘**（不是分区），可以通过看容量来辨别。\n\n记住 `Disk` 后面的设备标识（`fdisk`）或者 `disk` 对应的磁盘（`lsblk`）。**不要看走眼**。如果在安装多个操作系统，这一点更加重要。\n\n通常要安装到 SSD 上（类似 `/dev/sda`），如果是机械硬盘，则可能是 `/dev/hda`，NVMe 闪存则是 `/dev/nvme0n1`，最后的那个字符可能会变化，但大体上看起来差不多。\n\n---\n\n确定你的磁盘后，执行以下命令开始分区：\n\n```bash\nfdisk /dev/<YourDisk>\n```\n\n`<YourDisk>` 自然应该换成磁盘名字，以后这类替换我们不再赘述。\n\n`fdisk` 随后会进入交互模式（就像 `iwctl`），现在来创建以下几个分区：\n\n- 512 MB 的 EFI 启动分区\n\n- 大约 4 GB 的交换分区\n\n- 其余所有空间的主要分区\n\n*实际上交换分区的大小可以自定，但不建议完全不设置（会增大内存压力），通常设置为内存大小和 4 GiB 中较小的那一个。此外，增大交换空间虽然不会拖累性能但毕竟会占用空间，如果拿不定注意，可以暂时不分配，稍后可以创建交换文件来解决这个问题。*\n\nEFI 启动区的分配则需要考虑更多：\n\n- 如果你只安装一套操作系统，则必须分配。\n\n- 如果先前计算机上已经存在 GNU/Linux 或类似操作系统，不必重新分配（如果你知道这个分区在哪里），可以直接使用。\n\n- 如果先前计算机上安装着 Windows，则应当重新分配，因为 Windows 默认 EFI 分区可能不足以存储启动信息。\n\n*高级用户可能会为 `/home` 或者 `/etc` 等创建单独的分区，这样以后当系统重新安装时，可以保留个人文件和设置，如果有兴趣可以尝试。*\n\n---\n\n确定目标后开始行动：\n\n1. 如果你要**清除整个磁盘并安装**，则首先完成这个过程，否则请跳过这一步：\n   \n   1. 键入 `d`，删除分区。\n   \n   2. 如果有多个分区，`fdisk` 会询问要删除哪一个，键入 `1`。\n   \n   3. 重复以上过程，直到所有分区被删除。\n   \n   4. 键入 `g`，创建新的 GPT 分区表。\n\n2. 键入 `n` 新建分区。\n\n3. 询问分区号的时候，按回车默认，但要记住它。（空磁盘会是 `1`，已有分区的磁盘会更大）\n\n4. 询问第一个扇区的时候，按回车默认。\n\n5. 询问最后一个扇区的时候，键入 `+512M`，按回车确认。`fdisk` 就会为你创建一个 512 MB 大小的分区。\n\n6. 键入 `t` 变更分区类型，通常会自动选择刚刚创建的分区，如果没有，键入刚刚记下的分区号。（现在也不要忘掉，等会会用到）\n\n7. 键入 `1`，设定为「EFI 启动分区」（EFI System）。\n\n8. 重复 2~7，再建立一个 4 GB（或者其它你喜欢的大小）的交换分区（`+4GB`），不过这次要键入 `19` 设定为「交换分区」（Linux Swap，这个数字可以通过键入 `t` 再键入 `L` 来获得）。\n\n9. 重复 2~7，再建立最后一个分区，输入大小时直接按回车，即默认选择剩余的全部空间。不需要更改分区类型（默认是 Linux 文件系统）。\n\n10. **检查**，这很重要。键入 `l` 并仔细查看输出，检查分区是否正确。如果需要帮助，可以键入 `m`。\n\n11. 确认无误后，键入 `w`，修改被写入磁盘。如果你觉得做错了，键入 `q` 放弃修改，然后再试一次。\n\n*如果你真的很怕麻烦，不妨试试 `cfdisk`，它更加友好。不过对于有经验的用户，命令行会更快。*\n\n### 挂载\n\n> **挂载点**\n> \n> 稍微介绍一下挂载点，这是 Linux 的一大特色机制。\n> \n> 通常在 Windows 上，**磁盘是固定的，文件被存储在磁盘上**。这很符合我们的直观感受，没错吧？\n> \n> 现在在 Linux 中，我们必须改变这一想法，也就是，**文件是固定的，磁盘为文件提供空间**。\n> \n> 请花几分钟理解一下这个概念。\n> \n> 在 Linux 中，所有的文件路径都从 `/` 开始，这也就是所说的根目录，`/` 下设有 `etc`、`bin`、`usr`、`home` 等多个文件夹，这些文件夹可以被（物理上）放在一个分区上，也可以每个拥有自己的分区，应用程序无需关心这些，只需要提供路径即可访问文件，而具体的组织方式是由 `fstab` 等组件完成的。\n> \n> 举个简单的例子，如果将磁盘 A 挂载到 `/`，将磁盘 B 挂载到 `/home`，那么：\n> \n> - 文件 `/usr/bin/bash` 将被存储在磁盘 A 的某个位置\n> \n> - 文件 `/home/rarity/a.out` 将被存储在磁盘 B 的某个位置\n> \n> - 如果移除（卸载）磁盘 B，`/home` 仍然存在，但会变为空文件夹（或者它原先的内容），此时如果向其中写入文件，数据将被存储至磁盘 A。\n> \n> - 如果现在将磁盘 B 重新挂载到 `/home/ddd`，那么 `a.out` 的路径会变为：`/home/ddd/rarity/a.out`。\n> \n> - 从磁盘 B 的角度来看就很明白：文件实质上始终是 `/rarity/a.out`，之所以路径发生了变化，是因为挂载点不同，路径的计算起点不一样。\n> \n> 很快你就会发现这种方式比盘符简单灵活多了，因为很多命令可以无脑执行而根本不需要考虑盘符。\n\n下面挂载磁盘，一个磁盘只有在被挂载后才能通过文件系统进行访问。\n\n执行：\n\n```bash\nlsblk\n```\n\n找到你的磁盘（刚刚 `fdisk` 完成的），如果这么快就忘记了，可以根据容量判断。\n\n接下来找到你的分区（EFI 启动区，交换分区，主分区），可以根据容量判断，也可以根据分区号识别。例如，`/dev/sdb` 上分区号为 `3` 的分区被记录为 `/dev/sdb3`。\n\n*如果是 NVMe，则中间会多一个字母 `p`，例如 `nvme0n1p3` 而不是 `nvme0n13`，后者看上去就不对，请想想为什么。*\n\n然后创建挂载点，因为挂载点本质上是目录，所以这样做：\n\n```bash\nmkdir -p /mnt/home\nmkdir /mnt/boot\n```\n\n这两步创建了挂载点 `/mnt`，`/mnt/home`，`/mnt/boot`（`-p` 表示同时创建父目录）。\n\n*也许你会问，为什么需要这样一个 `/mnt` 呢？这其实就是很巧妙的地方：*\n\n> **`/mnt` 是什么？**\n> \n> 首先考虑我们现在在哪里，这是 Linux 中很重要的一个概念。\n> \n> 现在我们位于 Arch 的安装盘中，也就是说，现在的 `/` 是你的 **USB** 磁盘，而并非日后操作系统将要运行的，计算机里面的那个磁盘。\n> \n> 现在要做的是将几个分区挂载到 `/mnt` 和它的子目录，这样二者得到「对齐」，此后对 `/mnt` 内目录结构的修改，将被写入到计算机上的磁盘。\n> \n> 下一次从硬盘启动的时候，Arch 会将**计算机上磁盘的根目录作为 `/`**，这样原来的 `/mnt/home` 现在就变为 `/home`。（想想上面刚刚介绍的原理，磁盘实际上只存储了 `/mnt` 里面的东西）\n> \n> 看看，这就是 Linux 解决这种问题的巧妙方法。如果在 Windows 上想这样做，那是要费不少劲的。\n> \n> 我们只需要把一个系统安装到 `/mnt` 里面，然后切换根磁盘，就可以使用这个系统！这个方式有点像把树的一根枝条剪下来插在土里又长成一棵新的树一样。只要理解了，就会发现十分方便，而且由于不涉及写入当前正在运行系统的磁盘，所以不会产生半路崩溃之类的问题。\n> \n> 至于叫作 `/mnt` 并不是硬性要求，只是习惯上的命名。\n\n---\n\n挂载的分区是「生的」，为了使用它，必须格式化分区：\n\n```bash\nmkfs.f2fs /dev/<MainPart>\n```\n\n这里的占位符请替换为**主分区**（除了 EFI 和交换的那一个）。此命令用于格式化分区为 F2FS 格式，如果你听说过 EXT4，并且想用，只需要换成 `mkfs.ext4` 就行了。当然，你还可以选择 `btrfs`、`xfs` 等，具体区别这里就不介绍了。\n\n挂载：\n\n```bash\nmount /dev/<MainPart> /mnt\n```\n\n这样此分区就和 `/mnt` 绑定。\n\n使用类似的方法挂载 EFI 分区（512 MB 大小的那个）：\n\n```bash\nmkfs.vfat -F32 /dev/<EFIPart>\nmount /dev/<EFIPart> /mnt/boot\n```\n\n注意到这里实际上创建了 FAT32 文件系统，这是出于兼容性的考虑。\n\n交换分区的创建有些不一样：\n\n```bash\nmkswap /dev/<SwapPart>\nswapon /dev/<SwapPart>\n```\n\n整个过程一气呵成，但依然要注意不要输入错误的分区，否则当数据损毁后，你会十分沮丧。\n\n现在来看看我们已经做了什么：\n\n```bash\nlsblk\n```\n\n观察输出，现在应该像是：\n\n```\nsdb                   disk\n|-- sdb1    512.0M    part    /mnt/boot\n|-- sdb2      4.0G    part    [SWAP]\n|-- sdb3    114.5G    part    /mnt\n```\n\n分区的右边多出了挂载点标记。\n\n如果一切都正确，那么我们可以继续，如果看上去不对，那就深吸一口气，然后检查哪里出了问题。\n\n### 安装基本软件包\n\n一个操作系统总是由很多软件构成的，因此并没有所谓的「操作系统安装过程」，本质上，就是要安装和配置一堆软件包而已（当然有点太多了）。\n\n现在我们已经为新的 Arch 准备了空间，然而 `/mnt` 事实上还是空的，里面什么都没有，就此启动系统，肯定不成功。这也就是你手里的安装盘的作用之二（之一是启动系统）。所以，我们来安装 Arch 的基本软件包。\n\n执行以下命令：\n\n```bash\nreflector --country <Country> --latest 5 --sort rate --save /etc/pacman.d/mirrorlist \n```\n\n这个命令获取位于指定国家的五个最近更新的软件源服务器，且对它们进行按速率排序。至于什么是软件源，我们马上介绍。\n\n`<Country>` 设置为你所在的国家就行了（只是举例，中国大陆为 `China`，法国为 `France`，当然要是你坚持写 `Antarctica`，也没有人拦着你）。存在空格的名字，须在两边加上引号，例如 `\"United Kingdom\"`，否则会引发错误。\n\n这个命令的执行需要一分钟左右，所以请耐心等一下。\n\n---\n\n上一条命令完成后运行：\n\n```bash\npacman -Syy\n```\n\n此命令更新软件源列表。\n\n你可以把软件源想象成应用市场，但有一点点区别，因为应用市场是在需要时通过网络取得软件列表的，软件源则相反，软件列表被下载到电脑上，要用时直接查找就行了，所以在安装新的软件前，必须更新软件源以知道现在仓库中都提供哪些版本的软件。\n\n更新密钥环：\n\n```bash\npacman -Sy archlinux-keyring\n```\n\n这条命令更新 Arch 仓库维护者的密钥。\n\n每个软件包在 Arch 上传时均经过签名确认完整性，`pacman` 会在下载软件后验证签名，确保文件没有被篡改（不是怕镜像站坑你，是为了避免在传输过程中出现的随机错误）。\n\n更新这些密钥后，`pacman` 才能处理新的软件包。\n\n> **包管理器与 `pacman`**\n> \n> 你或许对包管理器不陌生，`npm`、`apt`、`nuget`、`pip`、`gem`、`yum`、`dnf`、`cargo`、`mvn` 等等都是各种各样的包管理器，这些里面几乎肯定有几个是你见过的。包管理器负责下载、安装、配置、卸载软件，解决依赖关系这样的工作。\n> \n> 在 Windows 上你或许没有这样的感受，这是因为大多数软件都把它自己的依赖打包了起来，随软件一起附上，带来的唯一问题就是庞大的体积。\n> \n> 在 GNU/Linux 上的软件都很小，而且你可以依赖仓库里任何你想要的软件包，包管理器确保你的软件在用户机器上具有合适的环境。\n> \n> 这种机制不仅方便软件的更新，也节约了不少空间。想想你电脑里的数百个乃至数千个 `vcruntime114514.dll`，真是好可怕——当然，举个例子。\n> \n> `pacman`~~（怕充满）~~是 Arch 的包管理器，负责从 Arch 官方仓库下载和安装软件包。你当然可以为你的 Arch 选配 `apt` 或者 `yum`，只要处理得当都没问题。但 `pacman` 是 Arch 官方使用的，出了问题虽然不包退换，却更容易得到帮助。\n\n---\n\n现在安装基本的软件包：\n\n```bash\npacstrap /mnt base base-devel linux linux-firmware nano\n```\n\n`base` 是 Arch 的核心部分，`base-devel` 是基本软件包组，`linux` 是内核，`linux-firmware` 是固件支持程序，`nano` 是文本编辑器，仅此而已。\n\n如果主分区选择了 EXT4 文件系统，此处还必须安装 `e2fsprogs` 以支持它，简单将其添加在命令的最后面就行了。\n\n`pacstrap` 能做一系列工作配置这些软件包（组），自然，使用 `pacman` 一个个来也是可以的，不过是会多一个损坏的键盘和一些折断的手指。\n\n这个过程需要几分钟，你可以去玩一会你喜欢的游戏。\n\n### 生成分区挂载表\n\n还记得刚刚我们执行了一些 `mount` 命令吗？Arch 是不知道要如何挂载那几个分区的，因此，即使现在它们还处于挂载状态，但下一次启动时，它们并不会自动挂载，也就没办法进行读写。\n\n我们必须对 `fstab` 进行设定，它位于 `/etc/fstab`，这个表告诉 Arch 如何挂载各分区。以往这个设定是很麻烦的，要查询各个分区的 UUID，然后设定合适的模式，不仅繁琐，还很容易出错。现在随着自动化的进展，这个过程可以自动完成：\n\n```bash\ngenfstab -U -p /mnt >> /mnt/etc/fstab\n```\n\n它检测一些环境参数，然后生成合适的 `fstab`，要记住现在我们还是在 USB 中，并不是在真正的系统中（它在 `/mnt` 下），因此磁盘上的 `/etc/fstab` 对应着现在环境中的 `/mnt/etc/fstab`。\n\n由于这个文件实在太重要了，因此我们确认一下它真的生成了：\n\n```bash\ncat /mnt/etc/fstab\n```\n\n虽然 ArchWiki 建议你检查其中的错误，但是其实如果真的有漏洞也很难看出来，你只需要注意 `swap`、`/`、`/boot` 等字样，如果它们出现了，那么基本上就没有问题。\n\n`cat` 用于输出一个或多个文件内容。至于为什么不叫 `dog` 已经超出了我们的讨论范围，如果感兴趣可以自行搜索。\n\n### 进入系统\n\n接下来的所有操作都需要在实际的系统上完成，因为大多数软件希望系统位于 `/`，这样它们才能正常运行，但我们知道它现在位于 `/mnt`。如果现在从硬盘重启，系统确实就会位于 `/`，但是会有以下问题：\n\n- 环境没有配置好，USB 提供的很多工具并不包含在刚刚安装的系统中（还记得吗，我们只是安装了 `base linux linux-firmware`）。\n\n- 更要命的是，GRUB 引导文件没有生成，根本就无法启动。\n\n所以我们需要有一个工具来模拟一个环境，使系统好像就位于 `/` 而不是 `/mnt`，这就是 `arch-chroot`：\n\n```bash\narch-chroot /mnt\n```\n\n此命令一旦完成执行，终端就会发生变化，从此开始，`/mnt` 被映射到 `/`，你就「进入」了新安装的系统。当然这只是把根目录切换了一下，实际在运行的还是 USB 里面的那个 LiveCD 安装程序。\n\n### 更新软件源和密钥环\n\n为了避免一会儿忘记，我们现在更新 `pacman` 的软件源和密钥环：\n\n```bash\npacman -Syy\npacman -Sy archlinux-keyring\n```\n\n之所以还要更新一次，是因为之前那一次更新只更新了 LiveCD 的软件源和密钥环，这一次是更新实际操作系统中的那一份。\n\n*`reflector` 不需要重新执行，因为安装时已经自动为你复制好了。*\n\n### 校正时间\n\n使用 `ln` 命令设定时区：\n\n```bash\nln -sf /usr/share/zoneinfo/<Region>/<City> /etc/localtime\n```\n\n如果你在中国大陆，`<Region>` 就是 `Asia`，`<City>` 就是 `Shanghai`。\n\n*`ln` 的实际作用其实是创建文件链接（不是 URL，那是超链接），有点像快捷方式，在这里它把 `/etc/localtime` 指向 `/usr/share/zoneinfo/<Region>/<City>`，从应用程序层面而言，这两个文件的内容（看上去）会始终保持一致。不能简单复制文件，因为时间信息是每时每刻都在变的。*\n\n---\n\n如果你想要知道所有可能的时区，可以这样做：\n\n```bash\nls /usr/share/zoneinfo/<Region>\n```\n\n这会列出所有可能的地区（大洲）。\n\n```bash\nls /usr/share/zoneinfo/Asia\n```\n\n这会列出亚洲所有可能的时区设置。只需要选择和自己在同一时区的城市即可，因为它只用来设置时间。\n\n`ls` 用于列出某个目录下的所有子目录（子文件夹）。\n\n---\n\n调整时间：\n\n```bash\nhwclock --systohc --utc\ntimedatectl set-ntp true\n```\n\n### 本地化\n\n为了能够设置操作系统的语言，我们需要进行本地化过程。\n\n编辑文件：\n\n```bash\nnano /etc/locale.gen\n```\n\n你将进入 `nano` 的文件编辑界面，使用上下键移动视图，找到这样两行（并不是挨在一起的）：\n\n```\n#en_US.UTF-8 UTF-8\n#zh_CN.UTF-8 UTF-8\n```\n\n删除它们之前的 `#` 符号，然后按 `Ctrl + X`，`nano` 会询问是否要保存，键入 `y` 并回车确认。\n\n如果你打开时文件为空，那么一定是哪里弄错了。退出 `nano`（不要保存），重新输入正确的命令。\n\n---\n\n现在运行：\n\n```bash\nlocale-gen\n```\n\n这个程序会生成必要的本地化文件。\n\n运行完成后，编辑文件：\n\n```bash\nnano /etc/locale.conf\n```\n\n和之前那一条很像，但并不相同，请注意准确地拼写。这个文件不存在，所以打开时应当为空。\n\n向其中写入以下内容，然后保存：\n\n```\nLANG=en_US.UTF-8\n```\n\n设置为英文是有道理的，因为这是用于系统级的本地化，考虑到控制台（TTY）其实很难处理非 ASCII 字符。如果将来系统出了问题，我们还得回到控制台，这时如果输出全是乱码，你会有被蟒蛇缠住的感觉。\n\n### 网络设置\n\n现在来设置主机名：\n\n```bash\necho \"<ComputerName>\" >> /etc/hostname\n```\n\n`echo` 和 `>>` 配合使用用于直接将 `echo` 后面的内容写入文件，而不需要去打开编辑器，很快你会发现这很实用。\n\n引号 `\"\"` 有时是可选的，但是为了不出现意外，还是加上吧。\n\n`>>` 是重定向标识，`echo` 的默认输出是 `stdout`（标准输出），为了将其写入文件需要将输出流「接到」文件上。\n\n计算机名不应当包含空格。此外，虽然没有严格限制，但出于兼容性的考虑，请还是尽量只使用 ASCII 字符。\n\n---\n\n接下来绑定本地回环端口，如果不知道这是什么也不要紧，因为对于大多数情况，这个设置都是固定的。\n\n```bash\nnano /etc/hosts\n```\n\n这个文件可能已经存在，也可能为空。不管怎样，向其中填写以下内容并保存：\n\n```\n127.0.0.1 localhost\n::1 localhost\n127.0.1.1 <ComputerName>.localdomain <ComputerName>\n```\n\n`<ComputerName>` 应该替换为上一步所选择的计算机名。因为这是在编辑文件，我们怕你忘记了。\n\n*注意最后一行开头是 `127.0.1.1`（不是 `127.0.0.1`）。虽然它并没有任何特殊的地方，但不知为何，很多人把这个数字填错。就像「管理员」和「管埋员」一样。*\n\n### 创建帐户\n\n操作系统必须有帐户才能访问。历史上的一台电脑都是好多人公用的（即使现在也是），由于 PC 的普及，很多计算机上只有一个帐户，但不管怎么样，现在我们的系统什么也没有，所以需要创建帐户。\n\n首先运行以下命令：\n\n```bash\npasswd\n```\n\n这用于设置 `root` 的密码。`root` 是绝大多数 GNU/Linux 上的最高权限帐户，拥有控制系统一切的权力，因此该密码请勿设置得太简单（但是也不要胡乱输入，如果忘记会很麻烦）。\n\n输入密码没有回显，确保输入正确后回车即可。（退格键依然可以使用）\n\n---\n\n现在来创建和设定个人帐户。（不能什么事都以 `root` 身份完成，否则如果你运行了一个恶意软件，它将可以删除计算机上的所有内容，还能任意解码你的密码，这太可怕了！）\n\n```bash\nuseradd -m -G wheel -s /bin/bash <UserName>\n```\n\n用户名可以自选，但是依然要使用 ASCII 字符，并且不能有空格。此外如果使用字母，只有小写字母可以被接受。\n\n设定密码：\n\n```bash\npasswd <UserName>\n```\n\n这和设定 `root` 的方法是一样的，不过由于需要经常使用，建议设置得简单好记（但不可以少于 6 个字符）。\n\n---\n\n个人帐户是没有控制系统目录的权限的，当然可以通过登录到 `root` 来做这些操作，但是这样会带来两个问题：\n\n- `root` 的密码太长，登录很麻烦。\n\n- 这让问题又回到原点。\n\n所以我们要使用 `sudo`，它允许被授权的普通用户使用 `sudo` 命令来临时获取管理员权限。刚刚所创建的新用户并不在这里，所以我们需要告诉 `sudo`。\n\n```bash\nnano /etc/sudoers\n```\n\n找到如下一行（或者类似的）：\n\n```bash\n# %wheel ALL=(ALL:ALL) ALL\n```\n\n*类似这样的行在此文件中共有三行，它们靠得比较近，请确保你选择的是第一个（第四个 `ALL` 后不应当再有任何后缀）。*\n\n去掉最前面的 `#` 和空格，然后保存并退出。\n\n### 安装微码\n\n微码控制处理器的指令解释，有时也用来修正硬件错误。既然是 CPU 级别的，那么怎么想也都应该安装上。\n\n运行下面两条命令中合适的一条：\n\n```bash\npacman -S amd-ucode # AMD\npacman -S intel-ucode # Intel\n```\n\n`#` 后面的是注释，是给你看的，不用输入终端。\n\n两条命令只需执行一条，根据你机器搭载的 CPU 选择即可。\n\n### 安装网络组件\n\n新的操作系统什么也没有，而且稍后重启时我们还要继续在终端操作，所以现在安装网络组件：\n\n```bash\npacman -S networkmanager\nsystemctl enable networkmanager\n```\n\n### 启动引导\n\n在继续之前我们要说明一点额外的东西，当然，这对于后续步骤暂时没有影响，如果着急，可以先跳过。\n\n> **还需要启动引导程序吗？**\n> \n> 你可能听说过 GRUB 这个名字，它是大多数 GNU/Linux 发行版的默认启动引导程序，GRUB 异常的强大，可以引导几乎所有的操作系统内核。\n> \n> 但是，进入 UEFI 时代后，我们其实多了一种选择：**直接生成 Linux 内核的 EFI 启动文件并交由 EFI 引导**（不应当称之为 BIOS，因为 EFI 和 BIOS 并不一样）。这会使得启动略快一些。不过这是相当麻烦的，因为要手动（或者设置自动程序）生成内核的引导文件。如果启用了安全启动，还要进行内核签名。\n> \n> 以上问题当然是有解决方案的，但这已经超出了本指南的范围，我们会在其它文章中再行介绍。另外，使用 EFI 直接引导时不方便选择启动系统（需要进入 EFI 菜单），所以只建议单系统用户使用。\n> \n> 不管怎样，让我们先安装 GRUB 吧，因为下一次重启就需要引导。除非你打算在这里完成 EFI 的配置，但如果你真的做了，你会有后脑勺被拳头砸过的感觉。\n\n如果在安装双系统，请先执行以下命令：\n\n```bash\npacman -S os-prober\n```\n\n这个程序可以识别其它的操作系统。\n\n现在下载 GRUB 软件包：\n\n```bash\npacman -S grub\n```\n\n然后安装 GRUB 到指定的 EFI 分区：\n\n```bash\ngrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub --recheck\n```\n\n命令很长，但依然要准确地输入。如果哪里不正确，GRUB 会提醒你。\n\n---\n\n现在配置 `os-prober`：\n\n```bash\necho \"GRUB_DISABLE_OS_PROBER=false\" >> /etc/default/grub\n```\n\n看看，我们再次使用 `echo` 和 `>>` 完成了文件写入。\n\n> **巧妙的命令组合**\n> \n> 为什么没有类似 `write-file a.txt \"hello, world\"` 这样的命令？\n> \n> 这是因为使用已有的命令组合（在这里是 `echo` 和重定向）足以简单地完成这些任务，而且还可以提供极高的自定义过程。\n> \n> 想想下面这两个问题：如果我想同时写入两个甚至八个文件怎么办？如果同时还想做些筛选怎么办？这就得设计很多很多的命令！\n> \n> 这样做会带来两个问题：\n> \n> - 系统执行命令的速度会变慢（因为要查找命令）。\n> \n> - `write-8-files-and-search` 这样的命令会让人不禁担忧设计这种命令的人是否已经疯了。\n> \n> 你可以试着搜索一下 `tee` 和 `grep`，看看如何使用它们的组合解决这些问题。\n> \n> GNU 所编写的程序（当然还有很多其它程序）都遵循「单一功能原则」：一个程序只负责一个任务，例如 `cat` 只负责读文件，而 `grep` 只负责查找——虽然它的查找功能十分强大，但也只是查找。\n> \n> 通常我们称这种程序为「工具」（Tools），而称那些有很多功能的程序（例如 GIMP）为「应用」（Applications）。\n\n---\n\n现在运行以下命令：\n\n```bash\ngrub-mkconfig -o /boot/grub/grub.cfg\n```\n\n此命令生成供 GRUB 读取的配置文件，用于启动。\n\n在输出中你应当看到 `vmlinuz-linux`、`initramfs-linux` 等字样，并且要确保最后 GRUB 输出了 `done`。\n\n如果缺少了哪一个，或者看上去有问题，那么请再试一试，如果依然不行，那么……如果你愿意，可以键入 `exit` 返回 LiveCD，再键入 `reboot` 重启，之后你可以从头再来（当然，不必重新分区了）。\n\n### 重启\n\n我们很想一鼓作气，但处理器看上去已经受不了了。正好借此机会，我们来确认一下 GRUB 能否正常运行，同时看看我们已经做了多少。\n\n执行：\n\n```bash\nexit\n```\n\n退出当前系统（还记得 `arch-chroot` 吗）。\n\n再执行：\n\n```bash\nshutdown now\n```\n\n来关闭计算机。\n\n等指示灯熄灭，所有的部件都冷却下来后，拔下 USB，然后再接通电源开机。\n\n---\n\n开机时依然要设法进入 UEFI 设置，然后调整启动顺序，将 Arch Linux 或者 GRUB 作为第一启动项。\n\n有时它可能不叫这个名字，没有关系，只要确保将「Windows Boot Manager」放在最后，一般 Arch 也就相应地放在最前面了。\n\n现在等待系统启动（通常几秒钟），随后你会看到 Arch 的登录界面：\n\n```\n<ComputerName> Login:\n```\n\n是的，依然没有好看的图像，但是我们现在有相当的信心，因为我们已经知道如何驾驭终端，既然如此，好看的图像还会远吗？\n\n在后面键入你的用户名并回车，随后 Arch 会向你询问密码：\n\n```\nPassword:\n```\n\n输入你的密码。密码仍然没有回显，确认输入正确后回车即可。\n\n随后你就可以回到熟悉的终端：\n\n```\n<UserName>@<ComputerName> ~ $\n```\n\n注意到 `@` 的前面已经变成了你的用户名，这也意味着此后我们的身份不再是 `root`，因此，执行一部分命令时，需要在最前面添加 `sudo`（如果你还记得它的作用）。\n\n### 安装桌面\n\n> **使用桌面环境还是窗口管理器？**\n> \n> 要回答这个问题，首先必须明确二者的区别。\n> \n> 桌面环境（DE）是窗口管理器（WM）的超集。DE 提供菜单栏，托盘，标题栏，小工具等多种组件集合，用上去很像其它操作系统的「桌面」。而 WM 通常只提供简单的窗口管理（包括层叠），操作主要依赖键盘。因为由于不涉及图形系统，很多 BUG 就不会产生。\n> \n> 本指南使用 DE，因为我们要创建的是桌面操作系统，所以应当尽可能给它「桌面」的感受，同时也不会给人太高的学习成本。但如果喜欢 WM，我们的其它文章中也会提到如何配置和安装。\n> \n> 如何在二者中做出选择本来就是一个比较的问题，但是有的时候或许我们并不需要选择，既然你已走上 Arch 这条路，或许有一天你能找出一个不错的解决方案。\n> \n> 谁知道呢？\n\n为 GNU/Linux 添加桌面本身就是安装几个应用程序的工作，所以这件事情并不困难。不过从这里开始是一个分界点，从此之后的很多软件并不是只有一种选择，我会尽可能列出多的可能，试图阐明它们的区别，不过最终的选择权依然在你的手中。\n\n#### 图形系统\n\n下面来面对这样一个问题：图形系统。它用于和桌面环境商定显示图像的方法。\n\n*我们希望尽可能将问题简单化，因此并未区分显示协议、窗口系统、显示协议实现等概念，而是统称图形系统。*\n\n目前，主流的选择有两个：\n\n- X Window System（X11），这个系统比较古老，这既是优势也是缺陷：\n  \n  - 支持面非常广泛（几乎所有）。\n  \n  - 运行稳定，BUG 较少。\n  \n  - 系统占用相当高（如果在玩 Minecraft 时运行 `top`，`Xorg` 经常紧挨在 `java` 的下面），运行比较慢。\n    \n    *在一些比较早期的文章中，X 被评价为「较慢」，但一段时间以来，各种实例都表明，X 的性能消耗已经远远不再是「较高」。在渲染程序越来越复杂的今天，X 的性能问题明显地暴露出来。*\n  \n  - 不太安全（类似 AutoHotKey 之类的东西是有可能存在的）。\n  \n  - 完全不兼容 Wayland，Wayland 程序不能在 X 上运行（除非使用 `weston` 混成器，但这样有为了使用 X 而使用 X 的嫌疑）。\n  \n  - 可供参考的资料比较多。\n\n- Wayland，这个系统比较新，虽然设计上是为了取代 X，但事实上它却和 X 形成了类似互补的关系——它的优势正是 X 的缺陷，反之亦然：\n  \n  - 支持面比较窄（虽然仍然在快速增加）。\n  \n  - 运行不太稳定，BUG 较多。\n  \n  - 系统占用较低（我们很难指望这么频繁使用的组件拥有极低的占用），运行很快。\n  \n  - 比较安全（如果未经许可，屏幕录制是不可能的）。\n  \n  - 大多数 X 应用程序可以在 Wayland 上运行（如果合理使用 `xwayland` 等兼容程序）。\n  \n  - 可供参考的资料比较少。\n\n*过去的很多文章中认为 Wayland 缺乏驱动程序，在当时的确如此，但这一现象现在已有所改善：NVIDIA 495 驱动已经提供了相应的支持，而 Nouveau 也基本上到位了（至少已经有成功的例子）。*\n\n---\n\n你可能在想「我全都要」。噢不，你不能。即使你设法安装了两套图形系统，你也只能使用一个。所以……\n\n> 做出你的选择，并承担相应的后果。\n\n现在我们回来，希望你已经做出了自己满意的回答。\n\n*不必为选择 X 而担心更新问题。影响如此巨大的图形系统更新时，一定会有成熟的解决方案。而且，并没有人规定你必须升级，这可不是 Windows Update！另外，即使 X 的性能的确不好，但还是比 Windows 强多了，你大可不必担心。*\n\n*也不必为选择 Wayland 而担心 BUG。尽管漏洞随时都存在，但是它们通常有合适的修复方案。即使不兼容，大多数情况下也可以通过将应用程序切换到 XWayland 上完成运行，而要是兼容，那就是赚了！*\n\n---\n\n如果决定使用 X：\n\n```bash\nsudo pacman -S xorg\n```\n\n如果决定使用 Wayland：\n\n```bash\nsudo pacman -S wayland wayland-protocols xorg-xwayland\n```\n\n#### 桌面环境\n\n现在你可以选择一个喜欢的桌面环境。\n\nKDE 还是 GNOME？噢不，这个看法也太狭隘了，来看看 ArchWiki 给出的一些选择（部分没有列出）：\n\n- Cinnamon\n\n- Cutefish\n\n- Enlightenment\n\n- GNOME\n\n- KDE\n\n- LXDE\n\n- Sugar\n\n- Xfce\n\n- Trinity\n\n……这只是一小部分。\n\n到这里的选择就很多了，我们不太可能在这里一一介绍。不过你可以前往 ArchWiki 并搜索名字（当然是英文）来进入其页面，并找到相应的安装方法和配置方法。\n\n同时你还需要为桌面环境选配一个显示管理器（Display Manager），常用的选择有很多，例如 GDM、LightDM、SDDM 等。\n\n在选择时要遵循一个原则：**先成套后搭配**，也就是说，如果桌面环境为你提供 DM（例如 GNOME 提供 GDM），就使用它提供的，否则再自行搭配（例如 Cinnamon 搭配 LightDM）。你同样可以在 ArchWiki 上找到一些建议。\n\n*当然如果你认为你的水平足够高，那么这些限制都可以随便打破，只要你知道遇到错误怎么处理。*\n\n---\n\n**但是**，我们所编写的是**指南**，一份指南怎能只告诉它的读者「去查 Wiki，然后自己试试」？负起指南的责任远远高于保持中立。所以，我们将介绍 GNOME 的安装方法，不过同时读者应当知道，这**只是万千选择中的一个**，请不要局限自己的视角，否则就失去了 Arch 宝贵的 DIY 特点。\n\n```bash\nsudo pacman -S gnome gdm\nsudo systemctl enable gdm\n```\n\n就这么简单。\n\n当然无论选配哪一个 DE、哪一个 DM，都要记得运行 `systemctl enable <DMName>` 来启动此 DM 的服务，否则将无法进入登录界面。\n\n顺便提一句，GNOME 已经正式支持 Wayland，所以若要让 GNOME 在 X 上运行，需要额外的配置，这里叙述从简，就不提及了。\n\n---\n\n### 驱动程序\n\n现在我们已经来到最后一步，也就是驱动程序的安装。\n\n大多数驱动程序已经内置在操作系统中，包括 `nouveau`、`mesa`、`amdgpu` 等。对于我们所使用的机器，并不需要安装任何额外的驱动，所有的组件都可以正常运行。由于我们还没有回到桌面环境，因此尚无法预知可能出现的问题，不过以下提供针对硬件的一些建议：\n\n- NVIDIA GPU（问题最多）：\n  \n  - 如果是唯一的图形卡，并且你的屏幕分辨率高（4K 及以上），那么 `nouveau`（内置的自由驱动程序）最高只能支持 30 Hz 的刷新率。\n    \n    我们不建议使用非自由软件，所以根据你自己的意愿，如果的确问题影响到正常使用，你可以使用 `nvidia` 这一专有驱动程序……但希望不需要。\n    \n    `nouveau` 已经内置，但如果你不得不使用专有驱动，可以运行以下命令：\n    \n    ```bash\n    sudo pacman -S nvidia\n    ```\n  \n  - 较新的图形卡使用 `nouveau` 就可以正常支持 Wayland，如果不能，那么和上面的解决方法一样。\n  \n  - 如果是加速用图形卡（例如双图形卡笔记本电脑中的独立图形卡），则通常无需单独安装驱动程序。\n  \n  - 太老的图形卡可能不被支持，并且无法正常运行 Wayland。\n\n- AMD GPU：\n  \n  - `mesa` 和 `amdgpu` 已经内置，它们应当可以驱动绝大多数现在流行的 AMD 图形卡。\n  \n  - 更老的图形卡需要 ATI 驱动程序，可参考 ArchWiki 完成安装。\n\n- Intel GPU：\n  \n  - 无需单独驱动，系统已经内置一套完美的（而且自由的）Intel 图形卡驱动程序。\n\n- 蓝牙：\n  \n  - 通常安装 `bluez` 和 `bluez-utils` 可以解决蓝牙驱动问题：\n    \n    ```bash\n    sudo pacman -S bluez bluez-utils\n    ```\n    \n    如果蓝牙没有自动激活，运行以下命令：\n    \n    ```bash\n    sudo systemctl enable bluetooth\n    sudo systemctl start bluetooth\n    ```\n  \n  - 有些桌面环境集成了蓝牙控制器，如果这样则无需单独安装。\n    \n    如果没有，那么可以使用 `bluetoothctl` 这样一个小巧的命令行控制器。\n\n- 触摸板\n  \n  - 无需单独驱动，`libinput` 足以处理大多数情况。\n\n- 声卡\n  \n  - 声卡这一装置已经如此流行，以至于甚至没有人注意到它还有驱动程序。从未有哪个外部设备如声卡一般如此统一和协调：无需驱动程序，它几乎肯定能用。\n\n- 鼠标和键盘\n  \n  - 作为 PIC 上的设备（PIC 1 和 PIC 12），鼠标和键盘通常无需驱动。\n\n- 打印机\n  \n  - 这有点复杂，基本上是要取决于打印机制造商对 OpenPrinting 的支持程度，不过下述几个步骤通常适用于大多数打印机。\n  \n  - 如果制造商提供了 GNU/Linux 的驱动程序，建议使用它。\n  \n  - 否则，试试 `cups` 与 `gutenprint`。\n  \n  - 如果这还不行，试着找到与你的机器最接近的驱动程序并使用。\n  \n  - 如果以上方法都不行，那么很遗憾，这台设备或许无法被驱动。\n\n- 摄像头\n  \n  - 通常无需单独安装驱动程序。如果它无法正常运转，请查阅 Wiki 上是否有对应机型的解决方案，或者联系其制造商。\n\n### 完成\n\n重启计算机，如果一切正常，GRUB 将可以引导 Arch Linux。如果在安装双系统，你会发现 Windows 也应该出现在 GRUB 选项中。（当然，要是没准备好安全启动，还是先不要动它）\n\n## 接下来做什么\n\n### 美化\n\n系统启动后一定会令你大吃一惊，因为默认的 GNOME 其实一点都不简陋，即使不安装主题，它也相当的优雅。\n\n当然，即使你没有使用 GNOME，其它的 DE 一定也为你提供了不错的体验，如果没有，请告诉他们，我相信大多数开发者会对于改善用户体验很有兴趣。\n\n如果你不喜欢默认的主题，那也没有关系，你可以在网络上搜索一些适合你的 DE 的主题，然后安装它，这些纯粹是个性化的东西，因此就不展开了。\n\n此外，GRUB 也是可以设定主题的，所以你知道要做什么了不？（大多数人都同意黑底白字绝对不是最好的设计）\n\nDM 也是可以设置主题的，不过相比桌面本身而言，可选的略微少了一些。当然，你可以设置自动登录来直接跳过登录过程，权限系统会保证操作系统的重要文件不受破坏。但是如果需要绝对的安全，还是不要这样做。\n\n声音什么的也是可调的，如果你之前不知道的话。\n\n### 安全启动\n\n**这并不是只有双系统才应当考虑的问题。**\n\nUEFI 新增的功能之一是安全启动，它保证所引导的内核已经过签名，这样可避免恶意软件侵入内核破坏操作系统。虽然大多数主板上内置 Microsoft 的 CA 证书，但其实这是可以修改的。\n\n绝大多数情况下，GNU/Linux 自身的安全已经足够，但是安全启动仍然应当被启用，如果没有安装 Windows，那么只需要一些不很复杂的配置，就可以在 `pacman` 每次升级内核时自动签名，而同时这也能保证你的安全。\n\n而如果要和 Windows 并存，问题也并不复杂，不过详细的操作方法已经超出我们的范围，所以只好以后有机会再说了。\n\n虽然说得挺吓人，但也不必太过慌张，你认为有多少恶意软件可以完美地注入到一个常常更新的内核中呢？所以你大可以直接删除 Windows，然后完全无视这个功能。以前没有安全启动的时候，我们碰到过这些问题吗？所以说，很多这样的问题，其实都是被「制造」出来的。\n\n> 如果用自己数年糟糕的使用体验去换一次防御病毒入侵的机会，那这种防御到底有什么意义？\n\n### 安装输入法\n\n如果要使用其它语言输入，应当安装输入法。对于中文（以及一些其它的语言），`fcitx-im` 和 `ibus` 等等都是不错的选择。注意在 Windows 上很流行的输入法通常在 GNU/Linux 上并不一定工作得很完美。\n\n### AUR\n\nAUR 是由社区维护的软件仓库，其中包含一些 `pacman` 不提供的。\n\n若要使用 AUR，请参考 [AUR 主页](https://aur.archlinux.org/) 的指南。\n\n### 更新系统\n\n也就是俗称的「滚」，它是指这条命令：\n\n```bash\npacman -Syu\n```\n\n它更新系统中的所有软件包，确保它们处于最新。\n\n这条命令需要频繁执行（几乎每天），因此你可能会希望给它安排一个系统服务来自动化这个过程。\n\n如果执行过程中出了错误也不要惊慌，因为世界上所有的 Arch 用户也会面临和你一样的问题。同理，开发者一定会在自己的电脑上测试后再发布，而测试环境绝大多数情况下和你的环境应该是几乎一样的。\n\n*这也是我们不建议使用 ArchLinuxCN 这样的扩展源的原因之一。使用统一的标准和规范，在出问题时更容易得到更多的帮助。当然这只是建议，请按自己的需求做最后决定。*\n\n### Wine\n\n[Wine](https://www.winehq.org/) 是一个可以在 GNU/Linux 上执行一些 Windows 应用程序的组件，它通过翻译 API 来完成这个过程。由于 Microsoft 并未公开一些方法的规范，因此 Wine 只能依靠猜测，所以会使得它不太稳定。但是，相当多的软件其实已经可以使用 Wine 来运行（.NET 3.5 和 4.6.1 可以「完美」运行，想想基于它创建的应用程序有多少）。\n\n如果你已经下定决心删除了 Windows，却又对 Windows 的一些应用程序念念不忘，或许 Wine 能够帮你渡过一段难关。\n\n你可能会认为我把一个 Windows 相关的问题放在这里不太合适，但是其实并不是如此。如果 Wine 是一个自由软件，而 GNU/Linux 也是，那么为什么这个组合就不能使用呢？至少这为更多使用 Arch 的人带来了希望啊。\n\n### 游戏\n\nGNU/Linux 的游戏环境比我以前预想的要**好太多了**。\n\nUnreal Engine 和 Unity 都支持 GNU/Linux，类似这样的通用游戏引擎还有很多。游戏公司如果愿意，可以提供针对 GNU/Linux 的发行版本（有些的确也是这么做的，例如 Dota 2 和 Minecraft）。\n\nSteam 上也有相当多的游戏可以在 GNU/Linux 上运行（约 70%），它们中有相当一部分虽然不原生支持，但可以通过转译等操作来运行，例如 Apex Legends、Warframe 和 Grand Theft Auto V。\n\n现在你还觉得 GNU/Linux 不适合游戏吗？其实一开始就不是这样。在 GNU/Linux 上，Minecraft 平均比 Windows 运行时帧率高约 50%，如果不信可以自己试试。\n\n对于移动设备上的游戏那就更加简单，因为模拟器实在是太多了。当然，不使用模拟器的方法也是有的，这里就不展开介绍了。\n\n另外，还有多少人不知道 Android 经过修改也可以直接安装在电脑上？\n\n### 开始你的创造\n\n> 一切到此结束，一切又由此而始……\n\n至此，我们的这份指南的主体部分就结束了，但这只是开始，现在你拥有了一套 Arch。也许它不完美，也许它不成熟，都不要紧。尽管整个过程费时费力，但是如果现在让你说说你的 Arch 上面有些什么，你是不是该了如指掌了？\n\n更重要的是，这一切是由你来指挥的，**计算机已经在你的掌控之中**！再想想捆绑安装的各种电脑管家，最多只能推迟 35 天的强制更新，没来由的各种弹窗，预装的成组软件……这样自己组装而来的系统，是不是有一种舒畅感？\n\n## 结语\n\n> 我本可以忍受黑暗，如果我不曾见过光明。\n\n再一次回头看我们最初的目标，一路走来并不容易，现在你坐在新拆封的桌面环境之前，想想之前的终端，是不是有一种冲出黑暗的感觉？如果是的，那么恭喜，欢迎你通过入职考核，正式成为 Arch 的一员！\n\n最后，让我们用一条有趣的命令结束这份指南……\n\n打开虚拟终端，它现在应该在应用列表里（如果 DE 已经集成）。不过要是没有，你可以按 `Ctrl + Alt + F1` 进入（熟悉的）TTY 终端，如果不行，再同时按下 `Fn`。\n\n键入（不要忘了切换到英文输入法）：\n\n```bash\ns='s=\\47%s\\47;printf \"$s\" \"$s\"';printf \"$s\" \"$s\"\n```\n\n（你可以多试试几次，没有危险！）\n\n它输出了些什么？你能再写出一个类似的程序吗？\n\n（要回到图形界面，按下 `Ctrl + Alt + F7`，如果不行，再同时按下 `Fn`）\n\nGNU/Linux 的世界远远比想象得要广阔和奇妙得多，一切皆有可能。\n\n> 这是属于你的世界，我很荣幸为你敲开它的大门。\n\n现在该说再见了！哦，如果你想要说些什么，评论区在下面。\n","slug":"ArchLinuxInstallGuide","published":1,"updated":"2022-08-04T03:14:07.587Z","_id":"cl6dfekwk0001egtgcjcrconf","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"story post-story\"><h2 id=\"欢迎\"><a href=\"#欢迎\" class=\"headerlink\" title=\"欢迎\"></a>欢迎</h2><p>既然你已经来到这里，说明你想要获得一份纯净的 GNU&#x2F;Linux，并且在万千选择中，挑中了你中意的那一个。这就是 Arch Linux，一个「注重简洁的发行版」。</p>\n<h3 id=\"我们从一个问题开始\"><a href=\"#我们从一个问题开始\" class=\"headerlink\" title=\"我们从一个问题开始\"></a>我们从一个问题开始</h3><blockquote>\n<p>Arch Linux 这么难用，为什么还要用它？</p>\n</blockquote>\n<p>Arch Linux 难用吗？<strong>当然难</strong>，我并不想骗你。</p>\n<p>如果按易用性来看，Debian，LinuxMint，CentOS，Ubuntu 都更好用，几个按钮就能解决的问题，多简单。</p>\n<p>可是似乎有一点不对……</p>\n<ul>\n<li><p>我为小巧精悍而来，我如何接受 Flatpak？</p>\n</li>\n<li><p>我为软件自由而来，我如何同意 SnapCraft？</p>\n</li>\n<li><p>我为安全可控而来，我如何理解自动更新？</p>\n</li>\n<li><p>我为隐私秘密而来，我如何认可数据收集？</p>\n</li>\n</ul>\n<p>如果所谓的易用性要以这些更为重要的东西为代价，那么这样得来的「好用」到底有什么价值？！</p>\n<p>……</p>\n<p>几乎所有的 GNU&#x2F;Linux 发行版都或多或少包含着「预装」和「产品」的成分，而 Arch Linux 是为数不多拒绝这样做的发行版之一。</p>\n<p>我选择 Arch Linux，不是因为其看上去专业，也并非因为它更加完美，事实上，它比大多数发行版都要简单，甚至是简陋。</p>\n<p><strong>而我看重的，正是这份简陋背后的单纯。我们相信你也是如此。</strong></p>\n<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>欢迎来到 Arch Linux 的世界！你一定已经对 Arch 有所耳闻，作为被称为「邪」的 Linux 发行版，Arch 和其它的发行版很不一样，它没有好看的 GUI，没有方便的安装程序，但这并不能掩饰它独特的魅力：</p>\n<ul>\n<li><p>滚动式发行，一次安装即可。</p>\n</li>\n<li><p>你能获得一套真正「纯净」的 GNU&#x2F;Linux 操作系统。</p>\n</li>\n<li><p>运行很快。</p>\n</li>\n<li><p>无需配置即免疫大多数病毒。</p>\n</li>\n<li><p>几乎不需要清理垃圾。</p>\n</li>\n<li><p>自由且开放，虽然 AUR 中存在部分专有软件，但我们可以选择。</p>\n</li>\n<li><p>非常好玩且有趣！（真的是这样！）</p>\n</li>\n<li><p>由于只支持一种架构，反而避免了很多问题。</p>\n</li>\n<li><p>拥有世界上最好的文档之一：<a href=\"https://wiki.archlinux.org/\">ArchWiki</a>。</p>\n</li>\n<li><p>会真正显得你很酷。</p>\n</li>\n</ul>\n<p>……诸如此类。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>在你能够开始你的旅途前，我们有一些需要说明的内容：</p>\n<ul>\n<li><p>本指南<strong>不是面向新手的</strong>。</p>\n<ul>\n<li><p>Arch Linux 本身也不是面向新手的。</p>\n</li>\n<li><p>你需要计算机基础知识，包括但不限于终端的基础概念和使用方法。你还得知道分区、UEFI、引导、BIOS 设置之类的是什么意思。</p>\n</li>\n<li><p>你需要对 GNU&#x2F;Linux 有最基本的了解，至少要知道有显示管理器，桌面环境这些概念（弄不清楚也没关系，但要知道有这么个东西）。</p>\n</li>\n<li><p>需要不错的英语，或者不错的翻译姬（例如 <a href=\"https://translate.google.com/\">Google 翻译</a> 以及它的 <a href=\"https://translate.google.cn/\">国内版</a>），因为你会需要 ArchWiki 的帮助，而有些条目是没有翻译的。</p>\n</li>\n</ul>\n<p>从头开始讲解以上内容会消耗大量的篇幅，在本站的其它地方你可以学习到上述内容的一部分。</p>\n</li>\n<li><p>请合理使用本指南。</p>\n<ul>\n<li><p>本指南所述的方法不是唯一的安装方法，也并不一定适用所有机器，<strong>请不要照抄命令</strong>。对你机器造成的损害，我们爱莫能助。</p>\n</li>\n<li><p>本指南所述介绍内容不是专业知识，出于便于理解的目的或表述的的需要，有些可能也并不准确。如有疑问，请参考权威资料获得更准确的解释。</p>\n</li>\n<li><p>确保你已经获得计算机的使用权限，<strong>不要在你朋友的电脑上做这些</strong>（除非他们也很感兴趣）！当然，也不要在任何不属于你的电脑上这样做。</p>\n</li>\n<li><p>确保你没有什么紧急任务需要使用电脑。安装过程耗时较长，且一旦开始就不能中断。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"有关双系统的建议\"><a href=\"#有关双系统的建议\" class=\"headerlink\" title=\"有关双系统的建议\"></a>有关双系统的建议</h3><p>首先要说明的一点是，我们建议<strong>一台计算机只安装一套操作系统</strong>。原因主要有：</p>\n<ul>\n<li><p>兼容性问题。例如 Microsoft 要求必须启用安全启动，而 Arch Linux 默认并不支持。如果不启用，Windows 11 的部分功能将无法使用，如果要启用，就需要对 Arch Linux 进行相当麻烦的配置。</p>\n</li>\n<li><p>使用习惯问题。</p>\n</li>\n<li><p>配置的时间成本远高于再买一台计算机的成本。</p>\n</li>\n<li><p>当你会合理使用 VirtualBox 之类的软件后，你会发现一个硬盘上的 Windows 很多余。</p>\n</li>\n</ul>\n<p>……等等。</p>\n<p>当然，更多 Windows 用户逐渐开始了解 GNU&#x2F;Linux 和自由软件毕竟是件好事，如果我们不在这里提供安装方法，他们（或许还有你）可能就会放弃本可以获得的自由。基于这一点，本指南中也增补了双系统安装的一些说明。</p>\n<p>如果你的另一个系统根本不是 Windows……那就不会有这些顾虑，你可以按照单独安装的步骤进行安装。不过如果是 Hackintosh，小心不要更改硬件或者破坏启动区。</p>\n<h3 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h3><p>本指南对一些文字有特殊的表示方法，我们在此先行约定。</p>\n<ul>\n<li><p>占位符 <code>&lt;&gt;</code></p>\n<p>当你注意到这样的文字时：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">&lt;</span>YourName<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你应当知道需要替换 <code>&lt;YourName&gt;</code> 为合适的值。注意，不是替换 <code>YourName</code>，而是 <code>&lt;YourName&gt;</code>。</p>\n<p>举个例子，假设你的名字是 <code>Annie</code>，那么：</p>\n<ul>\n<li><p>这样是正确的：<code>echo Annie</code>，而</p>\n</li>\n<li><p>这样是错误的：<del><code>echo &lt;Annie&gt;</code></del>（没有替换 <code>&lt;&gt;</code>）</p>\n</li>\n<li><p>这样是极其错误的：<del><code>echo &lt;YourName&gt;</code></del>（直接照抄）</p>\n</li>\n</ul>\n<p>你还需要知道我们所说的东西的英文。例如，如果我们提到「选择的设备是 XXX」，你应该知道我们要替换的东西是 <code>&lt;Device&gt;</code>（而不是 <code>&lt;Snake&gt;</code> 或者 <code>&lt;Monkey&gt;</code> 之类的）。</p>\n</li>\n<li><p>组合键</p>\n<p>我们使用 <code>K1 + K2</code> 来表示组合键，例如 <code>Ctrl + C</code>、<code>F12</code> 以及 <code>Shift + Alt + 5</code>。按数字键时，请确保按的是主键盘上的键（1~9 和 0 是排成一排的）。</p>\n</li>\n</ul>\n</div><div class=\"story post-story\"><h2 id=\"目标与材料\"><a href=\"#目标与材料\" class=\"headerlink\" title=\"目标与材料\"></a>目标与材料</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>虽然服务器使用 Arch Linux（以后简称 Arch）的例子并不少，但我们的目标是桌面操作系统，因此我们可以略微降低对性能的需求，转而寻求更好的体验，同时可以使用并不那么稳定的新技术。</p>\n<p>本指南会将这台 Arch 配置到「出厂」状态，不带任何个性化但至少能看得过去，并且能够完成后续的优化步骤。</p>\n<h3 id=\"材料\"><a href=\"#材料\" class=\"headerlink\" title=\"材料\"></a>材料</h3><p>下述的是安装所需的设备。</p>\n<ul>\n<li><p>一台计算机，Arch 将安装在其上，它应当具有以下特性：</p>\n<ul>\n<li><p>UEFI 引导启动。</p>\n<p>如果你希望安装双系统，原先的操作系统也应当由 UEFI 引导。</p>\n<p>Windows 11 及之后的版本不再支持 Legacy BIOS，所以以后 Legacy BIOS 会很快被淘汰。截至本文写作时，已经有相当多的机型不再支持 Legacy BIOS。</p>\n</li>\n<li><p>至少 2 GiB 的 RAM，但建议有 4 GiB 以上。</p>\n<p>尽管 Arch 的运行只需极少的内存，但内存越大，缓存&#x2F;缓冲运行得就越好，系统会越快。</p>\n</li>\n<li><p>至少 25 GiB 的磁盘<strong>未分配空间</strong>，但建议有 50 GiB 以上。</p>\n<p>建议使用 SSD，会拥有更好的表现。</p>\n<p>请通过压缩或删除分区等方法来腾出这些空间，而不只是删除文件。</p>\n<p>确保这些空间是连续的，否则可能会引发极大的麻烦，如果你坚持，你需要在后面的分区部分自己处理这些问题。</p>\n<p>如果只安装 Arch，那么稍后可以在安装过程中直接清除磁盘，无需此步骤。</p>\n</li>\n<li><p>较新的 x86 处理器，使用 Intel 或 AMD 皆可。</p>\n<p><strong>不要用其它的处理器</strong>（除非你很了解它的技术细节），可能不支持或者发生崩溃。</p>\n</li>\n<li><p>较新的图形卡，如果太老，Arch 仓库里可能没有对应的驱动。</p>\n</li>\n<li><p>网络连接，可以使用无线网络，但有线网络更好。</p>\n<p>不要求是「流畅的」，因为 Arch 提供了足够多的镜像。</p>\n</li>\n<li><p>已接通电源，或者至少足够几个小时的电量。</p>\n<p>操作系统安装完成前，电源管理系统不可用，电量消耗可能会变高。</p>\n</li>\n<li><p>使用的是标准键盘布局（PC 键盘），对于其它键盘布局，请至 ArchWiki 寻找配置方法。</p>\n</li>\n<li><p>如果要安装双系统（另一个是 Windows），请关闭 BitLocker。</p>\n<p>若不这样做，你将无法直接通过 GRUB 启动 Windows（需要特殊的配置）。</p>\n</li>\n</ul>\n</li>\n<li><p>另一台计算机（是的！），这用来浏览资料和处理一些应急情况：</p>\n<ul>\n<li><p>最好是另一台 Arch，但这种情况不常见。</p>\n</li>\n<li><p>其次是另一台 GNU&#x2F;Linux，有些软件包是可以直接复制的，它们也更容易解决安装时遇到的问题。</p>\n</li>\n<li><p>网络连接，依然不需要是「流畅的」，因为 ArchWiki 在全球的速度都很快。</p>\n</li>\n<li><p>如果没有计算机，请试着借一台，对配置并没有要求，但<strong>不要使用移动设备</strong>（它们不能完成诸如创建启动 USB 之类的操作）。</p>\n</li>\n</ul>\n</li>\n<li><p>至少 1 GiB 的移动存储设备，但是建议至少 4 GiB，这会给你更多的选择（稍后会说到）。</p>\n<p>最好使用通用串行总线设备（USB），不要用一些奇怪的存储设备，否则你可能会遇到大麻烦。（我知道没人用光量子存储仪，这里主要指的是有一些智能功能的存储设备）</p>\n<p>不建议通过硬盘直接安装，虽然这的确可以，但是 USB 会方便得多。</p>\n<p>Arch 对于 USB 的速度要求并不高，因为安装过程实质上是下载而非复制。</p>\n<p>设备中所有数据都将丢失，故应先备份。</p>\n</li>\n<li><p>如果目标计算机<strong>只有</strong>特殊的输入装置（触摸屏，触摸板），则需要备用的鼠标（和键盘）。</p>\n<p>Arch 支持绝大多数的触摸板（希望你的也是如此），但如果不能，你会需要一个临时的鼠标。</p>\n<p>确保它们是有线的，无线可能存在驱动问题。</p>\n</li>\n</ul>\n</div><div class=\"story post-story\"><h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>下面要正式开始动手安装了。为防止你无意中做出些不该做的事，请仔细阅读以下内容。</p>\n<h3 id=\"操作须知\"><a href=\"#操作须知\" class=\"headerlink\" title=\"操作须知\"></a>操作须知</h3><ul>\n<li><p>确保你充分理解指南的内容，并且知晓命令每个部分的作用。当你发现 无法读懂指南的内容时，请去补充一下基础知识。</p>\n</li>\n<li><p>准确地键入命令，一个操作失误就可能摧毁整套系统。</p>\n</li>\n<li><p>不要钻牛角尖或者照搬指南，要阅读系统给出的提示。尤其是如果系统显示 <code>Run command blahblah to do this</code> 之类的信息，你不应当忽略它。</p>\n</li>\n<li><p>善用搜索引擎查找，遇事不决先 <a href=\"https://google.com/ncr\">Google</a>。（不要以无法访问作为理由，搜索引擎还有很多）</p>\n</li>\n<li><p>当遇到意外时，除了使用搜索引擎，还要参考 <a href=\"https://wiki.archlinux.org/\">ArchWiki</a>。<strong>无论如何都不要慌张</strong>，先停止操作，然后想想哪里出了问题。记住：只要你还能控制系统，你就有挽回的机会。</p>\n</li>\n<li><p>可以到各种社区提问，但是要记得遵守社区规则。本页面的最下方也有评论区，可以在那里寻求帮助。</p>\n</li>\n<li><p>不要一边做安装系统这种事，一边听音乐或者玩游戏。否则当你迷失在指南中时，你会有很强的挫败感。</p>\n</li>\n</ul>\n<p>请记住：</p>\n<div style=\"font-size:2.5rem;text-align:center;width:100%;\">数据无价 谨慎操作</div>\n\n<h3 id=\"下载和验证镜像\"><a href=\"#下载和验证镜像\" class=\"headerlink\" title=\"下载和验证镜像\"></a>下载和验证镜像</h3><p>一切的一切，都要从这个 ISO 文件说起。</p>\n<p>你已经知道，空的磁盘不可能自己运行起来，必须要插入启动盘来启动。实际上启动盘也就是一个迷你版操作系统，Arch 也不例外。唯一比较特别的是，大多数安装程序都是从自己当中复制文件到磁盘，而 Arch 却不是，它是下载软件包并安装到指定的磁盘上。</p>\n<p>所有 GNU&#x2F;Linux 操作系统的安装环境都可称作 LiveCD，后面我们还会见到这个名字。</p>\n<p>无论如何，现在我们需要 Arch 的安装程序。你可以从 Arch 官方的 <a href=\"https://archlinux.org/download/\">下载</a> 页面获得它的下载链接。</p>\n<p>Arch 提供了 BT 和 HTTP 两种方式（NetBoot 基本上不能用），至于使用哪一个完全是个人喜好的问题。BT 种子在页面最上面，而 HTTP 下载在比较下面的位置，并且提供了一堆镜像。</p>\n<p>你需要下载的文件应当是 <code>archlinux-x86_64.iso</code>，中间可能会多出一个日期，但不会有多余的前后缀。把下载的文件重命名为这个名字，以便后面的命令处理。</p>\n<hr>\n<p>获得镜像后请<strong>务必进行完整性校验</strong>，这是操作系统级的东西，不能容许哪怕一点出错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># GNU/Linux</span>\nsha1sum archlinux-x86_64.iso\nmd5sum archlinux-x86_64.iso\n<span class=\"token comment\"># Windows</span>\ncertutil -hashfile archlinux-x86_64.iso SHA1\ncertutil -hashfile archlinux-x86_64.iso MD5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不会使用终端，请试着学习一下，这并不困难。你不需要记住那些命令，只需要知道如何照着指南键入它们。你也可以使用一些具有图形界面的工具完成校验。</p>\n<p>确保输出的结果与 Arch 官网（一定要是官网啊）上的完全一致（在 HTTP 镜像列表之前，请仔细找一下）。使用两种校验方式，只是以防万一。</p>\n<p>如果校验结果不一致，尝试重新下载，如果文件看上去依然有问题，可换一个镜像，并将错误的镜像报告给 Arch 的维护者，以便他们排查问题。</p>\n<h3 id=\"制作可启动介质\"><a href=\"#制作可启动介质\" class=\"headerlink\" title=\"制作可启动介质\"></a>制作可启动介质</h3><h4 id=\"GNU-x2F-Linux\"><a href=\"#GNU-x2F-Linux\" class=\"headerlink\" title=\"GNU&#x2F;Linux\"></a>GNU&#x2F;Linux</h4><p>把 USB 插入电脑，执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">fdisk</span> -l\n<span class=\"token function\">sudo</span> <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>archlinux-x86_64.iso <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/<span class=\"token operator\">&lt;</span>YourUSBDevice<span class=\"token operator\">></span>\n<span class=\"token function\">sync</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>fdisk</code> 的目的是找出你的 USB 对应的标识，通常是 <code>/dev/sdb</code> 或者 <code>/dev/sdc</code>（可以根据容量判断）。<strong>请在确认这是你的 USB 之后再执行写入</strong>，写入错误的磁盘会造成数据损毁。</p>\n<p>写入完成后，拔出 USB 插入目标计算机。</p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>在 Windows 上，你可以使用 <a href=\"https://www.balena.io/etcher/\">Etcher</a> 完成这个过程，<a href=\"https://rufus.ie/\">Rufus</a> 也可以，但<strong>不可以使用 UltraISO</strong>，可能导致启动错误。</p>\n<p>如果程序询问你引导和分区表类型，记得选择 UEFI 引导和 GPT 格式分区表。如果还询问你写入模式，选择 DD 模式。</p>\n<p>写入后 USB 将从系统中消失，但我们确信我们已经成功写入了镜像，这是正常的（Windows 还不能识别这种结构）。确认写入完成后，就可以拔出 USB 并插入目标计算机了。</p>\n<h3 id=\"启动设置\"><a href=\"#启动设置\" class=\"headerlink\" title=\"启动设置\"></a>启动设置</h3><p>关闭你的目标机器（确保是充分的关闭，不是休眠或者挂起之类的），稍等片刻后启动，并设法进入 UEFI 设置：</p>\n<ul>\n<li><p>对于大多数笔记本电脑，按住或连续按下 <code>Esc</code> 按钮，并选择类似 <code>UEFI/BIOS Settings</code> 的选项（如果有）。</p>\n</li>\n<li><p>对于大多数台式机，按住或连续按下 <code>Del</code> 按钮或 <code>F8</code> 按钮，如果不行，再试试 <code>Enter</code> 按钮，直到有办法进入 UEFI 设置。或者，如果知道主板型号，可以查询如何进入其 UEFI 设置。</p>\n</li>\n</ul>\n<blockquote>\n<p>尽管这个程序的正确名称应该是 UEFI 选项，但一些地方并不区分它和 BIOS，所以查找资料时，请也试试 BIOS 这个名字。</p>\n</blockquote>\n<hr>\n<p>对 UEFI 选项做如下调整：（标注「必须」的是一定要完成的，其它是可选的）</p>\n<ul>\n<li><p>关闭快速启动（Fast Boot）和<strong>安全启动</strong>（Secure Boot），后者尤其重要。（必须）</p>\n<p><em>如果你使用了诸如 Windows Hello 的功能，请务必先完成安装，进行安全启动配置，并且能够正常启动 Arch 之后，重新打开安全启动，再启动 Windows。否则，你可能会吃苦头。</em></p>\n</li>\n<li><p>如果进行过超频，现在暂时将处理器电压和内存频率等调回原来的数值，以免影响后续步骤。</p>\n</li>\n<li><p>启用 UEFI 引导，并将其设置为默认或优先。（必须）</p>\n</li>\n<li><p>关闭 CSM 支持模块。</p>\n<p><em>启用 CSM 当然也可以正常启动，然而 Linux 内核很容易被错误的模式加载，解决这个问题的根本方法就是彻底禁用 CSM。</em></p>\n</li>\n<li><p>将 USB 设备设置为第一启动项。（必须）</p>\n</li>\n<li><p>校准时间。</p>\n</li>\n</ul>\n<p>保存设置并重启，随后计算机会从 USB 启动。</p>\n<h3 id=\"接入网络\"><a href=\"#接入网络\" class=\"headerlink\" title=\"接入网络\"></a>接入网络</h3><p>Arch LiveCD 启动后会弹出一个菜单供你选择（启动哪一个），应当选择有 <code>archiso</code> 或者 <code>Arch Linux</code> 字样的（通常在菜单第一项），使用上下键选定，按回车确认。</p>\n<p>要经过几秒的加载（较慢的 USB 或处理器会需要十几秒），你才能看见 Arch LiveCD 环境的终端：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">root@archiso ~ #<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>要做的第一件事情是确认终端可以正常运行，键入以下内容并回车：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">whoami</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>应当输出 <code>root</code>。</p>\n<blockquote>\n<p>如果你从没使用过 GNU&#x2F;Linux 终端，你可能不习惯，这里没有鼠标，也没有好看的图像，只有苍白的提示符，所有的操作需要键盘完成。不过事实上终端是很人性化的，你只需要正确输入命令。请坚持一下，我们最后的结果可不会是这样！</p>\n</blockquote>\n<hr>\n<p>现在，如果你的设备可以连接有线网络， 那么将电缆插入网口，网络连接即自动完成。</p>\n<p>如果没有办法使用有线连接，运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rfkill unblock all\niwctl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你将会进入无线连接控制面板，这里同样没有好看的图像，只有一个提示符等待你的输入，但我们相信它完全可以满足我们的要求。现在输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">device list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到你的无线设备，通常应当包含 <code>wlan</code> 字样（而且通常是 <code>wlan0</code>），记下它的名字。</p>\n<p><em>如果你好奇，那么我可以告诉你 <code>lo</code> 表示本机（本地环回接口），<code>eth</code>、<code>ens</code>、<code>eno</code>、<code>enp</code> 是不同类型的以太网卡（通常是有线）。</em></p>\n<p>如果找到了不止一个无线网卡，请在下一步中都试试。</p>\n<hr>\n<p>现在搜索网络：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">station <span class=\"token operator\">&lt;</span>Adaptor<span class=\"token operator\">></span> get-networks<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>&lt;Adaptor&gt;</code> 替换成网卡的名字，例如 <code>wlan0</code>。请确保输入的命令正确。如果你输入了错误的命令，计算机会显示错误消息以示嘲讽。</p>\n<p>输出中会出现网卡所发现的周边网络，选择你认为合适的一个，记下名字，然后执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">station <span class=\"token operator\">&lt;</span>Adaptor<span class=\"token operator\">></span> connect <span class=\"token operator\">&lt;</span>NetworkSSID<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>类似的，把 <code>&lt;NetworkSSID&gt;</code> 替换为网络名即可。</p>\n<p>遗憾的是，<code>iwctl</code> 无法显示或使用非 ASCII 字符的 WLAN SSID（网络名）。如果你在使用个人热点，这可能是一个需要考虑的问题。</p>\n<p><em>这并不是 <code>iwctl</code> 本身的缺陷，而是因为你现在的环境下还没有其它语言的输入法，也没有其它语言的字体及显示支持。</em></p>\n<p>连接完毕后返回 Arch 终端：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>测试连接是否正常：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ping</span> archlinux.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>希望你能得到 <code>64 bytes from xxx</code> 这样的输出，那么你的网络连接完全正常。</p>\n<p>如果看到 <code>Timeout</code>，请尝试 <code>ping</code> 另一个主机（例如 <code>ping 1.2.4.8</code>），如果依然超时，请检查一下路由器和网关，或者试着换一个网络。</p>\n<p><em>有些主机无法进行 Ping 检测，这是正常的，因为 Ping 也可以作为攻击手段，部分主机为防御攻击而禁止了 Ping。</em></p>\n<p>如果连接通畅，按 <code>Ctrl + C</code> 组合键中断 <code>ping</code> 进程，键入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">clear</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>以将屏幕清空。此后我们不会单独执行这条命令，但你可以在认为屏幕太乱的时候执行它。</p>\n<h3 id=\"调整时间\"><a href=\"#调整时间\" class=\"headerlink\" title=\"调整时间\"></a>调整时间</h3><p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hwclock --systohc --utc\ntimedatectl set-ntp <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它们的执行需要几秒钟（联网对时），完成后运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">timedatectl status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确保输出时间是正确的。</p>\n<p><em>如果时间相差几个小时也是没问题的，因为这是 UTC 时间，要考虑时区偏移的问题。</em></p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>检查计算机上的磁盘：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fdisk</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出像是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Disk &#x2F;dev&#x2F;sdb: 415.411 GiB, ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而且可能不止一个。</p>\n<hr>\n<p>如果上面的输出太乱，你也可以选择使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsblk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的输出更简单：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sdb                     disk\n|-- sdb1    888.88 G    part<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>disk</code> 表示磁盘，<code>part</code> 表示磁盘下的分区。</p>\n<hr>\n<p>你需要选择正确的用于安装的<strong>磁盘</strong>（不是分区），可以通过看容量来辨别。</p>\n<p>记住 <code>Disk</code> 后面的设备标识（<code>fdisk</code>）或者 <code>disk</code> 对应的磁盘（<code>lsblk</code>）。<strong>不要看走眼</strong>。如果在安装多个操作系统，这一点更加重要。</p>\n<p>通常要安装到 SSD 上（类似 <code>/dev/sda</code>），如果是机械硬盘，则可能是 <code>/dev/hda</code>，NVMe 闪存则是 <code>/dev/nvme0n1</code>，最后的那个字符可能会变化，但大体上看起来差不多。</p>\n<hr>\n<p>确定你的磁盘后，执行以下命令开始分区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fdisk</span> /dev/<span class=\"token operator\">&lt;</span>YourDisk<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>&lt;YourDisk&gt;</code> 自然应该换成磁盘名字，以后这类替换我们不再赘述。</p>\n<p><code>fdisk</code> 随后会进入交互模式（就像 <code>iwctl</code>），现在来创建以下几个分区：</p>\n<ul>\n<li><p>512 MB 的 EFI 启动分区</p>\n</li>\n<li><p>大约 4 GB 的交换分区</p>\n</li>\n<li><p>其余所有空间的主要分区</p>\n</li>\n</ul>\n<p><em>实际上交换分区的大小可以自定，但不建议完全不设置（会增大内存压力），通常设置为内存大小和 4 GiB 中较小的那一个。此外，增大交换空间虽然不会拖累性能但毕竟会占用空间，如果拿不定注意，可以暂时不分配，稍后可以创建交换文件来解决这个问题。</em></p>\n<p>EFI 启动区的分配则需要考虑更多：</p>\n<ul>\n<li><p>如果你只安装一套操作系统，则必须分配。</p>\n</li>\n<li><p>如果先前计算机上已经存在 GNU&#x2F;Linux 或类似操作系统，不必重新分配（如果你知道这个分区在哪里），可以直接使用。</p>\n</li>\n<li><p>如果先前计算机上安装着 Windows，则应当重新分配，因为 Windows 默认 EFI 分区可能不足以存储启动信息。</p>\n</li>\n</ul>\n<p><em>高级用户可能会为 <code>/home</code> 或者 <code>/etc</code> 等创建单独的分区，这样以后当系统重新安装时，可以保留个人文件和设置，如果有兴趣可以尝试。</em></p>\n<hr>\n<p>确定目标后开始行动：</p>\n<ol>\n<li><p>如果你要<strong>清除整个磁盘并安装</strong>，则首先完成这个过程，否则请跳过这一步：</p>\n<ol>\n<li><p>键入 <code>d</code>，删除分区。</p>\n</li>\n<li><p>如果有多个分区，<code>fdisk</code> 会询问要删除哪一个，键入 <code>1</code>。</p>\n</li>\n<li><p>重复以上过程，直到所有分区被删除。</p>\n</li>\n<li><p>键入 <code>g</code>，创建新的 GPT 分区表。</p>\n</li>\n</ol>\n</li>\n<li><p>键入 <code>n</code> 新建分区。</p>\n</li>\n<li><p>询问分区号的时候，按回车默认，但要记住它。（空磁盘会是 <code>1</code>，已有分区的磁盘会更大）</p>\n</li>\n<li><p>询问第一个扇区的时候，按回车默认。</p>\n</li>\n<li><p>询问最后一个扇区的时候，键入 <code>+512M</code>，按回车确认。<code>fdisk</code> 就会为你创建一个 512 MB 大小的分区。</p>\n</li>\n<li><p>键入 <code>t</code> 变更分区类型，通常会自动选择刚刚创建的分区，如果没有，键入刚刚记下的分区号。（现在也不要忘掉，等会会用到）</p>\n</li>\n<li><p>键入 <code>1</code>，设定为「EFI 启动分区」（EFI System）。</p>\n</li>\n<li><p>重复 2~7，再建立一个 4 GB（或者其它你喜欢的大小）的交换分区（<code>+4GB</code>），不过这次要键入 <code>19</code> 设定为「交换分区」（Linux Swap，这个数字可以通过键入 <code>t</code> 再键入 <code>L</code> 来获得）。</p>\n</li>\n<li><p>重复 2~7，再建立最后一个分区，输入大小时直接按回车，即默认选择剩余的全部空间。不需要更改分区类型（默认是 Linux 文件系统）。</p>\n</li>\n<li><p><strong>检查</strong>，这很重要。键入 <code>l</code> 并仔细查看输出，检查分区是否正确。如果需要帮助，可以键入 <code>m</code>。</p>\n</li>\n<li><p>确认无误后，键入 <code>w</code>，修改被写入磁盘。如果你觉得做错了，键入 <code>q</code> 放弃修改，然后再试一次。</p>\n</li>\n</ol>\n<p><em>如果你真的很怕麻烦，不妨试试 <code>cfdisk</code>，它更加友好。不过对于有经验的用户，命令行会更快。</em></p>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><blockquote>\n<p><strong>挂载点</strong></p>\n<p>稍微介绍一下挂载点，这是 Linux 的一大特色机制。</p>\n<p>通常在 Windows 上，<strong>磁盘是固定的，文件被存储在磁盘上</strong>。这很符合我们的直观感受，没错吧？</p>\n<p>现在在 Linux 中，我们必须改变这一想法，也就是，<strong>文件是固定的，磁盘为文件提供空间</strong>。</p>\n<p>请花几分钟理解一下这个概念。</p>\n<p>在 Linux 中，所有的文件路径都从 <code>/</code> 开始，这也就是所说的根目录，<code>/</code> 下设有 <code>etc</code>、<code>bin</code>、<code>usr</code>、<code>home</code> 等多个文件夹，这些文件夹可以被（物理上）放在一个分区上，也可以每个拥有自己的分区，应用程序无需关心这些，只需要提供路径即可访问文件，而具体的组织方式是由 <code>fstab</code> 等组件完成的。</p>\n<p>举个简单的例子，如果将磁盘 A 挂载到 <code>/</code>，将磁盘 B 挂载到 <code>/home</code>，那么：</p>\n<ul>\n<li><p>文件 <code>/usr/bin/bash</code> 将被存储在磁盘 A 的某个位置</p>\n</li>\n<li><p>文件 <code>/home/rarity/a.out</code> 将被存储在磁盘 B 的某个位置</p>\n</li>\n<li><p>如果移除（卸载）磁盘 B，<code>/home</code> 仍然存在，但会变为空文件夹（或者它原先的内容），此时如果向其中写入文件，数据将被存储至磁盘 A。</p>\n</li>\n<li><p>如果现在将磁盘 B 重新挂载到 <code>/home/ddd</code>，那么 <code>a.out</code> 的路径会变为：<code>/home/ddd/rarity/a.out</code>。</p>\n</li>\n<li><p>从磁盘 B 的角度来看就很明白：文件实质上始终是 <code>/rarity/a.out</code>，之所以路径发生了变化，是因为挂载点不同，路径的计算起点不一样。</p>\n</li>\n</ul>\n<p>很快你就会发现这种方式比盘符简单灵活多了，因为很多命令可以无脑执行而根本不需要考虑盘符。</p>\n</blockquote>\n<p>下面挂载磁盘，一个磁盘只有在被挂载后才能通过文件系统进行访问。</p>\n<p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsblk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到你的磁盘（刚刚 <code>fdisk</code> 完成的），如果这么快就忘记了，可以根据容量判断。</p>\n<p>接下来找到你的分区（EFI 启动区，交换分区，主分区），可以根据容量判断，也可以根据分区号识别。例如，<code>/dev/sdb</code> 上分区号为 <code>3</code> 的分区被记录为 <code>/dev/sdb3</code>。</p>\n<p><em>如果是 NVMe，则中间会多一个字母 <code>p</code>，例如 <code>nvme0n1p3</code> 而不是 <code>nvme0n13</code>，后者看上去就不对，请想想为什么。</em></p>\n<p>然后创建挂载点，因为挂载点本质上是目录，所以这样做：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /mnt/home\n<span class=\"token function\">mkdir</span> /mnt/boot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这两步创建了挂载点 <code>/mnt</code>，<code>/mnt/home</code>，<code>/mnt/boot</code>（<code>-p</code> 表示同时创建父目录）。</p>\n<p><em>也许你会问，为什么需要这样一个 <code>/mnt</code> 呢？这其实就是很巧妙的地方：</em></p>\n<blockquote>\n<p><strong><code>/mnt</code> 是什么？</strong></p>\n<p>首先考虑我们现在在哪里，这是 Linux 中很重要的一个概念。</p>\n<p>现在我们位于 Arch 的安装盘中，也就是说，现在的 <code>/</code> 是你的 <strong>USB</strong> 磁盘，而并非日后操作系统将要运行的，计算机里面的那个磁盘。</p>\n<p>现在要做的是将几个分区挂载到 <code>/mnt</code> 和它的子目录，这样二者得到「对齐」，此后对 <code>/mnt</code> 内目录结构的修改，将被写入到计算机上的磁盘。</p>\n<p>下一次从硬盘启动的时候，Arch 会将**计算机上磁盘的根目录作为 <code>/</code>**，这样原来的 <code>/mnt/home</code> 现在就变为 <code>/home</code>。（想想上面刚刚介绍的原理，磁盘实际上只存储了 <code>/mnt</code> 里面的东西）</p>\n<p>看看，这就是 Linux 解决这种问题的巧妙方法。如果在 Windows 上想这样做，那是要费不少劲的。</p>\n<p>我们只需要把一个系统安装到 <code>/mnt</code> 里面，然后切换根磁盘，就可以使用这个系统！这个方式有点像把树的一根枝条剪下来插在土里又长成一棵新的树一样。只要理解了，就会发现十分方便，而且由于不涉及写入当前正在运行系统的磁盘，所以不会产生半路崩溃之类的问题。</p>\n<p>至于叫作 <code>/mnt</code> 并不是硬性要求，只是习惯上的命名。</p>\n</blockquote>\n<hr>\n<p>挂载的分区是「生的」，为了使用它，必须格式化分区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkfs.f2fs /dev/<span class=\"token operator\">&lt;</span>MainPart<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里的占位符请替换为<strong>主分区</strong>（除了 EFI 和交换的那一个）。此命令用于格式化分区为 F2FS 格式，如果你听说过 EXT4，并且想用，只需要换成 <code>mkfs.ext4</code> 就行了。当然，你还可以选择 <code>btrfs</code>、<code>xfs</code> 等，具体区别这里就不介绍了。</p>\n<p>挂载：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mount</span> /dev/<span class=\"token operator\">&lt;</span>MainPart<span class=\"token operator\">></span> /mnt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样此分区就和 <code>/mnt</code> 绑定。</p>\n<p>使用类似的方法挂载 EFI 分区（512 MB 大小的那个）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkfs.vfat -F32 /dev/<span class=\"token operator\">&lt;</span>EFIPart<span class=\"token operator\">></span>\n<span class=\"token function\">mount</span> /dev/<span class=\"token operator\">&lt;</span>EFIPart<span class=\"token operator\">></span> /mnt/boot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到这里实际上创建了 FAT32 文件系统，这是出于兼容性的考虑。</p>\n<p>交换分区的创建有些不一样：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkswap</span> /dev/<span class=\"token operator\">&lt;</span>SwapPart<span class=\"token operator\">></span>\n<span class=\"token function\">swapon</span> /dev/<span class=\"token operator\">&lt;</span>SwapPart<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>整个过程一气呵成，但依然要注意不要输入错误的分区，否则当数据损毁后，你会十分沮丧。</p>\n<p>现在来看看我们已经做了什么：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsblk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>观察输出，现在应该像是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sdb                   disk\n|-- sdb1    512.0M    part    &#x2F;mnt&#x2F;boot\n|-- sdb2      4.0G    part    [SWAP]\n|-- sdb3    114.5G    part    &#x2F;mnt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分区的右边多出了挂载点标记。</p>\n<p>如果一切都正确，那么我们可以继续，如果看上去不对，那就深吸一口气，然后检查哪里出了问题。</p>\n<h3 id=\"安装基本软件包\"><a href=\"#安装基本软件包\" class=\"headerlink\" title=\"安装基本软件包\"></a>安装基本软件包</h3><p>一个操作系统总是由很多软件构成的，因此并没有所谓的「操作系统安装过程」，本质上，就是要安装和配置一堆软件包而已（当然有点太多了）。</p>\n<p>现在我们已经为新的 Arch 准备了空间，然而 <code>/mnt</code> 事实上还是空的，里面什么都没有，就此启动系统，肯定不成功。这也就是你手里的安装盘的作用之二（之一是启动系统）。所以，我们来安装 Arch 的基本软件包。</p>\n<p>执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">reflector --country <span class=\"token operator\">&lt;</span>Country<span class=\"token operator\">></span> --latest <span class=\"token number\">5</span> --sort rate --save /etc/pacman.d/mirrorlist <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令获取位于指定国家的五个最近更新的软件源服务器，且对它们进行按速率排序。至于什么是软件源，我们马上介绍。</p>\n<p><code>&lt;Country&gt;</code> 设置为你所在的国家就行了（只是举例，中国大陆为 <code>China</code>，法国为 <code>France</code>，当然要是你坚持写 <code>Antarctica</code>，也没有人拦着你）。存在空格的名字，须在两边加上引号，例如 <code>&quot;United Kingdom&quot;</code>，否则会引发错误。</p>\n<p>这个命令的执行需要一分钟左右，所以请耐心等一下。</p>\n<hr>\n<p>上一条命令完成后运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Syy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令更新软件源列表。</p>\n<p>你可以把软件源想象成应用市场，但有一点点区别，因为应用市场是在需要时通过网络取得软件列表的，软件源则相反，软件列表被下载到电脑上，要用时直接查找就行了，所以在安装新的软件前，必须更新软件源以知道现在仓库中都提供哪些版本的软件。</p>\n<p>更新密钥环：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Sy archlinux-keyring<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令更新 Arch 仓库维护者的密钥。</p>\n<p>每个软件包在 Arch 上传时均经过签名确认完整性，<code>pacman</code> 会在下载软件后验证签名，确保文件没有被篡改（不是怕镜像站坑你，是为了避免在传输过程中出现的随机错误）。</p>\n<p>更新这些密钥后，<code>pacman</code> 才能处理新的软件包。</p>\n<blockquote>\n<p><strong>包管理器与 <code>pacman</code></strong></p>\n<p>你或许对包管理器不陌生，<code>npm</code>、<code>apt</code>、<code>nuget</code>、<code>pip</code>、<code>gem</code>、<code>yum</code>、<code>dnf</code>、<code>cargo</code>、<code>mvn</code> 等等都是各种各样的包管理器，这些里面几乎肯定有几个是你见过的。包管理器负责下载、安装、配置、卸载软件，解决依赖关系这样的工作。</p>\n<p>在 Windows 上你或许没有这样的感受，这是因为大多数软件都把它自己的依赖打包了起来，随软件一起附上，带来的唯一问题就是庞大的体积。</p>\n<p>在 GNU&#x2F;Linux 上的软件都很小，而且你可以依赖仓库里任何你想要的软件包，包管理器确保你的软件在用户机器上具有合适的环境。</p>\n<p>这种机制不仅方便软件的更新，也节约了不少空间。想想你电脑里的数百个乃至数千个 <code>vcruntime114514.dll</code>，真是好可怕——当然，举个例子。</p>\n<p><code>pacman</code><del>（怕充满）</del>是 Arch 的包管理器，负责从 Arch 官方仓库下载和安装软件包。你当然可以为你的 Arch 选配 <code>apt</code> 或者 <code>yum</code>，只要处理得当都没问题。但 <code>pacman</code> 是 Arch 官方使用的，出了问题虽然不包退换，却更容易得到帮助。</p>\n</blockquote>\n<hr>\n<p>现在安装基本的软件包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacstrap /mnt base base-devel linux linux-firmware <span class=\"token function\">nano</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>base</code> 是 Arch 的核心部分，<code>base-devel</code> 是基本软件包组，<code>linux</code> 是内核，<code>linux-firmware</code> 是固件支持程序，<code>nano</code> 是文本编辑器，仅此而已。</p>\n<p>如果主分区选择了 EXT4 文件系统，此处还必须安装 <code>e2fsprogs</code> 以支持它，简单将其添加在命令的最后面就行了。</p>\n<p><code>pacstrap</code> 能做一系列工作配置这些软件包（组），自然，使用 <code>pacman</code> 一个个来也是可以的，不过是会多一个损坏的键盘和一些折断的手指。</p>\n<p>这个过程需要几分钟，你可以去玩一会你喜欢的游戏。</p>\n<h3 id=\"生成分区挂载表\"><a href=\"#生成分区挂载表\" class=\"headerlink\" title=\"生成分区挂载表\"></a>生成分区挂载表</h3><p>还记得刚刚我们执行了一些 <code>mount</code> 命令吗？Arch 是不知道要如何挂载那几个分区的，因此，即使现在它们还处于挂载状态，但下一次启动时，它们并不会自动挂载，也就没办法进行读写。</p>\n<p>我们必须对 <code>fstab</code> 进行设定，它位于 <code>/etc/fstab</code>，这个表告诉 Arch 如何挂载各分区。以往这个设定是很麻烦的，要查询各个分区的 UUID，然后设定合适的模式，不仅繁琐，还很容易出错。现在随着自动化的进展，这个过程可以自动完成：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">genfstab -U -p /mnt <span class=\"token operator\">>></span> /mnt/etc/fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它检测一些环境参数，然后生成合适的 <code>fstab</code>，要记住现在我们还是在 USB 中，并不是在真正的系统中（它在 <code>/mnt</code> 下），因此磁盘上的 <code>/etc/fstab</code> 对应着现在环境中的 <code>/mnt/etc/fstab</code>。</p>\n<p>由于这个文件实在太重要了，因此我们确认一下它真的生成了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /mnt/etc/fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>虽然 ArchWiki 建议你检查其中的错误，但是其实如果真的有漏洞也很难看出来，你只需要注意 <code>swap</code>、<code>/</code>、<code>/boot</code> 等字样，如果它们出现了，那么基本上就没有问题。</p>\n<p><code>cat</code> 用于输出一个或多个文件内容。至于为什么不叫 <code>dog</code> 已经超出了我们的讨论范围，如果感兴趣可以自行搜索。</p>\n<h3 id=\"进入系统\"><a href=\"#进入系统\" class=\"headerlink\" title=\"进入系统\"></a>进入系统</h3><p>接下来的所有操作都需要在实际的系统上完成，因为大多数软件希望系统位于 <code>/</code>，这样它们才能正常运行，但我们知道它现在位于 <code>/mnt</code>。如果现在从硬盘重启，系统确实就会位于 <code>/</code>，但是会有以下问题：</p>\n<ul>\n<li><p>环境没有配置好，USB 提供的很多工具并不包含在刚刚安装的系统中（还记得吗，我们只是安装了 <code>base linux linux-firmware</code>）。</p>\n</li>\n<li><p>更要命的是，GRUB 引导文件没有生成，根本就无法启动。</p>\n</li>\n</ul>\n<p>所以我们需要有一个工具来模拟一个环境，使系统好像就位于 <code>/</code> 而不是 <code>/mnt</code>，这就是 <code>arch-chroot</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">arch-chroot /mnt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令一旦完成执行，终端就会发生变化，从此开始，<code>/mnt</code> 被映射到 <code>/</code>，你就「进入」了新安装的系统。当然这只是把根目录切换了一下，实际在运行的还是 USB 里面的那个 LiveCD 安装程序。</p>\n<h3 id=\"更新软件源和密钥环\"><a href=\"#更新软件源和密钥环\" class=\"headerlink\" title=\"更新软件源和密钥环\"></a>更新软件源和密钥环</h3><p>为了避免一会儿忘记，我们现在更新 <code>pacman</code> 的软件源和密钥环：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Syy\npacman -Sy archlinux-keyring<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>之所以还要更新一次，是因为之前那一次更新只更新了 LiveCD 的软件源和密钥环，这一次是更新实际操作系统中的那一份。</p>\n<p><em><code>reflector</code> 不需要重新执行，因为安装时已经自动为你复制好了。</em></p>\n<h3 id=\"校正时间\"><a href=\"#校正时间\" class=\"headerlink\" title=\"校正时间\"></a>校正时间</h3><p>使用 <code>ln</code> 命令设定时区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -sf /usr/share/zoneinfo/<span class=\"token operator\">&lt;</span>Region<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>City<span class=\"token operator\">></span> /etc/localtime<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你在中国大陆，<code>&lt;Region&gt;</code> 就是 <code>Asia</code>，<code>&lt;City&gt;</code> 就是 <code>Shanghai</code>。</p>\n<p><em><code>ln</code> 的实际作用其实是创建文件链接（不是 URL，那是超链接），有点像快捷方式，在这里它把 <code>/etc/localtime</code> 指向 <code>/usr/share/zoneinfo/&lt;Region&gt;/&lt;City&gt;</code>，从应用程序层面而言，这两个文件的内容（看上去）会始终保持一致。不能简单复制文件，因为时间信息是每时每刻都在变的。</em></p>\n<hr>\n<p>如果你想要知道所有可能的时区，可以这样做：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /usr/share/zoneinfo/<span class=\"token operator\">&lt;</span>Region<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会列出所有可能的地区（大洲）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /usr/share/zoneinfo/Asia<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会列出亚洲所有可能的时区设置。只需要选择和自己在同一时区的城市即可，因为它只用来设置时间。</p>\n<p><code>ls</code> 用于列出某个目录下的所有子目录（子文件夹）。</p>\n<hr>\n<p>调整时间：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hwclock --systohc --utc\ntimedatectl set-ntp <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"本地化\"><a href=\"#本地化\" class=\"headerlink\" title=\"本地化\"></a>本地化</h3><p>为了能够设置操作系统的语言，我们需要进行本地化过程。</p>\n<p>编辑文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/locale.gen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你将进入 <code>nano</code> 的文件编辑界面，使用上下键移动视图，找到这样两行（并不是挨在一起的）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#en_US.UTF-8 UTF-8\n#zh_CN.UTF-8 UTF-8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>删除它们之前的 <code>#</code> 符号，然后按 <code>Ctrl + X</code>，<code>nano</code> 会询问是否要保存，键入 <code>y</code> 并回车确认。</p>\n<p>如果你打开时文件为空，那么一定是哪里弄错了。退出 <code>nano</code>（不要保存），重新输入正确的命令。</p>\n<hr>\n<p>现在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">locale-gen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个程序会生成必要的本地化文件。</p>\n<p>运行完成后，编辑文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/locale.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>和之前那一条很像，但并不相同，请注意准确地拼写。这个文件不存在，所以打开时应当为空。</p>\n<p>向其中写入以下内容，然后保存：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LANG&#x3D;en_US.UTF-8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>设置为英文是有道理的，因为这是用于系统级的本地化，考虑到控制台（TTY）其实很难处理非 ASCII 字符。如果将来系统出了问题，我们还得回到控制台，这时如果输出全是乱码，你会有被蟒蛇缠住的感觉。</p>\n<h3 id=\"网络设置\"><a href=\"#网络设置\" class=\"headerlink\" title=\"网络设置\"></a>网络设置</h3><p>现在来设置主机名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"&lt;ComputerName>\"</span> <span class=\"token operator\">>></span> /etc/hostname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>echo</code> 和 <code>&gt;&gt;</code> 配合使用用于直接将 <code>echo</code> 后面的内容写入文件，而不需要去打开编辑器，很快你会发现这很实用。</p>\n<p>引号 <code>&quot;&quot;</code> 有时是可选的，但是为了不出现意外，还是加上吧。</p>\n<p><code>&gt;&gt;</code> 是重定向标识，<code>echo</code> 的默认输出是 <code>stdout</code>（标准输出），为了将其写入文件需要将输出流「接到」文件上。</p>\n<p>计算机名不应当包含空格。此外，虽然没有严格限制，但出于兼容性的考虑，请还是尽量只使用 ASCII 字符。</p>\n<hr>\n<p>接下来绑定本地回环端口，如果不知道这是什么也不要紧，因为对于大多数情况，这个设置都是固定的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/hosts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个文件可能已经存在，也可能为空。不管怎样，向其中填写以下内容并保存：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1 localhost\n::1 localhost\n127.0.1.1 &lt;ComputerName&gt;.localdomain &lt;ComputerName&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;ComputerName&gt;</code> 应该替换为上一步所选择的计算机名。因为这是在编辑文件，我们怕你忘记了。</p>\n<p><em>注意最后一行开头是 <code>127.0.1.1</code>（不是 <code>127.0.0.1</code>）。虽然它并没有任何特殊的地方，但不知为何，很多人把这个数字填错。就像「管理员」和「管埋员」一样。</em></p>\n<h3 id=\"创建帐户\"><a href=\"#创建帐户\" class=\"headerlink\" title=\"创建帐户\"></a>创建帐户</h3><p>操作系统必须有帐户才能访问。历史上的一台电脑都是好多人公用的（即使现在也是），由于 PC 的普及，很多计算机上只有一个帐户，但不管怎么样，现在我们的系统什么也没有，所以需要创建帐户。</p>\n<p>首先运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这用于设置 <code>root</code> 的密码。<code>root</code> 是绝大多数 GNU&#x2F;Linux 上的最高权限帐户，拥有控制系统一切的权力，因此该密码请勿设置得太简单（但是也不要胡乱输入，如果忘记会很麻烦）。</p>\n<p>输入密码没有回显，确保输入正确后回车即可。（退格键依然可以使用）</p>\n<hr>\n<p>现在来创建和设定个人帐户。（不能什么事都以 <code>root</code> 身份完成，否则如果你运行了一个恶意软件，它将可以删除计算机上的所有内容，还能任意解码你的密码，这太可怕了！）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">useradd</span> -m -G wheel -s /bin/bash <span class=\"token operator\">&lt;</span>UserName<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>用户名可以自选，但是依然要使用 ASCII 字符，并且不能有空格。此外如果使用字母，只有小写字母可以被接受。</p>\n<p>设定密码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span> <span class=\"token operator\">&lt;</span>UserName<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这和设定 <code>root</code> 的方法是一样的，不过由于需要经常使用，建议设置得简单好记（但不可以少于 6 个字符）。</p>\n<hr>\n<p>个人帐户是没有控制系统目录的权限的，当然可以通过登录到 <code>root</code> 来做这些操作，但是这样会带来两个问题：</p>\n<ul>\n<li><p><code>root</code> 的密码太长，登录很麻烦。</p>\n</li>\n<li><p>这让问题又回到原点。</p>\n</li>\n</ul>\n<p>所以我们要使用 <code>sudo</code>，它允许被授权的普通用户使用 <code>sudo</code> 命令来临时获取管理员权限。刚刚所创建的新用户并不在这里，所以我们需要告诉 <code>sudo</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/sudoers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到如下一行（或者类似的）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># %wheel ALL=(ALL:ALL) ALL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><em>类似这样的行在此文件中共有三行，它们靠得比较近，请确保你选择的是第一个（第四个 <code>ALL</code> 后不应当再有任何后缀）。</em></p>\n<p>去掉最前面的 <code>#</code> 和空格，然后保存并退出。</p>\n<h3 id=\"安装微码\"><a href=\"#安装微码\" class=\"headerlink\" title=\"安装微码\"></a>安装微码</h3><p>微码控制处理器的指令解释，有时也用来修正硬件错误。既然是 CPU 级别的，那么怎么想也都应该安装上。</p>\n<p>运行下面两条命令中合适的一条：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S amd-ucode <span class=\"token comment\"># AMD</span>\npacman -S intel-ucode <span class=\"token comment\"># Intel</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>#</code> 后面的是注释，是给你看的，不用输入终端。</p>\n<p>两条命令只需执行一条，根据你机器搭载的 CPU 选择即可。</p>\n<h3 id=\"安装网络组件\"><a href=\"#安装网络组件\" class=\"headerlink\" title=\"安装网络组件\"></a>安装网络组件</h3><p>新的操作系统什么也没有，而且稍后重启时我们还要继续在终端操作，所以现在安装网络组件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S networkmanager\nsystemctl <span class=\"token builtin class-name\">enable</span> networkmanager<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"启动引导\"><a href=\"#启动引导\" class=\"headerlink\" title=\"启动引导\"></a>启动引导</h3><p>在继续之前我们要说明一点额外的东西，当然，这对于后续步骤暂时没有影响，如果着急，可以先跳过。</p>\n<blockquote>\n<p><strong>还需要启动引导程序吗？</strong></p>\n<p>你可能听说过 GRUB 这个名字，它是大多数 GNU&#x2F;Linux 发行版的默认启动引导程序，GRUB 异常的强大，可以引导几乎所有的操作系统内核。</p>\n<p>但是，进入 UEFI 时代后，我们其实多了一种选择：<strong>直接生成 Linux 内核的 EFI 启动文件并交由 EFI 引导</strong>（不应当称之为 BIOS，因为 EFI 和 BIOS 并不一样）。这会使得启动略快一些。不过这是相当麻烦的，因为要手动（或者设置自动程序）生成内核的引导文件。如果启用了安全启动，还要进行内核签名。</p>\n<p>以上问题当然是有解决方案的，但这已经超出了本指南的范围，我们会在其它文章中再行介绍。另外，使用 EFI 直接引导时不方便选择启动系统（需要进入 EFI 菜单），所以只建议单系统用户使用。</p>\n<p>不管怎样，让我们先安装 GRUB 吧，因为下一次重启就需要引导。除非你打算在这里完成 EFI 的配置，但如果你真的做了，你会有后脑勺被拳头砸过的感觉。</p>\n</blockquote>\n<p>如果在安装双系统，请先执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S os-prober<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个程序可以识别其它的操作系统。</p>\n<p>现在下载 GRUB 软件包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S grub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后安装 GRUB 到指定的 EFI 分区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">grub-install --target<span class=\"token operator\">=</span>x86_64-efi --efi-directory<span class=\"token operator\">=</span>/boot --bootloader-id<span class=\"token operator\">=</span>grub --recheck<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>命令很长，但依然要准确地输入。如果哪里不正确，GRUB 会提醒你。</p>\n<hr>\n<p>现在配置 <code>os-prober</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"GRUB_DISABLE_OS_PROBER=false\"</span> <span class=\"token operator\">>></span> /etc/default/grub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看看，我们再次使用 <code>echo</code> 和 <code>&gt;&gt;</code> 完成了文件写入。</p>\n<blockquote>\n<p><strong>巧妙的命令组合</strong></p>\n<p>为什么没有类似 <code>write-file a.txt &quot;hello, world&quot;</code> 这样的命令？</p>\n<p>这是因为使用已有的命令组合（在这里是 <code>echo</code> 和重定向）足以简单地完成这些任务，而且还可以提供极高的自定义过程。</p>\n<p>想想下面这两个问题：如果我想同时写入两个甚至八个文件怎么办？如果同时还想做些筛选怎么办？这就得设计很多很多的命令！</p>\n<p>这样做会带来两个问题：</p>\n<ul>\n<li><p>系统执行命令的速度会变慢（因为要查找命令）。</p>\n</li>\n<li><p><code>write-8-files-and-search</code> 这样的命令会让人不禁担忧设计这种命令的人是否已经疯了。</p>\n</li>\n</ul>\n<p>你可以试着搜索一下 <code>tee</code> 和 <code>grep</code>，看看如何使用它们的组合解决这些问题。</p>\n<p>GNU 所编写的程序（当然还有很多其它程序）都遵循「单一功能原则」：一个程序只负责一个任务，例如 <code>cat</code> 只负责读文件，而 <code>grep</code> 只负责查找——虽然它的查找功能十分强大，但也只是查找。</p>\n<p>通常我们称这种程序为「工具」（Tools），而称那些有很多功能的程序（例如 GIMP）为「应用」（Applications）。</p>\n</blockquote>\n<hr>\n<p>现在运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令生成供 GRUB 读取的配置文件，用于启动。</p>\n<p>在输出中你应当看到 <code>vmlinuz-linux</code>、<code>initramfs-linux</code> 等字样，并且要确保最后 GRUB 输出了 <code>done</code>。</p>\n<p>如果缺少了哪一个，或者看上去有问题，那么请再试一试，如果依然不行，那么……如果你愿意，可以键入 <code>exit</code> 返回 LiveCD，再键入 <code>reboot</code> 重启，之后你可以从头再来（当然，不必重新分区了）。</p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p>我们很想一鼓作气，但处理器看上去已经受不了了。正好借此机会，我们来确认一下 GRUB 能否正常运行，同时看看我们已经做了多少。</p>\n<p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>退出当前系统（还记得 <code>arch-chroot</code> 吗）。</p>\n<p>再执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">shutdown</span> now<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>来关闭计算机。</p>\n<p>等指示灯熄灭，所有的部件都冷却下来后，拔下 USB，然后再接通电源开机。</p>\n<hr>\n<p>开机时依然要设法进入 UEFI 设置，然后调整启动顺序，将 Arch Linux 或者 GRUB 作为第一启动项。</p>\n<p>有时它可能不叫这个名字，没有关系，只要确保将「Windows Boot Manager」放在最后，一般 Arch 也就相应地放在最前面了。</p>\n<p>现在等待系统启动（通常几秒钟），随后你会看到 Arch 的登录界面：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;ComputerName&gt; Login:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>是的，依然没有好看的图像，但是我们现在有相当的信心，因为我们已经知道如何驾驭终端，既然如此，好看的图像还会远吗？</p>\n<p>在后面键入你的用户名并回车，随后 Arch 会向你询问密码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Password:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输入你的密码。密码仍然没有回显，确认输入正确后回车即可。</p>\n<p>随后你就可以回到熟悉的终端：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;UserName&gt;@&lt;ComputerName&gt; ~ $<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意到 <code>@</code> 的前面已经变成了你的用户名，这也意味着此后我们的身份不再是 <code>root</code>，因此，执行一部分命令时，需要在最前面添加 <code>sudo</code>（如果你还记得它的作用）。</p>\n<h3 id=\"安装桌面\"><a href=\"#安装桌面\" class=\"headerlink\" title=\"安装桌面\"></a>安装桌面</h3><blockquote>\n<p><strong>使用桌面环境还是窗口管理器？</strong></p>\n<p>要回答这个问题，首先必须明确二者的区别。</p>\n<p>桌面环境（DE）是窗口管理器（WM）的超集。DE 提供菜单栏，托盘，标题栏，小工具等多种组件集合，用上去很像其它操作系统的「桌面」。而 WM 通常只提供简单的窗口管理（包括层叠），操作主要依赖键盘。因为由于不涉及图形系统，很多 BUG 就不会产生。</p>\n<p>本指南使用 DE，因为我们要创建的是桌面操作系统，所以应当尽可能给它「桌面」的感受，同时也不会给人太高的学习成本。但如果喜欢 WM，我们的其它文章中也会提到如何配置和安装。</p>\n<p>如何在二者中做出选择本来就是一个比较的问题，但是有的时候或许我们并不需要选择，既然你已走上 Arch 这条路，或许有一天你能找出一个不错的解决方案。</p>\n<p>谁知道呢？</p>\n</blockquote>\n<p>为 GNU&#x2F;Linux 添加桌面本身就是安装几个应用程序的工作，所以这件事情并不困难。不过从这里开始是一个分界点，从此之后的很多软件并不是只有一种选择，我会尽可能列出多的可能，试图阐明它们的区别，不过最终的选择权依然在你的手中。</p>\n<h4 id=\"图形系统\"><a href=\"#图形系统\" class=\"headerlink\" title=\"图形系统\"></a>图形系统</h4><p>下面来面对这样一个问题：图形系统。它用于和桌面环境商定显示图像的方法。</p>\n<p><em>我们希望尽可能将问题简单化，因此并未区分显示协议、窗口系统、显示协议实现等概念，而是统称图形系统。</em></p>\n<p>目前，主流的选择有两个：</p>\n<ul>\n<li><p>X Window System（X11），这个系统比较古老，这既是优势也是缺陷：</p>\n<ul>\n<li><p>支持面非常广泛（几乎所有）。</p>\n</li>\n<li><p>运行稳定，BUG 较少。</p>\n</li>\n<li><p>系统占用相当高（如果在玩 Minecraft 时运行 <code>top</code>，<code>Xorg</code> 经常紧挨在 <code>java</code> 的下面），运行比较慢。</p>\n<p><em>在一些比较早期的文章中，X 被评价为「较慢」，但一段时间以来，各种实例都表明，X 的性能消耗已经远远不再是「较高」。在渲染程序越来越复杂的今天，X 的性能问题明显地暴露出来。</em></p>\n</li>\n<li><p>不太安全（类似 AutoHotKey 之类的东西是有可能存在的）。</p>\n</li>\n<li><p>完全不兼容 Wayland，Wayland 程序不能在 X 上运行（除非使用 <code>weston</code> 混成器，但这样有为了使用 X 而使用 X 的嫌疑）。</p>\n</li>\n<li><p>可供参考的资料比较多。</p>\n</li>\n</ul>\n</li>\n<li><p>Wayland，这个系统比较新，虽然设计上是为了取代 X，但事实上它却和 X 形成了类似互补的关系——它的优势正是 X 的缺陷，反之亦然：</p>\n<ul>\n<li><p>支持面比较窄（虽然仍然在快速增加）。</p>\n</li>\n<li><p>运行不太稳定，BUG 较多。</p>\n</li>\n<li><p>系统占用较低（我们很难指望这么频繁使用的组件拥有极低的占用），运行很快。</p>\n</li>\n<li><p>比较安全（如果未经许可，屏幕录制是不可能的）。</p>\n</li>\n<li><p>大多数 X 应用程序可以在 Wayland 上运行（如果合理使用 <code>xwayland</code> 等兼容程序）。</p>\n</li>\n<li><p>可供参考的资料比较少。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><em>过去的很多文章中认为 Wayland 缺乏驱动程序，在当时的确如此，但这一现象现在已有所改善：NVIDIA 495 驱动已经提供了相应的支持，而 Nouveau 也基本上到位了（至少已经有成功的例子）。</em></p>\n<hr>\n<p>你可能在想「我全都要」。噢不，你不能。即使你设法安装了两套图形系统，你也只能使用一个。所以……</p>\n<blockquote>\n<p>做出你的选择，并承担相应的后果。</p>\n</blockquote>\n<p>现在我们回来，希望你已经做出了自己满意的回答。</p>\n<p><em>不必为选择 X 而担心更新问题。影响如此巨大的图形系统更新时，一定会有成熟的解决方案。而且，并没有人规定你必须升级，这可不是 Windows Update！另外，即使 X 的性能的确不好，但还是比 Windows 强多了，你大可不必担心。</em></p>\n<p><em>也不必为选择 Wayland 而担心 BUG。尽管漏洞随时都存在，但是它们通常有合适的修复方案。即使不兼容，大多数情况下也可以通过将应用程序切换到 XWayland 上完成运行，而要是兼容，那就是赚了！</em></p>\n<hr>\n<p>如果决定使用 X：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S xorg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果决定使用 Wayland：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S wayland wayland-protocols xorg-xwayland<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"桌面环境\"><a href=\"#桌面环境\" class=\"headerlink\" title=\"桌面环境\"></a>桌面环境</h4><p>现在你可以选择一个喜欢的桌面环境。</p>\n<p>KDE 还是 GNOME？噢不，这个看法也太狭隘了，来看看 ArchWiki 给出的一些选择（部分没有列出）：</p>\n<ul>\n<li><p>Cinnamon</p>\n</li>\n<li><p>Cutefish</p>\n</li>\n<li><p>Enlightenment</p>\n</li>\n<li><p>GNOME</p>\n</li>\n<li><p>KDE</p>\n</li>\n<li><p>LXDE</p>\n</li>\n<li><p>Sugar</p>\n</li>\n<li><p>Xfce</p>\n</li>\n<li><p>Trinity</p>\n</li>\n</ul>\n<p>……这只是一小部分。</p>\n<p>到这里的选择就很多了，我们不太可能在这里一一介绍。不过你可以前往 ArchWiki 并搜索名字（当然是英文）来进入其页面，并找到相应的安装方法和配置方法。</p>\n<p>同时你还需要为桌面环境选配一个显示管理器（Display Manager），常用的选择有很多，例如 GDM、LightDM、SDDM 等。</p>\n<p>在选择时要遵循一个原则：<strong>先成套后搭配</strong>，也就是说，如果桌面环境为你提供 DM（例如 GNOME 提供 GDM），就使用它提供的，否则再自行搭配（例如 Cinnamon 搭配 LightDM）。你同样可以在 ArchWiki 上找到一些建议。</p>\n<p><em>当然如果你认为你的水平足够高，那么这些限制都可以随便打破，只要你知道遇到错误怎么处理。</em></p>\n<hr>\n<p><strong>但是</strong>，我们所编写的是<strong>指南</strong>，一份指南怎能只告诉它的读者「去查 Wiki，然后自己试试」？负起指南的责任远远高于保持中立。所以，我们将介绍 GNOME 的安装方法，不过同时读者应当知道，这<strong>只是万千选择中的一个</strong>，请不要局限自己的视角，否则就失去了 Arch 宝贵的 DIY 特点。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S gnome gdm\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> gdm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就这么简单。</p>\n<p>当然无论选配哪一个 DE、哪一个 DM，都要记得运行 <code>systemctl enable &lt;DMName&gt;</code> 来启动此 DM 的服务，否则将无法进入登录界面。</p>\n<p>顺便提一句，GNOME 已经正式支持 Wayland，所以若要让 GNOME 在 X 上运行，需要额外的配置，这里叙述从简，就不提及了。</p>\n<hr>\n<h3 id=\"驱动程序\"><a href=\"#驱动程序\" class=\"headerlink\" title=\"驱动程序\"></a>驱动程序</h3><p>现在我们已经来到最后一步，也就是驱动程序的安装。</p>\n<p>大多数驱动程序已经内置在操作系统中，包括 <code>nouveau</code>、<code>mesa</code>、<code>amdgpu</code> 等。对于我们所使用的机器，并不需要安装任何额外的驱动，所有的组件都可以正常运行。由于我们还没有回到桌面环境，因此尚无法预知可能出现的问题，不过以下提供针对硬件的一些建议：</p>\n<ul>\n<li><p>NVIDIA GPU（问题最多）：</p>\n<ul>\n<li><p>如果是唯一的图形卡，并且你的屏幕分辨率高（4K 及以上），那么 <code>nouveau</code>（内置的自由驱动程序）最高只能支持 30 Hz 的刷新率。</p>\n<p>我们不建议使用非自由软件，所以根据你自己的意愿，如果的确问题影响到正常使用，你可以使用 <code>nvidia</code> 这一专有驱动程序……但希望不需要。</p>\n<p><code>nouveau</code> 已经内置，但如果你不得不使用专有驱动，可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S nvidia<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>较新的图形卡使用 <code>nouveau</code> 就可以正常支持 Wayland，如果不能，那么和上面的解决方法一样。</p>\n</li>\n<li><p>如果是加速用图形卡（例如双图形卡笔记本电脑中的独立图形卡），则通常无需单独安装驱动程序。</p>\n</li>\n<li><p>太老的图形卡可能不被支持，并且无法正常运行 Wayland。</p>\n</li>\n</ul>\n</li>\n<li><p>AMD GPU：</p>\n<ul>\n<li><p><code>mesa</code> 和 <code>amdgpu</code> 已经内置，它们应当可以驱动绝大多数现在流行的 AMD 图形卡。</p>\n</li>\n<li><p>更老的图形卡需要 ATI 驱动程序，可参考 ArchWiki 完成安装。</p>\n</li>\n</ul>\n</li>\n<li><p>Intel GPU：</p>\n<ul>\n<li>无需单独驱动，系统已经内置一套完美的（而且自由的）Intel 图形卡驱动程序。</li>\n</ul>\n</li>\n<li><p>蓝牙：</p>\n<ul>\n<li><p>通常安装 <code>bluez</code> 和 <code>bluez-utils</code> 可以解决蓝牙驱动问题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S bluez bluez-utils<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果蓝牙没有自动激活，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> bluetooth\n<span class=\"token function\">sudo</span> systemctl start bluetooth<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>有些桌面环境集成了蓝牙控制器，如果这样则无需单独安装。</p>\n<p>如果没有，那么可以使用 <code>bluetoothctl</code> 这样一个小巧的命令行控制器。</p>\n</li>\n</ul>\n</li>\n<li><p>触摸板</p>\n<ul>\n<li>无需单独驱动，<code>libinput</code> 足以处理大多数情况。</li>\n</ul>\n</li>\n<li><p>声卡</p>\n<ul>\n<li>声卡这一装置已经如此流行，以至于甚至没有人注意到它还有驱动程序。从未有哪个外部设备如声卡一般如此统一和协调：无需驱动程序，它几乎肯定能用。</li>\n</ul>\n</li>\n<li><p>鼠标和键盘</p>\n<ul>\n<li>作为 PIC 上的设备（PIC 1 和 PIC 12），鼠标和键盘通常无需驱动。</li>\n</ul>\n</li>\n<li><p>打印机</p>\n<ul>\n<li><p>这有点复杂，基本上是要取决于打印机制造商对 OpenPrinting 的支持程度，不过下述几个步骤通常适用于大多数打印机。</p>\n</li>\n<li><p>如果制造商提供了 GNU&#x2F;Linux 的驱动程序，建议使用它。</p>\n</li>\n<li><p>否则，试试 <code>cups</code> 与 <code>gutenprint</code>。</p>\n</li>\n<li><p>如果这还不行，试着找到与你的机器最接近的驱动程序并使用。</p>\n</li>\n<li><p>如果以上方法都不行，那么很遗憾，这台设备或许无法被驱动。</p>\n</li>\n</ul>\n</li>\n<li><p>摄像头</p>\n<ul>\n<li>通常无需单独安装驱动程序。如果它无法正常运转，请查阅 Wiki 上是否有对应机型的解决方案，或者联系其制造商。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>重启计算机，如果一切正常，GRUB 将可以引导 Arch Linux。如果在安装双系统，你会发现 Windows 也应该出现在 GRUB 选项中。（当然，要是没准备好安全启动，还是先不要动它）</p>\n</div><div class=\"story post-story\"><h2 id=\"接下来做什么\"><a href=\"#接下来做什么\" class=\"headerlink\" title=\"接下来做什么\"></a>接下来做什么</h2><h3 id=\"美化\"><a href=\"#美化\" class=\"headerlink\" title=\"美化\"></a>美化</h3><p>系统启动后一定会令你大吃一惊，因为默认的 GNOME 其实一点都不简陋，即使不安装主题，它也相当的优雅。</p>\n<p>当然，即使你没有使用 GNOME，其它的 DE 一定也为你提供了不错的体验，如果没有，请告诉他们，我相信大多数开发者会对于改善用户体验很有兴趣。</p>\n<p>如果你不喜欢默认的主题，那也没有关系，你可以在网络上搜索一些适合你的 DE 的主题，然后安装它，这些纯粹是个性化的东西，因此就不展开了。</p>\n<p>此外，GRUB 也是可以设定主题的，所以你知道要做什么了不？（大多数人都同意黑底白字绝对不是最好的设计）</p>\n<p>DM 也是可以设置主题的，不过相比桌面本身而言，可选的略微少了一些。当然，你可以设置自动登录来直接跳过登录过程，权限系统会保证操作系统的重要文件不受破坏。但是如果需要绝对的安全，还是不要这样做。</p>\n<p>声音什么的也是可调的，如果你之前不知道的话。</p>\n<h3 id=\"安全启动\"><a href=\"#安全启动\" class=\"headerlink\" title=\"安全启动\"></a>安全启动</h3><p><strong>这并不是只有双系统才应当考虑的问题。</strong></p>\n<p>UEFI 新增的功能之一是安全启动，它保证所引导的内核已经过签名，这样可避免恶意软件侵入内核破坏操作系统。虽然大多数主板上内置 Microsoft 的 CA 证书，但其实这是可以修改的。</p>\n<p>绝大多数情况下，GNU&#x2F;Linux 自身的安全已经足够，但是安全启动仍然应当被启用，如果没有安装 Windows，那么只需要一些不很复杂的配置，就可以在 <code>pacman</code> 每次升级内核时自动签名，而同时这也能保证你的安全。</p>\n<p>而如果要和 Windows 并存，问题也并不复杂，不过详细的操作方法已经超出我们的范围，所以只好以后有机会再说了。</p>\n<p>虽然说得挺吓人，但也不必太过慌张，你认为有多少恶意软件可以完美地注入到一个常常更新的内核中呢？所以你大可以直接删除 Windows，然后完全无视这个功能。以前没有安全启动的时候，我们碰到过这些问题吗？所以说，很多这样的问题，其实都是被「制造」出来的。</p>\n<blockquote>\n<p>如果用自己数年糟糕的使用体验去换一次防御病毒入侵的机会，那这种防御到底有什么意义？</p>\n</blockquote>\n<h3 id=\"安装输入法\"><a href=\"#安装输入法\" class=\"headerlink\" title=\"安装输入法\"></a>安装输入法</h3><p>如果要使用其它语言输入，应当安装输入法。对于中文（以及一些其它的语言），<code>fcitx-im</code> 和 <code>ibus</code> 等等都是不错的选择。注意在 Windows 上很流行的输入法通常在 GNU&#x2F;Linux 上并不一定工作得很完美。</p>\n<h3 id=\"AUR\"><a href=\"#AUR\" class=\"headerlink\" title=\"AUR\"></a>AUR</h3><p>AUR 是由社区维护的软件仓库，其中包含一些 <code>pacman</code> 不提供的。</p>\n<p>若要使用 AUR，请参考 <a href=\"https://aur.archlinux.org/\">AUR 主页</a> 的指南。</p>\n<h3 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h3><p>也就是俗称的「滚」，它是指这条命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Syu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它更新系统中的所有软件包，确保它们处于最新。</p>\n<p>这条命令需要频繁执行（几乎每天），因此你可能会希望给它安排一个系统服务来自动化这个过程。</p>\n<p>如果执行过程中出了错误也不要惊慌，因为世界上所有的 Arch 用户也会面临和你一样的问题。同理，开发者一定会在自己的电脑上测试后再发布，而测试环境绝大多数情况下和你的环境应该是几乎一样的。</p>\n<p><em>这也是我们不建议使用 ArchLinuxCN 这样的扩展源的原因之一。使用统一的标准和规范，在出问题时更容易得到更多的帮助。当然这只是建议，请按自己的需求做最后决定。</em></p>\n<h3 id=\"Wine\"><a href=\"#Wine\" class=\"headerlink\" title=\"Wine\"></a>Wine</h3><p><a href=\"https://www.winehq.org/\">Wine</a> 是一个可以在 GNU&#x2F;Linux 上执行一些 Windows 应用程序的组件，它通过翻译 API 来完成这个过程。由于 Microsoft 并未公开一些方法的规范，因此 Wine 只能依靠猜测，所以会使得它不太稳定。但是，相当多的软件其实已经可以使用 Wine 来运行（.NET 3.5 和 4.6.1 可以「完美」运行，想想基于它创建的应用程序有多少）。</p>\n<p>如果你已经下定决心删除了 Windows，却又对 Windows 的一些应用程序念念不忘，或许 Wine 能够帮你渡过一段难关。</p>\n<p>你可能会认为我把一个 Windows 相关的问题放在这里不太合适，但是其实并不是如此。如果 Wine 是一个自由软件，而 GNU&#x2F;Linux 也是，那么为什么这个组合就不能使用呢？至少这为更多使用 Arch 的人带来了希望啊。</p>\n<h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><p>GNU&#x2F;Linux 的游戏环境比我以前预想的要<strong>好太多了</strong>。</p>\n<p>Unreal Engine 和 Unity 都支持 GNU&#x2F;Linux，类似这样的通用游戏引擎还有很多。游戏公司如果愿意，可以提供针对 GNU&#x2F;Linux 的发行版本（有些的确也是这么做的，例如 Dota 2 和 Minecraft）。</p>\n<p>Steam 上也有相当多的游戏可以在 GNU&#x2F;Linux 上运行（约 70%），它们中有相当一部分虽然不原生支持，但可以通过转译等操作来运行，例如 Apex Legends、Warframe 和 Grand Theft Auto V。</p>\n<p>现在你还觉得 GNU&#x2F;Linux 不适合游戏吗？其实一开始就不是这样。在 GNU&#x2F;Linux 上，Minecraft 平均比 Windows 运行时帧率高约 50%，如果不信可以自己试试。</p>\n<p>对于移动设备上的游戏那就更加简单，因为模拟器实在是太多了。当然，不使用模拟器的方法也是有的，这里就不展开介绍了。</p>\n<p>另外，还有多少人不知道 Android 经过修改也可以直接安装在电脑上？</p>\n<h3 id=\"开始你的创造\"><a href=\"#开始你的创造\" class=\"headerlink\" title=\"开始你的创造\"></a>开始你的创造</h3><blockquote>\n<p>一切到此结束，一切又由此而始……</p>\n</blockquote>\n<p>至此，我们的这份指南的主体部分就结束了，但这只是开始，现在你拥有了一套 Arch。也许它不完美，也许它不成熟，都不要紧。尽管整个过程费时费力，但是如果现在让你说说你的 Arch 上面有些什么，你是不是该了如指掌了？</p>\n<p>更重要的是，这一切是由你来指挥的，<strong>计算机已经在你的掌控之中</strong>！再想想捆绑安装的各种电脑管家，最多只能推迟 35 天的强制更新，没来由的各种弹窗，预装的成组软件……这样自己组装而来的系统，是不是有一种舒畅感？</p>\n</div><div class=\"story post-story\"><h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><blockquote>\n<p>我本可以忍受黑暗，如果我不曾见过光明。</p>\n</blockquote>\n<p>再一次回头看我们最初的目标，一路走来并不容易，现在你坐在新拆封的桌面环境之前，想想之前的终端，是不是有一种冲出黑暗的感觉？如果是的，那么恭喜，欢迎你通过入职考核，正式成为 Arch 的一员！</p>\n<p>最后，让我们用一条有趣的命令结束这份指南……</p>\n<p>打开虚拟终端，它现在应该在应用列表里（如果 DE 已经集成）。不过要是没有，你可以按 <code>Ctrl + Alt + F1</code> 进入（熟悉的）TTY 终端，如果不行，再同时按下 <code>Fn</code>。</p>\n<p>键入（不要忘了切换到英文输入法）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span><span class=\"token string\">'s=\\47%s\\47;printf \"$s\" \"$s\"'</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"<span class=\"token variable\">$s</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$s</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（你可以多试试几次，没有危险！）</p>\n<p>它输出了些什么？你能再写出一个类似的程序吗？</p>\n<p>（要回到图形界面，按下 <code>Ctrl + Alt + F7</code>，如果不行，再同时按下 <code>Fn</code>）</p>\n<p>GNU&#x2F;Linux 的世界远远比想象得要广阔和奇妙得多，一切皆有可能。</p>\n<blockquote>\n<p>这是属于你的世界，我很荣幸为你敲开它的大门。</p>\n</blockquote>\n<p>现在该说再见了！哦，如果你想要说些什么，评论区在下面。</p>\n\n</div>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"欢迎\"><a href=\"#欢迎\" class=\"headerlink\" title=\"欢迎\"></a>欢迎</h2><p>既然你已经来到这里，说明你想要获得一份纯净的 GNU&#x2F;Linux，并且在万千选择中，挑中了你中意的那一个。这就是 Arch Linux，一个「注重简洁的发行版」。</p>\n<h3 id=\"我们从一个问题开始\"><a href=\"#我们从一个问题开始\" class=\"headerlink\" title=\"我们从一个问题开始\"></a>我们从一个问题开始</h3><blockquote>\n<p>Arch Linux 这么难用，为什么还要用它？</p>\n</blockquote>\n<p>Arch Linux 难用吗？<strong>当然难</strong>，我并不想骗你。</p>\n<p>如果按易用性来看，Debian，LinuxMint，CentOS，Ubuntu 都更好用，几个按钮就能解决的问题，多简单。</p>\n<p>可是似乎有一点不对……</p>\n<ul>\n<li><p>我为小巧精悍而来，我如何接受 Flatpak？</p>\n</li>\n<li><p>我为软件自由而来，我如何同意 SnapCraft？</p>\n</li>\n<li><p>我为安全可控而来，我如何理解自动更新？</p>\n</li>\n<li><p>我为隐私秘密而来，我如何认可数据收集？</p>\n</li>\n</ul>\n<p>如果所谓的易用性要以这些更为重要的东西为代价，那么这样得来的「好用」到底有什么价值？！</p>\n<p>……</p>\n<p>几乎所有的 GNU&#x2F;Linux 发行版都或多或少包含着「预装」和「产品」的成分，而 Arch Linux 是为数不多拒绝这样做的发行版之一。</p>\n<p>我选择 Arch Linux，不是因为其看上去专业，也并非因为它更加完美，事实上，它比大多数发行版都要简单，甚至是简陋。</p>\n<p><strong>而我看重的，正是这份简陋背后的单纯。我们相信你也是如此。</strong></p>\n<h3 id=\"开始之前\"><a href=\"#开始之前\" class=\"headerlink\" title=\"开始之前\"></a>开始之前</h3><p>欢迎来到 Arch Linux 的世界！你一定已经对 Arch 有所耳闻，作为被称为「邪」的 Linux 发行版，Arch 和其它的发行版很不一样，它没有好看的 GUI，没有方便的安装程序，但这并不能掩饰它独特的魅力：</p>\n<ul>\n<li><p>滚动式发行，一次安装即可。</p>\n</li>\n<li><p>你能获得一套真正「纯净」的 GNU&#x2F;Linux 操作系统。</p>\n</li>\n<li><p>运行很快。</p>\n</li>\n<li><p>无需配置即免疫大多数病毒。</p>\n</li>\n<li><p>几乎不需要清理垃圾。</p>\n</li>\n<li><p>自由且开放，虽然 AUR 中存在部分专有软件，但我们可以选择。</p>\n</li>\n<li><p>非常好玩且有趣！（真的是这样！）</p>\n</li>\n<li><p>由于只支持一种架构，反而避免了很多问题。</p>\n</li>\n<li><p>拥有世界上最好的文档之一：<a href=\"https://wiki.archlinux.org/\">ArchWiki</a>。</p>\n</li>\n<li><p>会真正显得你很酷。</p>\n</li>\n</ul>\n<p>……诸如此类。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><p>在你能够开始你的旅途前，我们有一些需要说明的内容：</p>\n<ul>\n<li><p>本指南<strong>不是面向新手的</strong>。</p>\n<ul>\n<li><p>Arch Linux 本身也不是面向新手的。</p>\n</li>\n<li><p>你需要计算机基础知识，包括但不限于终端的基础概念和使用方法。你还得知道分区、UEFI、引导、BIOS 设置之类的是什么意思。</p>\n</li>\n<li><p>你需要对 GNU&#x2F;Linux 有最基本的了解，至少要知道有显示管理器，桌面环境这些概念（弄不清楚也没关系，但要知道有这么个东西）。</p>\n</li>\n<li><p>需要不错的英语，或者不错的翻译姬（例如 <a href=\"https://translate.google.com/\">Google 翻译</a> 以及它的 <a href=\"https://translate.google.cn/\">国内版</a>），因为你会需要 ArchWiki 的帮助，而有些条目是没有翻译的。</p>\n</li>\n</ul>\n<p>从头开始讲解以上内容会消耗大量的篇幅，在本站的其它地方你可以学习到上述内容的一部分。</p>\n</li>\n<li><p>请合理使用本指南。</p>\n<ul>\n<li><p>本指南所述的方法不是唯一的安装方法，也并不一定适用所有机器，<strong>请不要照抄命令</strong>。对你机器造成的损害，我们爱莫能助。</p>\n</li>\n<li><p>本指南所述介绍内容不是专业知识，出于便于理解的目的或表述的的需要，有些可能也并不准确。如有疑问，请参考权威资料获得更准确的解释。</p>\n</li>\n<li><p>确保你已经获得计算机的使用权限，<strong>不要在你朋友的电脑上做这些</strong>（除非他们也很感兴趣）！当然，也不要在任何不属于你的电脑上这样做。</p>\n</li>\n<li><p>确保你没有什么紧急任务需要使用电脑。安装过程耗时较长，且一旦开始就不能中断。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"有关双系统的建议\"><a href=\"#有关双系统的建议\" class=\"headerlink\" title=\"有关双系统的建议\"></a>有关双系统的建议</h3><p>首先要说明的一点是，我们建议<strong>一台计算机只安装一套操作系统</strong>。原因主要有：</p>\n<ul>\n<li><p>兼容性问题。例如 Microsoft 要求必须启用安全启动，而 Arch Linux 默认并不支持。如果不启用，Windows 11 的部分功能将无法使用，如果要启用，就需要对 Arch Linux 进行相当麻烦的配置。</p>\n</li>\n<li><p>使用习惯问题。</p>\n</li>\n<li><p>配置的时间成本远高于再买一台计算机的成本。</p>\n</li>\n<li><p>当你会合理使用 VirtualBox 之类的软件后，你会发现一个硬盘上的 Windows 很多余。</p>\n</li>\n</ul>\n<p>……等等。</p>\n<p>当然，更多 Windows 用户逐渐开始了解 GNU&#x2F;Linux 和自由软件毕竟是件好事，如果我们不在这里提供安装方法，他们（或许还有你）可能就会放弃本可以获得的自由。基于这一点，本指南中也增补了双系统安装的一些说明。</p>\n<p>如果你的另一个系统根本不是 Windows……那就不会有这些顾虑，你可以按照单独安装的步骤进行安装。不过如果是 Hackintosh，小心不要更改硬件或者破坏启动区。</p>\n<h3 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h3><p>本指南对一些文字有特殊的表示方法，我们在此先行约定。</p>\n<ul>\n<li><p>占位符 <code>&lt;&gt;</code></p>\n<p>当你注意到这样的文字时：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">&lt;</span>YourName<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你应当知道需要替换 <code>&lt;YourName&gt;</code> 为合适的值。注意，不是替换 <code>YourName</code>，而是 <code>&lt;YourName&gt;</code>。</p>\n<p>举个例子，假设你的名字是 <code>Annie</code>，那么：</p>\n<ul>\n<li><p>这样是正确的：<code>echo Annie</code>，而</p>\n</li>\n<li><p>这样是错误的：<del><code>echo &lt;Annie&gt;</code></del>（没有替换 <code>&lt;&gt;</code>）</p>\n</li>\n<li><p>这样是极其错误的：<del><code>echo &lt;YourName&gt;</code></del>（直接照抄）</p>\n</li>\n</ul>\n<p>你还需要知道我们所说的东西的英文。例如，如果我们提到「选择的设备是 XXX」，你应该知道我们要替换的东西是 <code>&lt;Device&gt;</code>（而不是 <code>&lt;Snake&gt;</code> 或者 <code>&lt;Monkey&gt;</code> 之类的）。</p>\n</li>\n<li><p>组合键</p>\n<p>我们使用 <code>K1 + K2</code> 来表示组合键，例如 <code>Ctrl + C</code>、<code>F12</code> 以及 <code>Shift + Alt + 5</code>。按数字键时，请确保按的是主键盘上的键（1~9 和 0 是排成一排的）。</p>\n</li>\n</ul>\n<h2 id=\"目标与材料\"><a href=\"#目标与材料\" class=\"headerlink\" title=\"目标与材料\"></a>目标与材料</h2><h3 id=\"目标\"><a href=\"#目标\" class=\"headerlink\" title=\"目标\"></a>目标</h3><p>虽然服务器使用 Arch Linux（以后简称 Arch）的例子并不少，但我们的目标是桌面操作系统，因此我们可以略微降低对性能的需求，转而寻求更好的体验，同时可以使用并不那么稳定的新技术。</p>\n<p>本指南会将这台 Arch 配置到「出厂」状态，不带任何个性化但至少能看得过去，并且能够完成后续的优化步骤。</p>\n<h3 id=\"材料\"><a href=\"#材料\" class=\"headerlink\" title=\"材料\"></a>材料</h3><p>下述的是安装所需的设备。</p>\n<ul>\n<li><p>一台计算机，Arch 将安装在其上，它应当具有以下特性：</p>\n<ul>\n<li><p>UEFI 引导启动。</p>\n<p>如果你希望安装双系统，原先的操作系统也应当由 UEFI 引导。</p>\n<p>Windows 11 及之后的版本不再支持 Legacy BIOS，所以以后 Legacy BIOS 会很快被淘汰。截至本文写作时，已经有相当多的机型不再支持 Legacy BIOS。</p>\n</li>\n<li><p>至少 2 GiB 的 RAM，但建议有 4 GiB 以上。</p>\n<p>尽管 Arch 的运行只需极少的内存，但内存越大，缓存&#x2F;缓冲运行得就越好，系统会越快。</p>\n</li>\n<li><p>至少 25 GiB 的磁盘<strong>未分配空间</strong>，但建议有 50 GiB 以上。</p>\n<p>建议使用 SSD，会拥有更好的表现。</p>\n<p>请通过压缩或删除分区等方法来腾出这些空间，而不只是删除文件。</p>\n<p>确保这些空间是连续的，否则可能会引发极大的麻烦，如果你坚持，你需要在后面的分区部分自己处理这些问题。</p>\n<p>如果只安装 Arch，那么稍后可以在安装过程中直接清除磁盘，无需此步骤。</p>\n</li>\n<li><p>较新的 x86 处理器，使用 Intel 或 AMD 皆可。</p>\n<p><strong>不要用其它的处理器</strong>（除非你很了解它的技术细节），可能不支持或者发生崩溃。</p>\n</li>\n<li><p>较新的图形卡，如果太老，Arch 仓库里可能没有对应的驱动。</p>\n</li>\n<li><p>网络连接，可以使用无线网络，但有线网络更好。</p>\n<p>不要求是「流畅的」，因为 Arch 提供了足够多的镜像。</p>\n</li>\n<li><p>已接通电源，或者至少足够几个小时的电量。</p>\n<p>操作系统安装完成前，电源管理系统不可用，电量消耗可能会变高。</p>\n</li>\n<li><p>使用的是标准键盘布局（PC 键盘），对于其它键盘布局，请至 ArchWiki 寻找配置方法。</p>\n</li>\n<li><p>如果要安装双系统（另一个是 Windows），请关闭 BitLocker。</p>\n<p>若不这样做，你将无法直接通过 GRUB 启动 Windows（需要特殊的配置）。</p>\n</li>\n</ul>\n</li>\n<li><p>另一台计算机（是的！），这用来浏览资料和处理一些应急情况：</p>\n<ul>\n<li><p>最好是另一台 Arch，但这种情况不常见。</p>\n</li>\n<li><p>其次是另一台 GNU&#x2F;Linux，有些软件包是可以直接复制的，它们也更容易解决安装时遇到的问题。</p>\n</li>\n<li><p>网络连接，依然不需要是「流畅的」，因为 ArchWiki 在全球的速度都很快。</p>\n</li>\n<li><p>如果没有计算机，请试着借一台，对配置并没有要求，但<strong>不要使用移动设备</strong>（它们不能完成诸如创建启动 USB 之类的操作）。</p>\n</li>\n</ul>\n</li>\n<li><p>至少 1 GiB 的移动存储设备，但是建议至少 4 GiB，这会给你更多的选择（稍后会说到）。</p>\n<p>最好使用通用串行总线设备（USB），不要用一些奇怪的存储设备，否则你可能会遇到大麻烦。（我知道没人用光量子存储仪，这里主要指的是有一些智能功能的存储设备）</p>\n<p>不建议通过硬盘直接安装，虽然这的确可以，但是 USB 会方便得多。</p>\n<p>Arch 对于 USB 的速度要求并不高，因为安装过程实质上是下载而非复制。</p>\n<p>设备中所有数据都将丢失，故应先备份。</p>\n</li>\n<li><p>如果目标计算机<strong>只有</strong>特殊的输入装置（触摸屏，触摸板），则需要备用的鼠标（和键盘）。</p>\n<p>Arch 支持绝大多数的触摸板（希望你的也是如此），但如果不能，你会需要一个临时的鼠标。</p>\n<p>确保它们是有线的，无线可能存在驱动问题。</p>\n</li>\n</ul>\n<h2 id=\"安装过程\"><a href=\"#安装过程\" class=\"headerlink\" title=\"安装过程\"></a>安装过程</h2><p>下面要正式开始动手安装了。为防止你无意中做出些不该做的事，请仔细阅读以下内容。</p>\n<h3 id=\"操作须知\"><a href=\"#操作须知\" class=\"headerlink\" title=\"操作须知\"></a>操作须知</h3><ul>\n<li><p>确保你充分理解指南的内容，并且知晓命令每个部分的作用。当你发现 无法读懂指南的内容时，请去补充一下基础知识。</p>\n</li>\n<li><p>准确地键入命令，一个操作失误就可能摧毁整套系统。</p>\n</li>\n<li><p>不要钻牛角尖或者照搬指南，要阅读系统给出的提示。尤其是如果系统显示 <code>Run command blahblah to do this</code> 之类的信息，你不应当忽略它。</p>\n</li>\n<li><p>善用搜索引擎查找，遇事不决先 <a href=\"https://google.com/ncr\">Google</a>。（不要以无法访问作为理由，搜索引擎还有很多）</p>\n</li>\n<li><p>当遇到意外时，除了使用搜索引擎，还要参考 <a href=\"https://wiki.archlinux.org/\">ArchWiki</a>。<strong>无论如何都不要慌张</strong>，先停止操作，然后想想哪里出了问题。记住：只要你还能控制系统，你就有挽回的机会。</p>\n</li>\n<li><p>可以到各种社区提问，但是要记得遵守社区规则。本页面的最下方也有评论区，可以在那里寻求帮助。</p>\n</li>\n<li><p>不要一边做安装系统这种事，一边听音乐或者玩游戏。否则当你迷失在指南中时，你会有很强的挫败感。</p>\n</li>\n</ul>\n<p>请记住：</p>\n<div style=\"font-size:2.5rem;text-align:center;width:100%;\">数据无价 谨慎操作</div>\n\n<h3 id=\"下载和验证镜像\"><a href=\"#下载和验证镜像\" class=\"headerlink\" title=\"下载和验证镜像\"></a>下载和验证镜像</h3><p>一切的一切，都要从这个 ISO 文件说起。</p>\n<p>你已经知道，空的磁盘不可能自己运行起来，必须要插入启动盘来启动。实际上启动盘也就是一个迷你版操作系统，Arch 也不例外。唯一比较特别的是，大多数安装程序都是从自己当中复制文件到磁盘，而 Arch 却不是，它是下载软件包并安装到指定的磁盘上。</p>\n<p>所有 GNU&#x2F;Linux 操作系统的安装环境都可称作 LiveCD，后面我们还会见到这个名字。</p>\n<p>无论如何，现在我们需要 Arch 的安装程序。你可以从 Arch 官方的 <a href=\"https://archlinux.org/download/\">下载</a> 页面获得它的下载链接。</p>\n<p>Arch 提供了 BT 和 HTTP 两种方式（NetBoot 基本上不能用），至于使用哪一个完全是个人喜好的问题。BT 种子在页面最上面，而 HTTP 下载在比较下面的位置，并且提供了一堆镜像。</p>\n<p>你需要下载的文件应当是 <code>archlinux-x86_64.iso</code>，中间可能会多出一个日期，但不会有多余的前后缀。把下载的文件重命名为这个名字，以便后面的命令处理。</p>\n<hr>\n<p>获得镜像后请<strong>务必进行完整性校验</strong>，这是操作系统级的东西，不能容许哪怕一点出错。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># GNU/Linux</span>\nsha1sum archlinux-x86_64.iso\nmd5sum archlinux-x86_64.iso\n<span class=\"token comment\"># Windows</span>\ncertutil -hashfile archlinux-x86_64.iso SHA1\ncertutil -hashfile archlinux-x86_64.iso MD5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果不会使用终端，请试着学习一下，这并不困难。你不需要记住那些命令，只需要知道如何照着指南键入它们。你也可以使用一些具有图形界面的工具完成校验。</p>\n<p>确保输出的结果与 Arch 官网（一定要是官网啊）上的完全一致（在 HTTP 镜像列表之前，请仔细找一下）。使用两种校验方式，只是以防万一。</p>\n<p>如果校验结果不一致，尝试重新下载，如果文件看上去依然有问题，可换一个镜像，并将错误的镜像报告给 Arch 的维护者，以便他们排查问题。</p>\n<h3 id=\"制作可启动介质\"><a href=\"#制作可启动介质\" class=\"headerlink\" title=\"制作可启动介质\"></a>制作可启动介质</h3><h4 id=\"GNU-x2F-Linux\"><a href=\"#GNU-x2F-Linux\" class=\"headerlink\" title=\"GNU&#x2F;Linux\"></a>GNU&#x2F;Linux</h4><p>把 USB 插入电脑，执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">fdisk</span> -l\n<span class=\"token function\">sudo</span> <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>archlinux-x86_64.iso <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/<span class=\"token operator\">&lt;</span>YourUSBDevice<span class=\"token operator\">></span>\n<span class=\"token function\">sync</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>fdisk</code> 的目的是找出你的 USB 对应的标识，通常是 <code>/dev/sdb</code> 或者 <code>/dev/sdc</code>（可以根据容量判断）。<strong>请在确认这是你的 USB 之后再执行写入</strong>，写入错误的磁盘会造成数据损毁。</p>\n<p>写入完成后，拔出 USB 插入目标计算机。</p>\n<h4 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h4><p>在 Windows 上，你可以使用 <a href=\"https://www.balena.io/etcher/\">Etcher</a> 完成这个过程，<a href=\"https://rufus.ie/\">Rufus</a> 也可以，但<strong>不可以使用 UltraISO</strong>，可能导致启动错误。</p>\n<p>如果程序询问你引导和分区表类型，记得选择 UEFI 引导和 GPT 格式分区表。如果还询问你写入模式，选择 DD 模式。</p>\n<p>写入后 USB 将从系统中消失，但我们确信我们已经成功写入了镜像，这是正常的（Windows 还不能识别这种结构）。确认写入完成后，就可以拔出 USB 并插入目标计算机了。</p>\n<h3 id=\"启动设置\"><a href=\"#启动设置\" class=\"headerlink\" title=\"启动设置\"></a>启动设置</h3><p>关闭你的目标机器（确保是充分的关闭，不是休眠或者挂起之类的），稍等片刻后启动，并设法进入 UEFI 设置：</p>\n<ul>\n<li><p>对于大多数笔记本电脑，按住或连续按下 <code>Esc</code> 按钮，并选择类似 <code>UEFI/BIOS Settings</code> 的选项（如果有）。</p>\n</li>\n<li><p>对于大多数台式机，按住或连续按下 <code>Del</code> 按钮或 <code>F8</code> 按钮，如果不行，再试试 <code>Enter</code> 按钮，直到有办法进入 UEFI 设置。或者，如果知道主板型号，可以查询如何进入其 UEFI 设置。</p>\n</li>\n</ul>\n<blockquote>\n<p>尽管这个程序的正确名称应该是 UEFI 选项，但一些地方并不区分它和 BIOS，所以查找资料时，请也试试 BIOS 这个名字。</p>\n</blockquote>\n<hr>\n<p>对 UEFI 选项做如下调整：（标注「必须」的是一定要完成的，其它是可选的）</p>\n<ul>\n<li><p>关闭快速启动（Fast Boot）和<strong>安全启动</strong>（Secure Boot），后者尤其重要。（必须）</p>\n<p><em>如果你使用了诸如 Windows Hello 的功能，请务必先完成安装，进行安全启动配置，并且能够正常启动 Arch 之后，重新打开安全启动，再启动 Windows。否则，你可能会吃苦头。</em></p>\n</li>\n<li><p>如果进行过超频，现在暂时将处理器电压和内存频率等调回原来的数值，以免影响后续步骤。</p>\n</li>\n<li><p>启用 UEFI 引导，并将其设置为默认或优先。（必须）</p>\n</li>\n<li><p>关闭 CSM 支持模块。</p>\n<p><em>启用 CSM 当然也可以正常启动，然而 Linux 内核很容易被错误的模式加载，解决这个问题的根本方法就是彻底禁用 CSM。</em></p>\n</li>\n<li><p>将 USB 设备设置为第一启动项。（必须）</p>\n</li>\n<li><p>校准时间。</p>\n</li>\n</ul>\n<p>保存设置并重启，随后计算机会从 USB 启动。</p>\n<h3 id=\"接入网络\"><a href=\"#接入网络\" class=\"headerlink\" title=\"接入网络\"></a>接入网络</h3><p>Arch LiveCD 启动后会弹出一个菜单供你选择（启动哪一个），应当选择有 <code>archiso</code> 或者 <code>Arch Linux</code> 字样的（通常在菜单第一项），使用上下键选定，按回车确认。</p>\n<p>要经过几秒的加载（较慢的 USB 或处理器会需要十几秒），你才能看见 Arch LiveCD 环境的终端：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">root@archiso ~ #<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>要做的第一件事情是确认终端可以正常运行，键入以下内容并回车：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">whoami</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>应当输出 <code>root</code>。</p>\n<blockquote>\n<p>如果你从没使用过 GNU&#x2F;Linux 终端，你可能不习惯，这里没有鼠标，也没有好看的图像，只有苍白的提示符，所有的操作需要键盘完成。不过事实上终端是很人性化的，你只需要正确输入命令。请坚持一下，我们最后的结果可不会是这样！</p>\n</blockquote>\n<hr>\n<p>现在，如果你的设备可以连接有线网络， 那么将电缆插入网口，网络连接即自动完成。</p>\n<p>如果没有办法使用有线连接，运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">rfkill unblock all\niwctl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>你将会进入无线连接控制面板，这里同样没有好看的图像，只有一个提示符等待你的输入，但我们相信它完全可以满足我们的要求。现在输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">device list<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到你的无线设备，通常应当包含 <code>wlan</code> 字样（而且通常是 <code>wlan0</code>），记下它的名字。</p>\n<p><em>如果你好奇，那么我可以告诉你 <code>lo</code> 表示本机（本地环回接口），<code>eth</code>、<code>ens</code>、<code>eno</code>、<code>enp</code> 是不同类型的以太网卡（通常是有线）。</em></p>\n<p>如果找到了不止一个无线网卡，请在下一步中都试试。</p>\n<hr>\n<p>现在搜索网络：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">station <span class=\"token operator\">&lt;</span>Adaptor<span class=\"token operator\">></span> get-networks<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>将 <code>&lt;Adaptor&gt;</code> 替换成网卡的名字，例如 <code>wlan0</code>。请确保输入的命令正确。如果你输入了错误的命令，计算机会显示错误消息以示嘲讽。</p>\n<p>输出中会出现网卡所发现的周边网络，选择你认为合适的一个，记下名字，然后执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">station <span class=\"token operator\">&lt;</span>Adaptor<span class=\"token operator\">></span> connect <span class=\"token operator\">&lt;</span>NetworkSSID<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>类似的，把 <code>&lt;NetworkSSID&gt;</code> 替换为网络名即可。</p>\n<p>遗憾的是，<code>iwctl</code> 无法显示或使用非 ASCII 字符的 WLAN SSID（网络名）。如果你在使用个人热点，这可能是一个需要考虑的问题。</p>\n<p><em>这并不是 <code>iwctl</code> 本身的缺陷，而是因为你现在的环境下还没有其它语言的输入法，也没有其它语言的字体及显示支持。</em></p>\n<p>连接完毕后返回 Arch 终端：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<p>测试连接是否正常：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ping</span> archlinux.org<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>希望你能得到 <code>64 bytes from xxx</code> 这样的输出，那么你的网络连接完全正常。</p>\n<p>如果看到 <code>Timeout</code>，请尝试 <code>ping</code> 另一个主机（例如 <code>ping 1.2.4.8</code>），如果依然超时，请检查一下路由器和网关，或者试着换一个网络。</p>\n<p><em>有些主机无法进行 Ping 检测，这是正常的，因为 Ping 也可以作为攻击手段，部分主机为防御攻击而禁止了 Ping。</em></p>\n<p>如果连接通畅，按 <code>Ctrl + C</code> 组合键中断 <code>ping</code> 进程，键入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">clear</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>以将屏幕清空。此后我们不会单独执行这条命令，但你可以在认为屏幕太乱的时候执行它。</p>\n<h3 id=\"调整时间\"><a href=\"#调整时间\" class=\"headerlink\" title=\"调整时间\"></a>调整时间</h3><p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hwclock --systohc --utc\ntimedatectl set-ntp <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>它们的执行需要几秒钟（联网对时），完成后运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">timedatectl status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>确保输出时间是正确的。</p>\n<p><em>如果时间相差几个小时也是没问题的，因为这是 UTC 时间，要考虑时区偏移的问题。</em></p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>检查计算机上的磁盘：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fdisk</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输出像是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Disk &#x2F;dev&#x2F;sdb: 415.411 GiB, ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>而且可能不止一个。</p>\n<hr>\n<p>如果上面的输出太乱，你也可以选择使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsblk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它的输出更简单：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sdb                     disk\n|-- sdb1    888.88 G    part<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>disk</code> 表示磁盘，<code>part</code> 表示磁盘下的分区。</p>\n<hr>\n<p>你需要选择正确的用于安装的<strong>磁盘</strong>（不是分区），可以通过看容量来辨别。</p>\n<p>记住 <code>Disk</code> 后面的设备标识（<code>fdisk</code>）或者 <code>disk</code> 对应的磁盘（<code>lsblk</code>）。<strong>不要看走眼</strong>。如果在安装多个操作系统，这一点更加重要。</p>\n<p>通常要安装到 SSD 上（类似 <code>/dev/sda</code>），如果是机械硬盘，则可能是 <code>/dev/hda</code>，NVMe 闪存则是 <code>/dev/nvme0n1</code>，最后的那个字符可能会变化，但大体上看起来差不多。</p>\n<hr>\n<p>确定你的磁盘后，执行以下命令开始分区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">fdisk</span> /dev/<span class=\"token operator\">&lt;</span>YourDisk<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>&lt;YourDisk&gt;</code> 自然应该换成磁盘名字，以后这类替换我们不再赘述。</p>\n<p><code>fdisk</code> 随后会进入交互模式（就像 <code>iwctl</code>），现在来创建以下几个分区：</p>\n<ul>\n<li><p>512 MB 的 EFI 启动分区</p>\n</li>\n<li><p>大约 4 GB 的交换分区</p>\n</li>\n<li><p>其余所有空间的主要分区</p>\n</li>\n</ul>\n<p><em>实际上交换分区的大小可以自定，但不建议完全不设置（会增大内存压力），通常设置为内存大小和 4 GiB 中较小的那一个。此外，增大交换空间虽然不会拖累性能但毕竟会占用空间，如果拿不定注意，可以暂时不分配，稍后可以创建交换文件来解决这个问题。</em></p>\n<p>EFI 启动区的分配则需要考虑更多：</p>\n<ul>\n<li><p>如果你只安装一套操作系统，则必须分配。</p>\n</li>\n<li><p>如果先前计算机上已经存在 GNU&#x2F;Linux 或类似操作系统，不必重新分配（如果你知道这个分区在哪里），可以直接使用。</p>\n</li>\n<li><p>如果先前计算机上安装着 Windows，则应当重新分配，因为 Windows 默认 EFI 分区可能不足以存储启动信息。</p>\n</li>\n</ul>\n<p><em>高级用户可能会为 <code>/home</code> 或者 <code>/etc</code> 等创建单独的分区，这样以后当系统重新安装时，可以保留个人文件和设置，如果有兴趣可以尝试。</em></p>\n<hr>\n<p>确定目标后开始行动：</p>\n<ol>\n<li><p>如果你要<strong>清除整个磁盘并安装</strong>，则首先完成这个过程，否则请跳过这一步：</p>\n<ol>\n<li><p>键入 <code>d</code>，删除分区。</p>\n</li>\n<li><p>如果有多个分区，<code>fdisk</code> 会询问要删除哪一个，键入 <code>1</code>。</p>\n</li>\n<li><p>重复以上过程，直到所有分区被删除。</p>\n</li>\n<li><p>键入 <code>g</code>，创建新的 GPT 分区表。</p>\n</li>\n</ol>\n</li>\n<li><p>键入 <code>n</code> 新建分区。</p>\n</li>\n<li><p>询问分区号的时候，按回车默认，但要记住它。（空磁盘会是 <code>1</code>，已有分区的磁盘会更大）</p>\n</li>\n<li><p>询问第一个扇区的时候，按回车默认。</p>\n</li>\n<li><p>询问最后一个扇区的时候，键入 <code>+512M</code>，按回车确认。<code>fdisk</code> 就会为你创建一个 512 MB 大小的分区。</p>\n</li>\n<li><p>键入 <code>t</code> 变更分区类型，通常会自动选择刚刚创建的分区，如果没有，键入刚刚记下的分区号。（现在也不要忘掉，等会会用到）</p>\n</li>\n<li><p>键入 <code>1</code>，设定为「EFI 启动分区」（EFI System）。</p>\n</li>\n<li><p>重复 2~7，再建立一个 4 GB（或者其它你喜欢的大小）的交换分区（<code>+4GB</code>），不过这次要键入 <code>19</code> 设定为「交换分区」（Linux Swap，这个数字可以通过键入 <code>t</code> 再键入 <code>L</code> 来获得）。</p>\n</li>\n<li><p>重复 2~7，再建立最后一个分区，输入大小时直接按回车，即默认选择剩余的全部空间。不需要更改分区类型（默认是 Linux 文件系统）。</p>\n</li>\n<li><p><strong>检查</strong>，这很重要。键入 <code>l</code> 并仔细查看输出，检查分区是否正确。如果需要帮助，可以键入 <code>m</code>。</p>\n</li>\n<li><p>确认无误后，键入 <code>w</code>，修改被写入磁盘。如果你觉得做错了，键入 <code>q</code> 放弃修改，然后再试一次。</p>\n</li>\n</ol>\n<p><em>如果你真的很怕麻烦，不妨试试 <code>cfdisk</code>，它更加友好。不过对于有经验的用户，命令行会更快。</em></p>\n<h3 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h3><blockquote>\n<p><strong>挂载点</strong></p>\n<p>稍微介绍一下挂载点，这是 Linux 的一大特色机制。</p>\n<p>通常在 Windows 上，<strong>磁盘是固定的，文件被存储在磁盘上</strong>。这很符合我们的直观感受，没错吧？</p>\n<p>现在在 Linux 中，我们必须改变这一想法，也就是，<strong>文件是固定的，磁盘为文件提供空间</strong>。</p>\n<p>请花几分钟理解一下这个概念。</p>\n<p>在 Linux 中，所有的文件路径都从 <code>/</code> 开始，这也就是所说的根目录，<code>/</code> 下设有 <code>etc</code>、<code>bin</code>、<code>usr</code>、<code>home</code> 等多个文件夹，这些文件夹可以被（物理上）放在一个分区上，也可以每个拥有自己的分区，应用程序无需关心这些，只需要提供路径即可访问文件，而具体的组织方式是由 <code>fstab</code> 等组件完成的。</p>\n<p>举个简单的例子，如果将磁盘 A 挂载到 <code>/</code>，将磁盘 B 挂载到 <code>/home</code>，那么：</p>\n<ul>\n<li><p>文件 <code>/usr/bin/bash</code> 将被存储在磁盘 A 的某个位置</p>\n</li>\n<li><p>文件 <code>/home/rarity/a.out</code> 将被存储在磁盘 B 的某个位置</p>\n</li>\n<li><p>如果移除（卸载）磁盘 B，<code>/home</code> 仍然存在，但会变为空文件夹（或者它原先的内容），此时如果向其中写入文件，数据将被存储至磁盘 A。</p>\n</li>\n<li><p>如果现在将磁盘 B 重新挂载到 <code>/home/ddd</code>，那么 <code>a.out</code> 的路径会变为：<code>/home/ddd/rarity/a.out</code>。</p>\n</li>\n<li><p>从磁盘 B 的角度来看就很明白：文件实质上始终是 <code>/rarity/a.out</code>，之所以路径发生了变化，是因为挂载点不同，路径的计算起点不一样。</p>\n</li>\n</ul>\n<p>很快你就会发现这种方式比盘符简单灵活多了，因为很多命令可以无脑执行而根本不需要考虑盘符。</p>\n</blockquote>\n<p>下面挂载磁盘，一个磁盘只有在被挂载后才能通过文件系统进行访问。</p>\n<p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsblk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到你的磁盘（刚刚 <code>fdisk</code> 完成的），如果这么快就忘记了，可以根据容量判断。</p>\n<p>接下来找到你的分区（EFI 启动区，交换分区，主分区），可以根据容量判断，也可以根据分区号识别。例如，<code>/dev/sdb</code> 上分区号为 <code>3</code> 的分区被记录为 <code>/dev/sdb3</code>。</p>\n<p><em>如果是 NVMe，则中间会多一个字母 <code>p</code>，例如 <code>nvme0n1p3</code> 而不是 <code>nvme0n13</code>，后者看上去就不对，请想想为什么。</em></p>\n<p>然后创建挂载点，因为挂载点本质上是目录，所以这样做：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /mnt/home\n<span class=\"token function\">mkdir</span> /mnt/boot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>这两步创建了挂载点 <code>/mnt</code>，<code>/mnt/home</code>，<code>/mnt/boot</code>（<code>-p</code> 表示同时创建父目录）。</p>\n<p><em>也许你会问，为什么需要这样一个 <code>/mnt</code> 呢？这其实就是很巧妙的地方：</em></p>\n<blockquote>\n<p><strong><code>/mnt</code> 是什么？</strong></p>\n<p>首先考虑我们现在在哪里，这是 Linux 中很重要的一个概念。</p>\n<p>现在我们位于 Arch 的安装盘中，也就是说，现在的 <code>/</code> 是你的 <strong>USB</strong> 磁盘，而并非日后操作系统将要运行的，计算机里面的那个磁盘。</p>\n<p>现在要做的是将几个分区挂载到 <code>/mnt</code> 和它的子目录，这样二者得到「对齐」，此后对 <code>/mnt</code> 内目录结构的修改，将被写入到计算机上的磁盘。</p>\n<p>下一次从硬盘启动的时候，Arch 会将**计算机上磁盘的根目录作为 <code>/</code>**，这样原来的 <code>/mnt/home</code> 现在就变为 <code>/home</code>。（想想上面刚刚介绍的原理，磁盘实际上只存储了 <code>/mnt</code> 里面的东西）</p>\n<p>看看，这就是 Linux 解决这种问题的巧妙方法。如果在 Windows 上想这样做，那是要费不少劲的。</p>\n<p>我们只需要把一个系统安装到 <code>/mnt</code> 里面，然后切换根磁盘，就可以使用这个系统！这个方式有点像把树的一根枝条剪下来插在土里又长成一棵新的树一样。只要理解了，就会发现十分方便，而且由于不涉及写入当前正在运行系统的磁盘，所以不会产生半路崩溃之类的问题。</p>\n<p>至于叫作 <code>/mnt</code> 并不是硬性要求，只是习惯上的命名。</p>\n</blockquote>\n<hr>\n<p>挂载的分区是「生的」，为了使用它，必须格式化分区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkfs.f2fs /dev/<span class=\"token operator\">&lt;</span>MainPart<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这里的占位符请替换为<strong>主分区</strong>（除了 EFI 和交换的那一个）。此命令用于格式化分区为 F2FS 格式，如果你听说过 EXT4，并且想用，只需要换成 <code>mkfs.ext4</code> 就行了。当然，你还可以选择 <code>btrfs</code>、<code>xfs</code> 等，具体区别这里就不介绍了。</p>\n<p>挂载：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mount</span> /dev/<span class=\"token operator\">&lt;</span>MainPart<span class=\"token operator\">></span> /mnt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这样此分区就和 <code>/mnt</code> 绑定。</p>\n<p>使用类似的方法挂载 EFI 分区（512 MB 大小的那个）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">mkfs.vfat -F32 /dev/<span class=\"token operator\">&lt;</span>EFIPart<span class=\"token operator\">></span>\n<span class=\"token function\">mount</span> /dev/<span class=\"token operator\">&lt;</span>EFIPart<span class=\"token operator\">></span> /mnt/boot<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>注意到这里实际上创建了 FAT32 文件系统，这是出于兼容性的考虑。</p>\n<p>交换分区的创建有些不一样：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkswap</span> /dev/<span class=\"token operator\">&lt;</span>SwapPart<span class=\"token operator\">></span>\n<span class=\"token function\">swapon</span> /dev/<span class=\"token operator\">&lt;</span>SwapPart<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>整个过程一气呵成，但依然要注意不要输入错误的分区，否则当数据损毁后，你会十分沮丧。</p>\n<p>现在来看看我们已经做了什么：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">lsblk<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>观察输出，现在应该像是：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sdb                   disk\n|-- sdb1    512.0M    part    &#x2F;mnt&#x2F;boot\n|-- sdb2      4.0G    part    [SWAP]\n|-- sdb3    114.5G    part    &#x2F;mnt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分区的右边多出了挂载点标记。</p>\n<p>如果一切都正确，那么我们可以继续，如果看上去不对，那就深吸一口气，然后检查哪里出了问题。</p>\n<h3 id=\"安装基本软件包\"><a href=\"#安装基本软件包\" class=\"headerlink\" title=\"安装基本软件包\"></a>安装基本软件包</h3><p>一个操作系统总是由很多软件构成的，因此并没有所谓的「操作系统安装过程」，本质上，就是要安装和配置一堆软件包而已（当然有点太多了）。</p>\n<p>现在我们已经为新的 Arch 准备了空间，然而 <code>/mnt</code> 事实上还是空的，里面什么都没有，就此启动系统，肯定不成功。这也就是你手里的安装盘的作用之二（之一是启动系统）。所以，我们来安装 Arch 的基本软件包。</p>\n<p>执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">reflector --country <span class=\"token operator\">&lt;</span>Country<span class=\"token operator\">></span> --latest <span class=\"token number\">5</span> --sort rate --save /etc/pacman.d/mirrorlist <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个命令获取位于指定国家的五个最近更新的软件源服务器，且对它们进行按速率排序。至于什么是软件源，我们马上介绍。</p>\n<p><code>&lt;Country&gt;</code> 设置为你所在的国家就行了（只是举例，中国大陆为 <code>China</code>，法国为 <code>France</code>，当然要是你坚持写 <code>Antarctica</code>，也没有人拦着你）。存在空格的名字，须在两边加上引号，例如 <code>&quot;United Kingdom&quot;</code>，否则会引发错误。</p>\n<p>这个命令的执行需要一分钟左右，所以请耐心等一下。</p>\n<hr>\n<p>上一条命令完成后运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Syy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令更新软件源列表。</p>\n<p>你可以把软件源想象成应用市场，但有一点点区别，因为应用市场是在需要时通过网络取得软件列表的，软件源则相反，软件列表被下载到电脑上，要用时直接查找就行了，所以在安装新的软件前，必须更新软件源以知道现在仓库中都提供哪些版本的软件。</p>\n<p>更新密钥环：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Sy archlinux-keyring<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这条命令更新 Arch 仓库维护者的密钥。</p>\n<p>每个软件包在 Arch 上传时均经过签名确认完整性，<code>pacman</code> 会在下载软件后验证签名，确保文件没有被篡改（不是怕镜像站坑你，是为了避免在传输过程中出现的随机错误）。</p>\n<p>更新这些密钥后，<code>pacman</code> 才能处理新的软件包。</p>\n<blockquote>\n<p><strong>包管理器与 <code>pacman</code></strong></p>\n<p>你或许对包管理器不陌生，<code>npm</code>、<code>apt</code>、<code>nuget</code>、<code>pip</code>、<code>gem</code>、<code>yum</code>、<code>dnf</code>、<code>cargo</code>、<code>mvn</code> 等等都是各种各样的包管理器，这些里面几乎肯定有几个是你见过的。包管理器负责下载、安装、配置、卸载软件，解决依赖关系这样的工作。</p>\n<p>在 Windows 上你或许没有这样的感受，这是因为大多数软件都把它自己的依赖打包了起来，随软件一起附上，带来的唯一问题就是庞大的体积。</p>\n<p>在 GNU&#x2F;Linux 上的软件都很小，而且你可以依赖仓库里任何你想要的软件包，包管理器确保你的软件在用户机器上具有合适的环境。</p>\n<p>这种机制不仅方便软件的更新，也节约了不少空间。想想你电脑里的数百个乃至数千个 <code>vcruntime114514.dll</code>，真是好可怕——当然，举个例子。</p>\n<p><code>pacman</code><del>（怕充满）</del>是 Arch 的包管理器，负责从 Arch 官方仓库下载和安装软件包。你当然可以为你的 Arch 选配 <code>apt</code> 或者 <code>yum</code>，只要处理得当都没问题。但 <code>pacman</code> 是 Arch 官方使用的，出了问题虽然不包退换，却更容易得到帮助。</p>\n</blockquote>\n<hr>\n<p>现在安装基本的软件包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacstrap /mnt base base-devel linux linux-firmware <span class=\"token function\">nano</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>base</code> 是 Arch 的核心部分，<code>base-devel</code> 是基本软件包组，<code>linux</code> 是内核，<code>linux-firmware</code> 是固件支持程序，<code>nano</code> 是文本编辑器，仅此而已。</p>\n<p>如果主分区选择了 EXT4 文件系统，此处还必须安装 <code>e2fsprogs</code> 以支持它，简单将其添加在命令的最后面就行了。</p>\n<p><code>pacstrap</code> 能做一系列工作配置这些软件包（组），自然，使用 <code>pacman</code> 一个个来也是可以的，不过是会多一个损坏的键盘和一些折断的手指。</p>\n<p>这个过程需要几分钟，你可以去玩一会你喜欢的游戏。</p>\n<h3 id=\"生成分区挂载表\"><a href=\"#生成分区挂载表\" class=\"headerlink\" title=\"生成分区挂载表\"></a>生成分区挂载表</h3><p>还记得刚刚我们执行了一些 <code>mount</code> 命令吗？Arch 是不知道要如何挂载那几个分区的，因此，即使现在它们还处于挂载状态，但下一次启动时，它们并不会自动挂载，也就没办法进行读写。</p>\n<p>我们必须对 <code>fstab</code> 进行设定，它位于 <code>/etc/fstab</code>，这个表告诉 Arch 如何挂载各分区。以往这个设定是很麻烦的，要查询各个分区的 UUID，然后设定合适的模式，不仅繁琐，还很容易出错。现在随着自动化的进展，这个过程可以自动完成：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">genfstab -U -p /mnt <span class=\"token operator\">>></span> /mnt/etc/fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它检测一些环境参数，然后生成合适的 <code>fstab</code>，要记住现在我们还是在 USB 中，并不是在真正的系统中（它在 <code>/mnt</code> 下），因此磁盘上的 <code>/etc/fstab</code> 对应着现在环境中的 <code>/mnt/etc/fstab</code>。</p>\n<p>由于这个文件实在太重要了，因此我们确认一下它真的生成了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> /mnt/etc/fstab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>虽然 ArchWiki 建议你检查其中的错误，但是其实如果真的有漏洞也很难看出来，你只需要注意 <code>swap</code>、<code>/</code>、<code>/boot</code> 等字样，如果它们出现了，那么基本上就没有问题。</p>\n<p><code>cat</code> 用于输出一个或多个文件内容。至于为什么不叫 <code>dog</code> 已经超出了我们的讨论范围，如果感兴趣可以自行搜索。</p>\n<h3 id=\"进入系统\"><a href=\"#进入系统\" class=\"headerlink\" title=\"进入系统\"></a>进入系统</h3><p>接下来的所有操作都需要在实际的系统上完成，因为大多数软件希望系统位于 <code>/</code>，这样它们才能正常运行，但我们知道它现在位于 <code>/mnt</code>。如果现在从硬盘重启，系统确实就会位于 <code>/</code>，但是会有以下问题：</p>\n<ul>\n<li><p>环境没有配置好，USB 提供的很多工具并不包含在刚刚安装的系统中（还记得吗，我们只是安装了 <code>base linux linux-firmware</code>）。</p>\n</li>\n<li><p>更要命的是，GRUB 引导文件没有生成，根本就无法启动。</p>\n</li>\n</ul>\n<p>所以我们需要有一个工具来模拟一个环境，使系统好像就位于 <code>/</code> 而不是 <code>/mnt</code>，这就是 <code>arch-chroot</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">arch-chroot /mnt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令一旦完成执行，终端就会发生变化，从此开始，<code>/mnt</code> 被映射到 <code>/</code>，你就「进入」了新安装的系统。当然这只是把根目录切换了一下，实际在运行的还是 USB 里面的那个 LiveCD 安装程序。</p>\n<h3 id=\"更新软件源和密钥环\"><a href=\"#更新软件源和密钥环\" class=\"headerlink\" title=\"更新软件源和密钥环\"></a>更新软件源和密钥环</h3><p>为了避免一会儿忘记，我们现在更新 <code>pacman</code> 的软件源和密钥环：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Syy\npacman -Sy archlinux-keyring<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>之所以还要更新一次，是因为之前那一次更新只更新了 LiveCD 的软件源和密钥环，这一次是更新实际操作系统中的那一份。</p>\n<p><em><code>reflector</code> 不需要重新执行，因为安装时已经自动为你复制好了。</em></p>\n<h3 id=\"校正时间\"><a href=\"#校正时间\" class=\"headerlink\" title=\"校正时间\"></a>校正时间</h3><p>使用 <code>ln</code> 命令设定时区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -sf /usr/share/zoneinfo/<span class=\"token operator\">&lt;</span>Region<span class=\"token operator\">></span>/<span class=\"token operator\">&lt;</span>City<span class=\"token operator\">></span> /etc/localtime<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果你在中国大陆，<code>&lt;Region&gt;</code> 就是 <code>Asia</code>，<code>&lt;City&gt;</code> 就是 <code>Shanghai</code>。</p>\n<p><em><code>ln</code> 的实际作用其实是创建文件链接（不是 URL，那是超链接），有点像快捷方式，在这里它把 <code>/etc/localtime</code> 指向 <code>/usr/share/zoneinfo/&lt;Region&gt;/&lt;City&gt;</code>，从应用程序层面而言，这两个文件的内容（看上去）会始终保持一致。不能简单复制文件，因为时间信息是每时每刻都在变的。</em></p>\n<hr>\n<p>如果你想要知道所有可能的时区，可以这样做：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /usr/share/zoneinfo/<span class=\"token operator\">&lt;</span>Region<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会列出所有可能的地区（大洲）。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /usr/share/zoneinfo/Asia<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这会列出亚洲所有可能的时区设置。只需要选择和自己在同一时区的城市即可，因为它只用来设置时间。</p>\n<p><code>ls</code> 用于列出某个目录下的所有子目录（子文件夹）。</p>\n<hr>\n<p>调整时间：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hwclock --systohc --utc\ntimedatectl set-ntp <span class=\"token boolean\">true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"本地化\"><a href=\"#本地化\" class=\"headerlink\" title=\"本地化\"></a>本地化</h3><p>为了能够设置操作系统的语言，我们需要进行本地化过程。</p>\n<p>编辑文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/locale.gen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>你将进入 <code>nano</code> 的文件编辑界面，使用上下键移动视图，找到这样两行（并不是挨在一起的）：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">#en_US.UTF-8 UTF-8\n#zh_CN.UTF-8 UTF-8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>删除它们之前的 <code>#</code> 符号，然后按 <code>Ctrl + X</code>，<code>nano</code> 会询问是否要保存，键入 <code>y</code> 并回车确认。</p>\n<p>如果你打开时文件为空，那么一定是哪里弄错了。退出 <code>nano</code>（不要保存），重新输入正确的命令。</p>\n<hr>\n<p>现在运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">locale-gen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个程序会生成必要的本地化文件。</p>\n<p>运行完成后，编辑文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/locale.conf<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>和之前那一条很像，但并不相同，请注意准确地拼写。这个文件不存在，所以打开时应当为空。</p>\n<p>向其中写入以下内容，然后保存：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">LANG&#x3D;en_US.UTF-8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>设置为英文是有道理的，因为这是用于系统级的本地化，考虑到控制台（TTY）其实很难处理非 ASCII 字符。如果将来系统出了问题，我们还得回到控制台，这时如果输出全是乱码，你会有被蟒蛇缠住的感觉。</p>\n<h3 id=\"网络设置\"><a href=\"#网络设置\" class=\"headerlink\" title=\"网络设置\"></a>网络设置</h3><p>现在来设置主机名：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"&lt;ComputerName>\"</span> <span class=\"token operator\">>></span> /etc/hostname<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><code>echo</code> 和 <code>&gt;&gt;</code> 配合使用用于直接将 <code>echo</code> 后面的内容写入文件，而不需要去打开编辑器，很快你会发现这很实用。</p>\n<p>引号 <code>&quot;&quot;</code> 有时是可选的，但是为了不出现意外，还是加上吧。</p>\n<p><code>&gt;&gt;</code> 是重定向标识，<code>echo</code> 的默认输出是 <code>stdout</code>（标准输出），为了将其写入文件需要将输出流「接到」文件上。</p>\n<p>计算机名不应当包含空格。此外，虽然没有严格限制，但出于兼容性的考虑，请还是尽量只使用 ASCII 字符。</p>\n<hr>\n<p>接下来绑定本地回环端口，如果不知道这是什么也不要紧，因为对于大多数情况，这个设置都是固定的。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/hosts<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个文件可能已经存在，也可能为空。不管怎样，向其中填写以下内容并保存：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">127.0.0.1 localhost\n::1 localhost\n127.0.1.1 &lt;ComputerName&gt;.localdomain &lt;ComputerName&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><code>&lt;ComputerName&gt;</code> 应该替换为上一步所选择的计算机名。因为这是在编辑文件，我们怕你忘记了。</p>\n<p><em>注意最后一行开头是 <code>127.0.1.1</code>（不是 <code>127.0.0.1</code>）。虽然它并没有任何特殊的地方，但不知为何，很多人把这个数字填错。就像「管理员」和「管埋员」一样。</em></p>\n<h3 id=\"创建帐户\"><a href=\"#创建帐户\" class=\"headerlink\" title=\"创建帐户\"></a>创建帐户</h3><p>操作系统必须有帐户才能访问。历史上的一台电脑都是好多人公用的（即使现在也是），由于 PC 的普及，很多计算机上只有一个帐户，但不管怎么样，现在我们的系统什么也没有，所以需要创建帐户。</p>\n<p>首先运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这用于设置 <code>root</code> 的密码。<code>root</code> 是绝大多数 GNU&#x2F;Linux 上的最高权限帐户，拥有控制系统一切的权力，因此该密码请勿设置得太简单（但是也不要胡乱输入，如果忘记会很麻烦）。</p>\n<p>输入密码没有回显，确保输入正确后回车即可。（退格键依然可以使用）</p>\n<hr>\n<p>现在来创建和设定个人帐户。（不能什么事都以 <code>root</code> 身份完成，否则如果你运行了一个恶意软件，它将可以删除计算机上的所有内容，还能任意解码你的密码，这太可怕了！）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">useradd</span> -m -G wheel -s /bin/bash <span class=\"token operator\">&lt;</span>UserName<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>用户名可以自选，但是依然要使用 ASCII 字符，并且不能有空格。此外如果使用字母，只有小写字母可以被接受。</p>\n<p>设定密码：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">passwd</span> <span class=\"token operator\">&lt;</span>UserName<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这和设定 <code>root</code> 的方法是一样的，不过由于需要经常使用，建议设置得简单好记（但不可以少于 6 个字符）。</p>\n<hr>\n<p>个人帐户是没有控制系统目录的权限的，当然可以通过登录到 <code>root</code> 来做这些操作，但是这样会带来两个问题：</p>\n<ul>\n<li><p><code>root</code> 的密码太长，登录很麻烦。</p>\n</li>\n<li><p>这让问题又回到原点。</p>\n</li>\n</ul>\n<p>所以我们要使用 <code>sudo</code>，它允许被授权的普通用户使用 <code>sudo</code> 命令来临时获取管理员权限。刚刚所创建的新用户并不在这里，所以我们需要告诉 <code>sudo</code>。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nano</span> /etc/sudoers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>找到如下一行（或者类似的）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># %wheel ALL=(ALL:ALL) ALL</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><em>类似这样的行在此文件中共有三行，它们靠得比较近，请确保你选择的是第一个（第四个 <code>ALL</code> 后不应当再有任何后缀）。</em></p>\n<p>去掉最前面的 <code>#</code> 和空格，然后保存并退出。</p>\n<h3 id=\"安装微码\"><a href=\"#安装微码\" class=\"headerlink\" title=\"安装微码\"></a>安装微码</h3><p>微码控制处理器的指令解释，有时也用来修正硬件错误。既然是 CPU 级别的，那么怎么想也都应该安装上。</p>\n<p>运行下面两条命令中合适的一条：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S amd-ucode <span class=\"token comment\"># AMD</span>\npacman -S intel-ucode <span class=\"token comment\"># Intel</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>#</code> 后面的是注释，是给你看的，不用输入终端。</p>\n<p>两条命令只需执行一条，根据你机器搭载的 CPU 选择即可。</p>\n<h3 id=\"安装网络组件\"><a href=\"#安装网络组件\" class=\"headerlink\" title=\"安装网络组件\"></a>安装网络组件</h3><p>新的操作系统什么也没有，而且稍后重启时我们还要继续在终端操作，所以现在安装网络组件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S networkmanager\nsystemctl <span class=\"token builtin class-name\">enable</span> networkmanager<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"启动引导\"><a href=\"#启动引导\" class=\"headerlink\" title=\"启动引导\"></a>启动引导</h3><p>在继续之前我们要说明一点额外的东西，当然，这对于后续步骤暂时没有影响，如果着急，可以先跳过。</p>\n<blockquote>\n<p><strong>还需要启动引导程序吗？</strong></p>\n<p>你可能听说过 GRUB 这个名字，它是大多数 GNU&#x2F;Linux 发行版的默认启动引导程序，GRUB 异常的强大，可以引导几乎所有的操作系统内核。</p>\n<p>但是，进入 UEFI 时代后，我们其实多了一种选择：<strong>直接生成 Linux 内核的 EFI 启动文件并交由 EFI 引导</strong>（不应当称之为 BIOS，因为 EFI 和 BIOS 并不一样）。这会使得启动略快一些。不过这是相当麻烦的，因为要手动（或者设置自动程序）生成内核的引导文件。如果启用了安全启动，还要进行内核签名。</p>\n<p>以上问题当然是有解决方案的，但这已经超出了本指南的范围，我们会在其它文章中再行介绍。另外，使用 EFI 直接引导时不方便选择启动系统（需要进入 EFI 菜单），所以只建议单系统用户使用。</p>\n<p>不管怎样，让我们先安装 GRUB 吧，因为下一次重启就需要引导。除非你打算在这里完成 EFI 的配置，但如果你真的做了，你会有后脑勺被拳头砸过的感觉。</p>\n</blockquote>\n<p>如果在安装双系统，请先执行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S os-prober<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>这个程序可以识别其它的操作系统。</p>\n<p>现在下载 GRUB 软件包：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -S grub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后安装 GRUB 到指定的 EFI 分区：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">grub-install --target<span class=\"token operator\">=</span>x86_64-efi --efi-directory<span class=\"token operator\">=</span>/boot --bootloader-id<span class=\"token operator\">=</span>grub --recheck<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>命令很长，但依然要准确地输入。如果哪里不正确，GRUB 会提醒你。</p>\n<hr>\n<p>现在配置 <code>os-prober</code>：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"GRUB_DISABLE_OS_PROBER=false\"</span> <span class=\"token operator\">>></span> /etc/default/grub<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>看看，我们再次使用 <code>echo</code> 和 <code>&gt;&gt;</code> 完成了文件写入。</p>\n<blockquote>\n<p><strong>巧妙的命令组合</strong></p>\n<p>为什么没有类似 <code>write-file a.txt &quot;hello, world&quot;</code> 这样的命令？</p>\n<p>这是因为使用已有的命令组合（在这里是 <code>echo</code> 和重定向）足以简单地完成这些任务，而且还可以提供极高的自定义过程。</p>\n<p>想想下面这两个问题：如果我想同时写入两个甚至八个文件怎么办？如果同时还想做些筛选怎么办？这就得设计很多很多的命令！</p>\n<p>这样做会带来两个问题：</p>\n<ul>\n<li><p>系统执行命令的速度会变慢（因为要查找命令）。</p>\n</li>\n<li><p><code>write-8-files-and-search</code> 这样的命令会让人不禁担忧设计这种命令的人是否已经疯了。</p>\n</li>\n</ul>\n<p>你可以试着搜索一下 <code>tee</code> 和 <code>grep</code>，看看如何使用它们的组合解决这些问题。</p>\n<p>GNU 所编写的程序（当然还有很多其它程序）都遵循「单一功能原则」：一个程序只负责一个任务，例如 <code>cat</code> 只负责读文件，而 <code>grep</code> 只负责查找——虽然它的查找功能十分强大，但也只是查找。</p>\n<p>通常我们称这种程序为「工具」（Tools），而称那些有很多功能的程序（例如 GIMP）为「应用」（Applications）。</p>\n</blockquote>\n<hr>\n<p>现在运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grub-mkconfig</span> -o /boot/grub/grub.cfg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>此命令生成供 GRUB 读取的配置文件，用于启动。</p>\n<p>在输出中你应当看到 <code>vmlinuz-linux</code>、<code>initramfs-linux</code> 等字样，并且要确保最后 GRUB 输出了 <code>done</code>。</p>\n<p>如果缺少了哪一个，或者看上去有问题，那么请再试一试，如果依然不行，那么……如果你愿意，可以键入 <code>exit</code> 返回 LiveCD，再键入 <code>reboot</code> 重启，之后你可以从头再来（当然，不必重新分区了）。</p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p>我们很想一鼓作气，但处理器看上去已经受不了了。正好借此机会，我们来确认一下 GRUB 能否正常运行，同时看看我们已经做了多少。</p>\n<p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>退出当前系统（还记得 <code>arch-chroot</code> 吗）。</p>\n<p>再执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">shutdown</span> now<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>来关闭计算机。</p>\n<p>等指示灯熄灭，所有的部件都冷却下来后，拔下 USB，然后再接通电源开机。</p>\n<hr>\n<p>开机时依然要设法进入 UEFI 设置，然后调整启动顺序，将 Arch Linux 或者 GRUB 作为第一启动项。</p>\n<p>有时它可能不叫这个名字，没有关系，只要确保将「Windows Boot Manager」放在最后，一般 Arch 也就相应地放在最前面了。</p>\n<p>现在等待系统启动（通常几秒钟），随后你会看到 Arch 的登录界面：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;ComputerName&gt; Login:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>是的，依然没有好看的图像，但是我们现在有相当的信心，因为我们已经知道如何驾驭终端，既然如此，好看的图像还会远吗？</p>\n<p>在后面键入你的用户名并回车，随后 Arch 会向你询问密码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Password:<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>输入你的密码。密码仍然没有回显，确认输入正确后回车即可。</p>\n<p>随后你就可以回到熟悉的终端：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&lt;UserName&gt;@&lt;ComputerName&gt; ~ $<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意到 <code>@</code> 的前面已经变成了你的用户名，这也意味着此后我们的身份不再是 <code>root</code>，因此，执行一部分命令时，需要在最前面添加 <code>sudo</code>（如果你还记得它的作用）。</p>\n<h3 id=\"安装桌面\"><a href=\"#安装桌面\" class=\"headerlink\" title=\"安装桌面\"></a>安装桌面</h3><blockquote>\n<p><strong>使用桌面环境还是窗口管理器？</strong></p>\n<p>要回答这个问题，首先必须明确二者的区别。</p>\n<p>桌面环境（DE）是窗口管理器（WM）的超集。DE 提供菜单栏，托盘，标题栏，小工具等多种组件集合，用上去很像其它操作系统的「桌面」。而 WM 通常只提供简单的窗口管理（包括层叠），操作主要依赖键盘。因为由于不涉及图形系统，很多 BUG 就不会产生。</p>\n<p>本指南使用 DE，因为我们要创建的是桌面操作系统，所以应当尽可能给它「桌面」的感受，同时也不会给人太高的学习成本。但如果喜欢 WM，我们的其它文章中也会提到如何配置和安装。</p>\n<p>如何在二者中做出选择本来就是一个比较的问题，但是有的时候或许我们并不需要选择，既然你已走上 Arch 这条路，或许有一天你能找出一个不错的解决方案。</p>\n<p>谁知道呢？</p>\n</blockquote>\n<p>为 GNU&#x2F;Linux 添加桌面本身就是安装几个应用程序的工作，所以这件事情并不困难。不过从这里开始是一个分界点，从此之后的很多软件并不是只有一种选择，我会尽可能列出多的可能，试图阐明它们的区别，不过最终的选择权依然在你的手中。</p>\n<h4 id=\"图形系统\"><a href=\"#图形系统\" class=\"headerlink\" title=\"图形系统\"></a>图形系统</h4><p>下面来面对这样一个问题：图形系统。它用于和桌面环境商定显示图像的方法。</p>\n<p><em>我们希望尽可能将问题简单化，因此并未区分显示协议、窗口系统、显示协议实现等概念，而是统称图形系统。</em></p>\n<p>目前，主流的选择有两个：</p>\n<ul>\n<li><p>X Window System（X11），这个系统比较古老，这既是优势也是缺陷：</p>\n<ul>\n<li><p>支持面非常广泛（几乎所有）。</p>\n</li>\n<li><p>运行稳定，BUG 较少。</p>\n</li>\n<li><p>系统占用相当高（如果在玩 Minecraft 时运行 <code>top</code>，<code>Xorg</code> 经常紧挨在 <code>java</code> 的下面），运行比较慢。</p>\n<p><em>在一些比较早期的文章中，X 被评价为「较慢」，但一段时间以来，各种实例都表明，X 的性能消耗已经远远不再是「较高」。在渲染程序越来越复杂的今天，X 的性能问题明显地暴露出来。</em></p>\n</li>\n<li><p>不太安全（类似 AutoHotKey 之类的东西是有可能存在的）。</p>\n</li>\n<li><p>完全不兼容 Wayland，Wayland 程序不能在 X 上运行（除非使用 <code>weston</code> 混成器，但这样有为了使用 X 而使用 X 的嫌疑）。</p>\n</li>\n<li><p>可供参考的资料比较多。</p>\n</li>\n</ul>\n</li>\n<li><p>Wayland，这个系统比较新，虽然设计上是为了取代 X，但事实上它却和 X 形成了类似互补的关系——它的优势正是 X 的缺陷，反之亦然：</p>\n<ul>\n<li><p>支持面比较窄（虽然仍然在快速增加）。</p>\n</li>\n<li><p>运行不太稳定，BUG 较多。</p>\n</li>\n<li><p>系统占用较低（我们很难指望这么频繁使用的组件拥有极低的占用），运行很快。</p>\n</li>\n<li><p>比较安全（如果未经许可，屏幕录制是不可能的）。</p>\n</li>\n<li><p>大多数 X 应用程序可以在 Wayland 上运行（如果合理使用 <code>xwayland</code> 等兼容程序）。</p>\n</li>\n<li><p>可供参考的资料比较少。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p><em>过去的很多文章中认为 Wayland 缺乏驱动程序，在当时的确如此，但这一现象现在已有所改善：NVIDIA 495 驱动已经提供了相应的支持，而 Nouveau 也基本上到位了（至少已经有成功的例子）。</em></p>\n<hr>\n<p>你可能在想「我全都要」。噢不，你不能。即使你设法安装了两套图形系统，你也只能使用一个。所以……</p>\n<blockquote>\n<p>做出你的选择，并承担相应的后果。</p>\n</blockquote>\n<p>现在我们回来，希望你已经做出了自己满意的回答。</p>\n<p><em>不必为选择 X 而担心更新问题。影响如此巨大的图形系统更新时，一定会有成熟的解决方案。而且，并没有人规定你必须升级，这可不是 Windows Update！另外，即使 X 的性能的确不好，但还是比 Windows 强多了，你大可不必担心。</em></p>\n<p><em>也不必为选择 Wayland 而担心 BUG。尽管漏洞随时都存在，但是它们通常有合适的修复方案。即使不兼容，大多数情况下也可以通过将应用程序切换到 XWayland 上完成运行，而要是兼容，那就是赚了！</em></p>\n<hr>\n<p>如果决定使用 X：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S xorg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果决定使用 Wayland：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S wayland wayland-protocols xorg-xwayland<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"桌面环境\"><a href=\"#桌面环境\" class=\"headerlink\" title=\"桌面环境\"></a>桌面环境</h4><p>现在你可以选择一个喜欢的桌面环境。</p>\n<p>KDE 还是 GNOME？噢不，这个看法也太狭隘了，来看看 ArchWiki 给出的一些选择（部分没有列出）：</p>\n<ul>\n<li><p>Cinnamon</p>\n</li>\n<li><p>Cutefish</p>\n</li>\n<li><p>Enlightenment</p>\n</li>\n<li><p>GNOME</p>\n</li>\n<li><p>KDE</p>\n</li>\n<li><p>LXDE</p>\n</li>\n<li><p>Sugar</p>\n</li>\n<li><p>Xfce</p>\n</li>\n<li><p>Trinity</p>\n</li>\n</ul>\n<p>……这只是一小部分。</p>\n<p>到这里的选择就很多了，我们不太可能在这里一一介绍。不过你可以前往 ArchWiki 并搜索名字（当然是英文）来进入其页面，并找到相应的安装方法和配置方法。</p>\n<p>同时你还需要为桌面环境选配一个显示管理器（Display Manager），常用的选择有很多，例如 GDM、LightDM、SDDM 等。</p>\n<p>在选择时要遵循一个原则：<strong>先成套后搭配</strong>，也就是说，如果桌面环境为你提供 DM（例如 GNOME 提供 GDM），就使用它提供的，否则再自行搭配（例如 Cinnamon 搭配 LightDM）。你同样可以在 ArchWiki 上找到一些建议。</p>\n<p><em>当然如果你认为你的水平足够高，那么这些限制都可以随便打破，只要你知道遇到错误怎么处理。</em></p>\n<hr>\n<p><strong>但是</strong>，我们所编写的是<strong>指南</strong>，一份指南怎能只告诉它的读者「去查 Wiki，然后自己试试」？负起指南的责任远远高于保持中立。所以，我们将介绍 GNOME 的安装方法，不过同时读者应当知道，这<strong>只是万千选择中的一个</strong>，请不要局限自己的视角，否则就失去了 Arch 宝贵的 DIY 特点。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S gnome gdm\n<span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> gdm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>就这么简单。</p>\n<p>当然无论选配哪一个 DE、哪一个 DM，都要记得运行 <code>systemctl enable &lt;DMName&gt;</code> 来启动此 DM 的服务，否则将无法进入登录界面。</p>\n<p>顺便提一句，GNOME 已经正式支持 Wayland，所以若要让 GNOME 在 X 上运行，需要额外的配置，这里叙述从简，就不提及了。</p>\n<hr>\n<h3 id=\"驱动程序\"><a href=\"#驱动程序\" class=\"headerlink\" title=\"驱动程序\"></a>驱动程序</h3><p>现在我们已经来到最后一步，也就是驱动程序的安装。</p>\n<p>大多数驱动程序已经内置在操作系统中，包括 <code>nouveau</code>、<code>mesa</code>、<code>amdgpu</code> 等。对于我们所使用的机器，并不需要安装任何额外的驱动，所有的组件都可以正常运行。由于我们还没有回到桌面环境，因此尚无法预知可能出现的问题，不过以下提供针对硬件的一些建议：</p>\n<ul>\n<li><p>NVIDIA GPU（问题最多）：</p>\n<ul>\n<li><p>如果是唯一的图形卡，并且你的屏幕分辨率高（4K 及以上），那么 <code>nouveau</code>（内置的自由驱动程序）最高只能支持 30 Hz 的刷新率。</p>\n<p>我们不建议使用非自由软件，所以根据你自己的意愿，如果的确问题影响到正常使用，你可以使用 <code>nvidia</code> 这一专有驱动程序……但希望不需要。</p>\n<p><code>nouveau</code> 已经内置，但如果你不得不使用专有驱动，可以运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S nvidia<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</li>\n<li><p>较新的图形卡使用 <code>nouveau</code> 就可以正常支持 Wayland，如果不能，那么和上面的解决方法一样。</p>\n</li>\n<li><p>如果是加速用图形卡（例如双图形卡笔记本电脑中的独立图形卡），则通常无需单独安装驱动程序。</p>\n</li>\n<li><p>太老的图形卡可能不被支持，并且无法正常运行 Wayland。</p>\n</li>\n</ul>\n</li>\n<li><p>AMD GPU：</p>\n<ul>\n<li><p><code>mesa</code> 和 <code>amdgpu</code> 已经内置，它们应当可以驱动绝大多数现在流行的 AMD 图形卡。</p>\n</li>\n<li><p>更老的图形卡需要 ATI 驱动程序，可参考 ArchWiki 完成安装。</p>\n</li>\n</ul>\n</li>\n<li><p>Intel GPU：</p>\n<ul>\n<li>无需单独驱动，系统已经内置一套完美的（而且自由的）Intel 图形卡驱动程序。</li>\n</ul>\n</li>\n<li><p>蓝牙：</p>\n<ul>\n<li><p>通常安装 <code>bluez</code> 和 <code>bluez-utils</code> 可以解决蓝牙驱动问题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> pacman -S bluez bluez-utils<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果蓝牙没有自动激活，运行以下命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> bluetooth\n<span class=\"token function\">sudo</span> systemctl start bluetooth<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>有些桌面环境集成了蓝牙控制器，如果这样则无需单独安装。</p>\n<p>如果没有，那么可以使用 <code>bluetoothctl</code> 这样一个小巧的命令行控制器。</p>\n</li>\n</ul>\n</li>\n<li><p>触摸板</p>\n<ul>\n<li>无需单独驱动，<code>libinput</code> 足以处理大多数情况。</li>\n</ul>\n</li>\n<li><p>声卡</p>\n<ul>\n<li>声卡这一装置已经如此流行，以至于甚至没有人注意到它还有驱动程序。从未有哪个外部设备如声卡一般如此统一和协调：无需驱动程序，它几乎肯定能用。</li>\n</ul>\n</li>\n<li><p>鼠标和键盘</p>\n<ul>\n<li>作为 PIC 上的设备（PIC 1 和 PIC 12），鼠标和键盘通常无需驱动。</li>\n</ul>\n</li>\n<li><p>打印机</p>\n<ul>\n<li><p>这有点复杂，基本上是要取决于打印机制造商对 OpenPrinting 的支持程度，不过下述几个步骤通常适用于大多数打印机。</p>\n</li>\n<li><p>如果制造商提供了 GNU&#x2F;Linux 的驱动程序，建议使用它。</p>\n</li>\n<li><p>否则，试试 <code>cups</code> 与 <code>gutenprint</code>。</p>\n</li>\n<li><p>如果这还不行，试着找到与你的机器最接近的驱动程序并使用。</p>\n</li>\n<li><p>如果以上方法都不行，那么很遗憾，这台设备或许无法被驱动。</p>\n</li>\n</ul>\n</li>\n<li><p>摄像头</p>\n<ul>\n<li>通常无需单独安装驱动程序。如果它无法正常运转，请查阅 Wiki 上是否有对应机型的解决方案，或者联系其制造商。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h3><p>重启计算机，如果一切正常，GRUB 将可以引导 Arch Linux。如果在安装双系统，你会发现 Windows 也应该出现在 GRUB 选项中。（当然，要是没准备好安全启动，还是先不要动它）</p>\n<h2 id=\"接下来做什么\"><a href=\"#接下来做什么\" class=\"headerlink\" title=\"接下来做什么\"></a>接下来做什么</h2><h3 id=\"美化\"><a href=\"#美化\" class=\"headerlink\" title=\"美化\"></a>美化</h3><p>系统启动后一定会令你大吃一惊，因为默认的 GNOME 其实一点都不简陋，即使不安装主题，它也相当的优雅。</p>\n<p>当然，即使你没有使用 GNOME，其它的 DE 一定也为你提供了不错的体验，如果没有，请告诉他们，我相信大多数开发者会对于改善用户体验很有兴趣。</p>\n<p>如果你不喜欢默认的主题，那也没有关系，你可以在网络上搜索一些适合你的 DE 的主题，然后安装它，这些纯粹是个性化的东西，因此就不展开了。</p>\n<p>此外，GRUB 也是可以设定主题的，所以你知道要做什么了不？（大多数人都同意黑底白字绝对不是最好的设计）</p>\n<p>DM 也是可以设置主题的，不过相比桌面本身而言，可选的略微少了一些。当然，你可以设置自动登录来直接跳过登录过程，权限系统会保证操作系统的重要文件不受破坏。但是如果需要绝对的安全，还是不要这样做。</p>\n<p>声音什么的也是可调的，如果你之前不知道的话。</p>\n<h3 id=\"安全启动\"><a href=\"#安全启动\" class=\"headerlink\" title=\"安全启动\"></a>安全启动</h3><p><strong>这并不是只有双系统才应当考虑的问题。</strong></p>\n<p>UEFI 新增的功能之一是安全启动，它保证所引导的内核已经过签名，这样可避免恶意软件侵入内核破坏操作系统。虽然大多数主板上内置 Microsoft 的 CA 证书，但其实这是可以修改的。</p>\n<p>绝大多数情况下，GNU&#x2F;Linux 自身的安全已经足够，但是安全启动仍然应当被启用，如果没有安装 Windows，那么只需要一些不很复杂的配置，就可以在 <code>pacman</code> 每次升级内核时自动签名，而同时这也能保证你的安全。</p>\n<p>而如果要和 Windows 并存，问题也并不复杂，不过详细的操作方法已经超出我们的范围，所以只好以后有机会再说了。</p>\n<p>虽然说得挺吓人，但也不必太过慌张，你认为有多少恶意软件可以完美地注入到一个常常更新的内核中呢？所以你大可以直接删除 Windows，然后完全无视这个功能。以前没有安全启动的时候，我们碰到过这些问题吗？所以说，很多这样的问题，其实都是被「制造」出来的。</p>\n<blockquote>\n<p>如果用自己数年糟糕的使用体验去换一次防御病毒入侵的机会，那这种防御到底有什么意义？</p>\n</blockquote>\n<h3 id=\"安装输入法\"><a href=\"#安装输入法\" class=\"headerlink\" title=\"安装输入法\"></a>安装输入法</h3><p>如果要使用其它语言输入，应当安装输入法。对于中文（以及一些其它的语言），<code>fcitx-im</code> 和 <code>ibus</code> 等等都是不错的选择。注意在 Windows 上很流行的输入法通常在 GNU&#x2F;Linux 上并不一定工作得很完美。</p>\n<h3 id=\"AUR\"><a href=\"#AUR\" class=\"headerlink\" title=\"AUR\"></a>AUR</h3><p>AUR 是由社区维护的软件仓库，其中包含一些 <code>pacman</code> 不提供的。</p>\n<p>若要使用 AUR，请参考 <a href=\"https://aur.archlinux.org/\">AUR 主页</a> 的指南。</p>\n<h3 id=\"更新系统\"><a href=\"#更新系统\" class=\"headerlink\" title=\"更新系统\"></a>更新系统</h3><p>也就是俗称的「滚」，它是指这条命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pacman -Syu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>它更新系统中的所有软件包，确保它们处于最新。</p>\n<p>这条命令需要频繁执行（几乎每天），因此你可能会希望给它安排一个系统服务来自动化这个过程。</p>\n<p>如果执行过程中出了错误也不要惊慌，因为世界上所有的 Arch 用户也会面临和你一样的问题。同理，开发者一定会在自己的电脑上测试后再发布，而测试环境绝大多数情况下和你的环境应该是几乎一样的。</p>\n<p><em>这也是我们不建议使用 ArchLinuxCN 这样的扩展源的原因之一。使用统一的标准和规范，在出问题时更容易得到更多的帮助。当然这只是建议，请按自己的需求做最后决定。</em></p>\n<h3 id=\"Wine\"><a href=\"#Wine\" class=\"headerlink\" title=\"Wine\"></a>Wine</h3><p><a href=\"https://www.winehq.org/\">Wine</a> 是一个可以在 GNU&#x2F;Linux 上执行一些 Windows 应用程序的组件，它通过翻译 API 来完成这个过程。由于 Microsoft 并未公开一些方法的规范，因此 Wine 只能依靠猜测，所以会使得它不太稳定。但是，相当多的软件其实已经可以使用 Wine 来运行（.NET 3.5 和 4.6.1 可以「完美」运行，想想基于它创建的应用程序有多少）。</p>\n<p>如果你已经下定决心删除了 Windows，却又对 Windows 的一些应用程序念念不忘，或许 Wine 能够帮你渡过一段难关。</p>\n<p>你可能会认为我把一个 Windows 相关的问题放在这里不太合适，但是其实并不是如此。如果 Wine 是一个自由软件，而 GNU&#x2F;Linux 也是，那么为什么这个组合就不能使用呢？至少这为更多使用 Arch 的人带来了希望啊。</p>\n<h3 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h3><p>GNU&#x2F;Linux 的游戏环境比我以前预想的要<strong>好太多了</strong>。</p>\n<p>Unreal Engine 和 Unity 都支持 GNU&#x2F;Linux，类似这样的通用游戏引擎还有很多。游戏公司如果愿意，可以提供针对 GNU&#x2F;Linux 的发行版本（有些的确也是这么做的，例如 Dota 2 和 Minecraft）。</p>\n<p>Steam 上也有相当多的游戏可以在 GNU&#x2F;Linux 上运行（约 70%），它们中有相当一部分虽然不原生支持，但可以通过转译等操作来运行，例如 Apex Legends、Warframe 和 Grand Theft Auto V。</p>\n<p>现在你还觉得 GNU&#x2F;Linux 不适合游戏吗？其实一开始就不是这样。在 GNU&#x2F;Linux 上，Minecraft 平均比 Windows 运行时帧率高约 50%，如果不信可以自己试试。</p>\n<p>对于移动设备上的游戏那就更加简单，因为模拟器实在是太多了。当然，不使用模拟器的方法也是有的，这里就不展开介绍了。</p>\n<p>另外，还有多少人不知道 Android 经过修改也可以直接安装在电脑上？</p>\n<h3 id=\"开始你的创造\"><a href=\"#开始你的创造\" class=\"headerlink\" title=\"开始你的创造\"></a>开始你的创造</h3><blockquote>\n<p>一切到此结束，一切又由此而始……</p>\n</blockquote>\n<p>至此，我们的这份指南的主体部分就结束了，但这只是开始，现在你拥有了一套 Arch。也许它不完美，也许它不成熟，都不要紧。尽管整个过程费时费力，但是如果现在让你说说你的 Arch 上面有些什么，你是不是该了如指掌了？</p>\n<p>更重要的是，这一切是由你来指挥的，<strong>计算机已经在你的掌控之中</strong>！再想想捆绑安装的各种电脑管家，最多只能推迟 35 天的强制更新，没来由的各种弹窗，预装的成组软件……这样自己组装而来的系统，是不是有一种舒畅感？</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><blockquote>\n<p>我本可以忍受黑暗，如果我不曾见过光明。</p>\n</blockquote>\n<p>再一次回头看我们最初的目标，一路走来并不容易，现在你坐在新拆封的桌面环境之前，想想之前的终端，是不是有一种冲出黑暗的感觉？如果是的，那么恭喜，欢迎你通过入职考核，正式成为 Arch 的一员！</p>\n<p>最后，让我们用一条有趣的命令结束这份指南……</p>\n<p>打开虚拟终端，它现在应该在应用列表里（如果 DE 已经集成）。不过要是没有，你可以按 <code>Ctrl + Alt + F1</code> 进入（熟悉的）TTY 终端，如果不行，再同时按下 <code>Fn</code>。</p>\n<p>键入（不要忘了切换到英文输入法）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">s</span><span class=\"token operator\">=</span><span class=\"token string\">'s=\\47%s\\47;printf \"$s\" \"$s\"'</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">printf</span> <span class=\"token string\">\"<span class=\"token variable\">$s</span>\"</span> <span class=\"token string\">\"<span class=\"token variable\">$s</span>\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>（你可以多试试几次，没有危险！）</p>\n<p>它输出了些什么？你能再写出一个类似的程序吗？</p>\n<p>（要回到图形界面，按下 <code>Ctrl + Alt + F7</code>，如果不行，再同时按下 <code>Fn</code>）</p>\n<p>GNU&#x2F;Linux 的世界远远比想象得要广阔和奇妙得多，一切皆有可能。</p>\n<blockquote>\n<p>这是属于你的世界，我很荣幸为你敲开它的大门。</p>\n</blockquote>\n<p>现在该说再见了！哦，如果你想要说些什么，评论区在下面。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl6dfekwk0001egtgcjcrconf","category_id":"cl6dfekwq0003egtg84h5b7n9","_id":"cl6dfekwu0006egtg65si8tp0"}],"PostTag":[],"Tag":[]}}